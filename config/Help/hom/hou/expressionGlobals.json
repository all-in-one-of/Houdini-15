{"body": [{"indent": 0, "text": [{"text": "hou.", "type": "supertitle"}, "expressionGlobals"], "type": "title", "extent": [0, 26], "level": 0}, {"indent": 0, "type": "summary", "extent": [97, 189], "text": ["Return the globals dictionary used by the parameter expression evaluation\nnamespace."]}, {"body": [{"indent": 0, "role": "item", "type": "usage", "extent": [189, 228], "text": [" ", {"text": ["expressionGlobals()"], "type": "code"}, "  \u2192 dict"]}], "container": true, "role": "item_group", "type": "usage_group"}, {"indent": 0, "type": "para", "extent": [228, 549], "text": ["When Houdini evaluates a Python expression inside a parameter, it uses a\nseparate namespace.  This way, Houdini can run ", {"text": ["from hou import *"], "type": "code"}, " and\n", {"text": ["from hou.session import *"], "type": "code"}, " in that namespace, allowing you to drop the\n", {"text": ["hou."], "type": "code"}, " and ", {"text": ["hou.session."], "type": "code"}, " prefixes in your expressions, and the global\nnamespace does not get polluted."]}, {"indent": 0, "type": "para", "extent": [549, 797], "text": ["In Python, namespaces are stored as dictionaries.  This function returns the\ndictionary for the Python parameter expression namespace.  It is analogous to\nthe builtin ", {"text": ["globals"], "type": "code"}, " function, which returns you the dictionary for the\ncurrent namespace."]}, {"indent": 0, "type": "para", "extent": [797, 1051], "text": ["You might use this function from the ", {"text": ["pythonrc.py"], "type": "code"}, " file to set up Python\nfunctions that can be called from any Python parameter expression.  For\nexample, if you put your functions in a module called ", {"text": ["expr"], "type": "code"}, ", you might\nput the following in ", {"text": ["pythonrc.py"], "type": "code"}, ":"]}, {"lang": "python", "indent": 0, "type": "pre", "extent": [1051, 1119], "text": ["\nimport expr\nhou.expressionGlobals()['expr'] = expr\n"]}, {"indent": 0, "type": "para", "extent": [1119, 1240], "text": ["Then, from a Python expression, you could write ", {"text": ["expr.foo()"], "type": "code"}, ", where ", {"text": ["foo"], "type": "code"}, " is\na function defined in your ", {"text": ["expr"], "type": "code"}, " module."]}, {"indent": 0, "type": "para", "extent": [1240, 1412], "text": ["You can also use this dictionary with Python\u2019s ", {"text": ["exec"], "type": "code"}, " statement.  The following\nexample also imports the ", {"text": ["expr"], "type": "code"}, " module into the both the global and expression\nnamespaces:"]}, {"lang": "python", "indent": 0, "type": "pre", "extent": [1412, 1534], "text": ["\ncode = compile(\"import expr\", \"<generated_code>\", \"exec\")\nexec code\nexec code in hou.expressionGlobals()\n"]}, {"indent": 0, "type": "para", "extent": [1534, 1739], "text": ["See ", {"text": ["Python Parameter Expressions"], "fullpath": "/hom/expressions", "scheme": null, "type": "link", "value": "/hom/expressions"}, " for more information on\nusing Python expressions in parameters.\nSee ", {"fragment": "#startup", "text": ["startup scripts"], "value": "/hom/locations#startup", "fullpath": "/hom/locations#startup", "scheme": null, "type": "link"}, " for more information about\n", {"text": ["pythonrc.py"], "type": "code"}, "."]}], "summary": ["Return the globals dictionary used by the parameter expression evaluation\nnamespace."], "type": "root", "attrs": {"cppname": "hom::expressionGlobals", "type": "homfunction", "group": "scripting"}, "title": [{"text": "hou.", "type": "supertitle"}, "expressionGlobals"]}