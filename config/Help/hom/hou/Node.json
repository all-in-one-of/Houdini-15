{"body": [{"indent": 0, "text": [{"text": "hou.", "type": "supertitle"}, "Node"], "type": "title", "extent": [0, 13], "level": 0}, {"indent": 0, "type": "summary", "extent": [99, 259], "text": ["The base class for all nodes in Houdini (objects, SOPs, COPs, etc.)  An instance of this class corresponds to exactly one instance of a node in Houdini."]}, {"indent": 0, "type": "para", "extent": [259, 680], "text": ["Each node has a unique path that defines its location in the tree of nodes.\nThe node path hierarchy is similar to the hierarchy of folders and files in a\nfile system.  Some nodes, called networks, may contain other nodes inside them,\nmuch like a file folder would, while other nodes may not.  For example, an\nobject node instance and a SOP subnetwork node instance may contain SOP nodes,\nbut a box SOP instance may not."]}, {"body": [{"body": [{"indent": 4, "type": "para", "extent": [685, 1171], "text": ["Be careful not to confuse nodes with node types.  A node is an instance\n    of a node type.  For example suppose ", {"text": ["/obj/geo1/box1"], "type": "code"}, " is a box SOP.  It has\n    its own unique name (box1) and its own copies of parameter values.  It is\n    an instance of the box SOP node type.  This node type defines what\n    parameters are common to all box SOP node instances, as well as the\n    algorithm that each BOX SOP performs.  The class that represents a node\n    type is ", {"text": "", "value": "/hom/hou/NodeType", "fallback_text": "hou.NodeType", "fullpath": "/hom/hou/NodeType", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "role": "item", "type": "tip", "extent": [680, 685]}], "container": true, "role": "item_group", "type": "tip_group"}, {"indent": 0, "type": "para", "extent": [1171, 1494], "text": ["You cannot create instances of ", {"text": ["hou.Node"], "type": "code"}, " using ", {"text": ["hou.Node.__init__"], "type": "code"}, ".\nInstead, you look up Node objects corresponding to existing Houdini nodes\nwith ", {"text": ["hou.node()"], "fullpath": "/hom/hou/node_", "scheme": "Hom", "type": "link", "value": "/hom/hou/node_"}, ".  To create a new Houdini node instance inside another\nnode, use ", {"fragment": "#createNode", "text": "", "value": "/hom/hou/Node#createNode", "fallback_text": "hou.Node.createNode", "fullpath": "/hom/hou/Node#createNode", "scheme": "Hom", "type": "link"}, ".  To delete a Houdini node, use\n", {"fragment": "#destroy", "text": "", "value": "/hom/hou/Node#destroy", "fallback_text": "hou.Node.destroy", "fullpath": "/hom/hou/Node#destroy", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 0, "type": "para", "extent": [1494, 2038], "text": ["Note that a Node object internally stores a reference to the corresponding\nHoudini node, and that their lifetimes are different.  If a Python node object\nis deleted because its reference count in Python goes to zero, the Houdini node\nwill be unaffected.  On the other hand, if you have a Node object in a Python\nvariable and the Houdini node is deleted, the Python variable will still exist,\nand Python will not crash.  Instead, if you later call a method on that\nPython Node object, Houdini will raise a ", {"text": "", "value": "/hom/hou/ObjectWasDeleted", "fallback_text": "hou.ObjectWasDeleted", "fullpath": "/hom/hou/ObjectWasDeleted", "scheme": "Hom", "type": "link"}, " exception."]}, {"indent": 0, "type": "para", "extent": [2038, 2121], "text": ["Be careful not to confuse this class with the function ", {"text": ["hou.node"], "fullpath": "/hom/hou/node_", "scheme": "Hom", "type": "link", "value": "/hom/hou/node_"}, "."]}, {"body": [{"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [2302, 2501], "text": ["Return the node at the given path, or None if no such node exists.  If\n    you pass in a relative path (i.e. the path does not start with ", {"text": ["/"], "type": "code"}, "),\n    searches are performed relative to this node."]}, {"indent": 4, "type": "para", "extent": [2501, 2726], "text": ["For example, to get the parent node of a node in the the variable ", {"text": ["n"], "type": "code"}, ", use\n    ", {"text": ["n.node(\"..\")"], "type": "code"}, ". To get a child node named ", {"text": ["geo5"], "type": "code"}, ", use ", {"text": ["n.node(\"geo5\")"], "type": "code"}, ".\n    To get a sibling node named ", {"text": ["light3"], "type": "code"}, ", use ", {"text": ["n.node(\"../light3\")"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [2726, 2919], "text": ["Note that the return value may be an instance of a subclass of Node. For\n    example, if the node being found is an object node, the return value\n    will be a ", {"text": "", "value": "/hom/hou/ObjNode", "fallback_text": "hou.ObjNode", "fullpath": "/hom/hou/ObjNode", "scheme": "Hom", "type": "link"}, " instance."]}, {"indent": 4, "type": "para", "extent": [2919, 3151], "text": ["If the path is an absolute path (i.e. it starts with ", {"text": ["/"], "type": "code"}, "), this\n    method is a shortcut for ", {"text": ["hou.node(node_path)"], "type": "code"}, ".  Otherwise, it is\n    a shortcut for ", {"text": ["hou.node(self.path() + \"/\" + node_path)"], "type": "code"}, ".  See also\n    ", {"text": "", "value": "/hom/hou/node_", "fallback_text": "hou.node_", "fullpath": "/hom/hou/node_", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["node(self, node_path)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}, " or ", {"text": ["None"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::node", "replaces": "/commands/opfind /expressions/chsop /expressions/opexist /expressions/opfullpathfrom"}, "extent": [2147, 2203], "type": "methods_item", "id": "node"}, {"body": [{"indent": 4, "type": "para", "extent": [3259, 3383], "text": ["This is like ", {"fragment": "#node", "text": ["node()"], "value": "#node", "fullpath": "/hom/hou/Node#node", "scheme": null, "type": "link"}, " but takes multiple paths and returns multiple Node objects. This is the equivalent of:"]}, {"lang": null, "indent": 4, "type": "pre", "extent": [3383, 3447], "text": ["\n    nodes = [self.node(path) for path in paths]\n    "]}], "indent": 0, "text": [{"text": ["nodes(self, node_path_tuple)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}, " or ", {"text": ["None"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::nodes"}, "extent": [3151, 3224], "type": "methods_item", "id": "nodes"}, {"body": [{"indent": 4, "type": "para", "extent": [3546, 3752], "text": ["Return the network item at the given path, or None if no such item exists.\n    If you pass in a relative path (i.e. the path does not start with ", {"text": ["/"], "type": "code"}, "),\n    searches are performed relative to this node."]}, {"indent": 4, "type": "para", "extent": [3752, 3983], "text": ["If the path is an absolute path (i.e. it starts with ", {"text": ["/"], "type": "code"}, "), this\n    method is a shortcut for ", {"text": ["hou.item(node_path)"], "type": "code"}, ".  Otherwise, it is\n    a shortcut for ", {"text": ["hou.item(self.path() + \"/\" + item_path)"], "type": "code"}, ".  See also\n    ", {"text": "", "value": "/hom/hou/item", "fallback_text": "hou.item", "fullpath": "/hom/hou/item", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 4, "type": "para", "extent": [3983, 4282], "text": ["Note that the return value may be an instance of a subclass of\n    NetworkMovableItem. For example, if the item being found is an object node,\n    the return value will be a ", {"text": "", "value": "/hom/hou/ObjNode", "fallback_text": "hou.ObjNode", "fullpath": "/hom/hou/ObjNode", "scheme": "Hom", "type": "link"}, " instance. If the item is a\n    network box, the return value will be a ", {"text": "", "value": "/hom/hou/NetworkBox", "fallback_text": "hou.NetworkBox", "fullpath": "/hom/hou/NetworkBox", "scheme": "Hom", "type": "link"}, " instance."]}], "indent": 0, "text": [{"text": ["item(self, item_path)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/NetworkMovableItem", "fallback_text": "hou.NetworkMovableItem", "fullpath": "/hom/hou/NetworkMovableItem", "scheme": "Hom", "type": "link"}, " or ", {"text": ["None"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::item"}, "extent": [3447, 3517], "type": "methods_item", "id": "item"}, {"body": [{"indent": 4, "type": "para", "extent": [4404, 4542], "text": ["This is like ", {"fragment": "#item", "text": ["item()"], "value": "#item", "fullpath": "/hom/hou/Node#item", "scheme": null, "type": "link"}, " but takes multiple paths and returns multiple NetworkMovableItem objects. This is the equivalent of:"]}, {"lang": null, "indent": 4, "type": "pre", "extent": [4542, 4606], "text": ["\n    items = [self.item(path) for path in paths]\n    "]}], "indent": 0, "text": [{"text": ["items(self, item_path_tuple)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/NetworkMovableItem", "fallback_text": "hou.NetworkMovableItem", "fullpath": "/hom/hou/NetworkMovableItem", "scheme": "Hom", "type": "link"}, " or ", {"text": ["None"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::items"}, "extent": [4282, 4369], "type": "methods_item", "id": "items"}, {"body": [{"indent": 4, "type": "para", "extent": [4672, 4941], "text": ["Return ", {"text": ["True"], "type": "code"}, " if this node is a network, in other words a node that may\n    contain child nodes. Otherwise return ", {"text": ["False"], "type": "code"}, " which indicates that several\n    other methods such as ", {"fragment": "#createNode", "text": "", "value": "/hom/hou/Node#createNode", "fallback_text": "hou.Node.createNode", "fullpath": "/hom/hou/Node#createNode", "scheme": "Hom", "type": "link"}, " will raise\n    ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if they are called."]}], "indent": 0, "text": [{"text": ["isNetwork(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::isNetwork"}, "extent": [4606, 4638], "type": "methods_item", "id": "isNetwork"}, {"body": [{"indent": 4, "type": "para", "extent": [5076, 5239], "text": ["Return a list of nodes that are children of this node.  Using the file\n    system analogy, a node\u2019s children are like the contents of a\n    folder/directory."]}, {"indent": 4, "type": "para", "extent": [5239, 5310], "text": ["To find the number of children nodes, use ", {"text": ["len(node.children())"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [5310, 5594], "text": ["The order of the children in the result is the same as the user defined\n    ordering in Houdini.  To see this order, switch the network view pane\n    into list mode, and ensure that the list order is set to ", {"text": ["user defined"], "type": "ui"}, ".\n    To reorder nodes, drag and drop them in the list."]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [5594, 5969], "text": ["\n    def pc(node):\n        '''Print the names of the children of a particular node.  This function\n           can be handy when working interactively in the Python shell.'''\n        for child in node.children():\n            print child.name()\n\n    def ls():\n        '''Print the names of the nodes under the current node.'''\n        pc(hou.pwd())\n    "]}, {"indent": 4, "type": "para", "extent": [5969, 6062], "text": ["The following expression evaluates to a list of children of a particular\n    node type:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [6062, 6149], "text": ["\n    [c for c in node.children() if c.type() == node_type]\n    "]}], "indent": 0, "text": [{"text": ["children(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::children", "replaces": "/commands/opfind /commands/opls /expressions/opnchildren"}, "extent": [4941, 4990], "type": "methods_item", "id": "children"}, {"body": [{"indent": 4, "type": "para", "extent": [6246, 6477], "text": ["Return a tuple containing all the children of this node.\n    Unlike ", {"text": ["children"], "type": "code"}, ", this method will also return\n    ", {"text": "", "value": "/hom/hou/NetworkBox", "fallback_text": "hou.NetworkBox", "fullpath": "/hom/hou/NetworkBox", "scheme": "Hom", "type": "link"}, ", ", {"text": "", "value": "/hom/hou/SubnetIndirectInput", "fallback_text": "hou.SubnetIndirectInput", "fullpath": "/hom/hou/SubnetIndirectInput", "scheme": "Hom", "type": "link"}, ",\n    ", {"text": "", "value": "/hom/hou/StickyNote", "fallback_text": "hou.StickyNote", "fullpath": "/hom/hou/StickyNote", "scheme": "Hom", "type": "link"}, ", and ", {"text": "", "value": "/hom/hou/NetworkDot", "fallback_text": "hou.NetworkDot", "fullpath": "/hom/hou/NetworkDot", "scheme": "Hom", "type": "link"}, " objects."]}], "indent": 0, "text": [{"text": ["allItems(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/NetworkMovableItem", "fallback_text": "hou.NetworkMovableItem", "fullpath": "/hom/hou/NetworkMovableItem", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::allItems"}, "extent": [6149, 6213], "type": "methods_item", "id": "allItems"}, {"body": [{"indent": 4, "type": "para", "extent": [6659, 6812], "text": ["Recursively return all sub children of this node.  For example,\n    ", {"text": ["hou.node(\"/\").allSubChildren()"], "type": "code"}, " will return all the nodes in the hip\n    file."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [6826, 7050], "text": ["If True, this function will do a top-down traversal, placing a node\n        in the returned tuple before its children.  If False, it will do\n        a bottom-up traversal, placing children before their parents."]}], "indent": 4, "type": "dt", "extent": [6812, 6826], "text": ["top_down"]}, {"body": [{"indent": 8, "type": "para", "extent": [7079, 7302], "text": ["If True, the function will recurse inside locked child nodes \n        (child nodes for which the ", {"text": ["isEditable()"], "type": "code"}, " method returns ", {"text": ["False"], "type": "code"}, ")\n        and include children of the locked child nodes in the returned tuple."]}, {"indent": 8, "type": "para", "extent": [7302, 7535], "text": ["If False, the function will not recurse inside locked children nodes, \n        and children of the locked child nodes will not be included in the \n        returned tuple. (The locked child nodes, however, will be included.)"]}, {"indent": 8, "type": "para", "extent": [7535, 7955], "text": ["For example if ", {"text": ["recurse_in_locked_nodes"], "type": "var"}, " is ", {"text": ["True"], "type": "code"}, " and \n        ", {"text": ["hou.node(\"/obj\")"], "type": "code"}, " contains a Simple Female node (a locked node),\n        then the tuple returned by ", {"text": ["hou.node(\"/obj\").allSubChildren()"], "type": "code"}, " \n        will include the Simple Female node and its child nodes. If \n        ", {"text": ["recurse_in_locked_nodes"], "type": "var"}, " is ", {"text": ["False"], "type": "code"}, ", the returned tuple will \n        contain the Simple Female node, but not its child nodes."]}], "indent": 4, "type": "dt", "extent": [7050, 7079], "text": ["recurse_in_locked_nodes"]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [7955, 8106], "text": ["Note that a tuple is returned, not a generator.  This means that it is\n    safe to delete or create nodes while looping through the return value."]}, {"indent": 4, "type": "para", "extent": [8106, 8226], "text": ["The following function deletes all children of a particular type that\n    appear anywhere inside a given node:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [8226, 8491], "text": ["\n    def removeSubChildrenOfType(node, node_type):\n        '''Recursively delete all children of a particular type.'''\n        for child in node.allSubChildren():\n            if child.type() == node_type:\n                child.destroy()\n    "]}, {"indent": 4, "type": "para", "extent": [8491, 8578], "text": ["This code, for example, removes all the visibility SOPs anywhere under /obj:"]}, {"lang": "pycon", "indent": 4, "type": "pre", "extent": [8578, 8709], "text": ["\n    >>> removeSubChildrenOfType(hou.node(\"/obj\"), hou.sopNodeTypeCategory().nodeTypes()['visibility'])\n    "]}], "indent": 0, "text": [{"text": ["allSubChildren(self, top_down=True, recurse_in_locked_nodes=True)"], "type": "code"}, "  \u2192 tuple of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::allSubChildren", "replaces": "/commands/oprmtype /commands/opfind"}, "extent": [6477, 6575], "type": "methods_item", "id": "allSubChildren"}, {"body": [{"indent": 4, "type": "para", "extent": [8794, 8972], "text": ["Recursively return a sequence of all nodes contained in this node including\n    this node.  This method differs from ", {"fragment": "#allSubChildren", "text": "", "value": "/hom/hou/Node#allSubChildren", "fallback_text": "hou.Node.allSubChildren", "fullpath": "/hom/hou/Node#allSubChildren", "scheme": "Hom", "type": "link"}, " in the\n    following ways:"]}, {"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [8972, 9026], "text": ["It includes this node in the returned sequence."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [9026, 9095], "text": ["It does not guarantee a top-down or bottom-up traversal order."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [9095, 9246], "text": ["The method is a generator and does not return a tuple so it is not safe\n      to create or delete nodes while looping through the return value."]}], "container": true, "type": "bullet_group"}, {"indent": 4, "type": "para", "extent": [9246, 9321], "text": ["Here is an example of printing out the paths for all nodes under /obj:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [9321, 9447], "text": ["\n    root_node = hou.node(\"/obj\")\n    for node in root_node.allNodes():\n        print node.path()\n    "]}], "indent": 0, "text": [{"text": ["allNodes(self)"], "type": "code"}, "  \u2192 generator of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::allNodes"}, "extent": [8709, 8761], "type": "methods_item", "id": "allNodes"}, {"body": [{"indent": 4, "type": "para", "extent": [9586, 9650], "text": ["Return a tuple of children nodes name matches the pattern."]}, {"indent": 4, "type": "para", "extent": [9650, 10008], "text": ["The pattern may contain multiple pieces, separated by spaces.  An asterisk\n    (", {"text": ["*"], "type": "code"}, ") in a pattern piece will match any character.  By default, Houdini\n    will add the nodes from each pattern piece to those already matched.\n    However, if the pattern piece begins with a caret (", {"text": ["^"], "type": "code"}, "), Houdini will\n    remove the matches for that piece from the result."]}, {"indent": 4, "type": "para", "extent": [10008, 10277], "text": ["By default the pattern match is case-sensitive.  Set ", {"text": ["ignore_case"], "type": "code"}, " to\n    True for case-insensitive pattern matching.  Note that case insensitivity\n    only applies when matching node names.  It does not apply when matching\n    group, network box or bundle names."]}, {"indent": 4, "type": "para", "extent": [10277, 10350], "text": ["This method returns an empty tuple if you pass in an empty pattern."]}, {"lang": "pycon", "indent": 4, "type": "pre", "extent": [10350, 11094], "text": ["\n    >>> obj = hou.node(\"/obj\")\n    >>> obj.createNode(\"geo\", \"geo1\")\n    <hou.ObjNode of type geo at /obj/geo1>\n    >>> obj.createNode(\"geo\", \"geo2\")\n    <hou.ObjNode of type geo at /obj/geo2>\n    >>> obj.createNode(\"geo\", \"grid\")\n    <hou.ObjNode of type geo at /obj/grid>\n    >>> obj.createNode(\"geo\", \"garbage\")\n    <hou.ObjNode of type geo at /obj/garbage>\n    >>> obj.createNode(\"geo\", \"box\")\n    <hou.ObjNode of type geo at /obj/box>\n\n    >>> def names(nodes):\n    ... return [node.name() for node in nodes]\n\n    >>> names(obj.glob(\"g*\"))\n    ['geo1', 'geo2', 'grid', 'garbage']\n    >>> names(obj.glob(\"ge* ga*\"))\n    ['geo1', 'geo2', 'garbage']\n    >>> names(obj.glob(\"g* ^ga*\"))\n    ['geo1', 'geo2', 'grid']\n    "]}, {"indent": 4, "type": "para", "extent": [11094, 11139], "text": ["See also ", {"fragment": "#recursiveGlob", "text": "", "value": "/hom/hou/Node#recursiveGlob", "fallback_text": "hou.Node.recursiveGlob", "fullpath": "/hom/hou/Node#recursiveGlob", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["glob(self, pattern, ignore_case=False)"], "type": "code"}, "  \u2192 tuple of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::glob", "replaces": "/commands/opglob /commands/opfind"}, "extent": [9447, 9519], "type": "methods_item", "id": "glob"}, {"body": [{"indent": 4, "type": "para", "extent": [11312, 11543], "text": ["Like ", {"fragment": "#glob", "text": "", "value": "/hom/hou/Node#glob", "fallback_text": "hou.Node.glob", "fullpath": "/hom/hou/Node#glob", "scheme": "Hom", "type": "link"}, ", return a tuple of children nodes whose name\n    matches the pattern.  However, any matching child will have all its children\n    added, recursively.  As well, the result may be filtered by node type."]}, {"indent": 4, "type": "para", "extent": [11543, 11699], "text": ["Houdini first matches children nodes against the pattern, then recursively\n    adds the subchildren of matching children, and then applies the filter."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [11714, 12059], "text": ["Child node names will be matched against this string pattern.  See\n        ", {"fragment": "#glob", "text": "", "value": "/hom/hou/Node#glob", "fallback_text": "hou.Node.glob", "fullpath": "/hom/hou/Node#glob", "scheme": "Hom", "type": "link"}, " and ", {"text": "", "value": "/hom/hou/NodeBundle", "fallback_text": "hou.NodeBundle", "fullpath": "/hom/hou/NodeBundle", "scheme": "Hom", "type": "link"}, " for information about the\n        pattern syntax.  Note that if a child node matches the pattern, all of\n        its subchildren will be added to the result (subject to filtering),\n        regardless of the pattern."]}], "indent": 4, "type": "dt", "extent": [11699, 11714], "text": [{"text": ["pattern"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [12073, 12259], "text": ["A ", {"text": "", "value": "/hom/hou/nodeTypeFilter", "fallback_text": "hou.nodeTypeFilter", "fullpath": "/hom/hou/nodeTypeFilter", "scheme": "Hom", "type": "link"}, " enumeration value to limit matched nodes\n        to a particular type (e.g. object nodes, geometry object nodes,\n        surface shader SHOPs, etc.)."]}], "indent": 4, "type": "dt", "extent": [12059, 12073], "text": [{"text": ["filter"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [12259, 12405], "text": ["The pattern and filter behavior is very similar to that used by node\n    bundles in Houdini.  See ", {"text": "", "value": "/hom/hou/NodeBundle", "fallback_text": "hou.NodeBundle", "fullpath": "/hom/hou/NodeBundle", "scheme": "Hom", "type": "link"}, " for more information."]}, {"indent": 4, "type": "para", "extent": [12405, 12471], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the pattern is invalid."]}], "indent": 0, "text": [{"text": ["recursiveGlob(self, pattern, filter=hou.nodeTypeFilter.NoFilter)"], "type": "code"}, "  \u2192 tuple of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::recursiveGlob", "replaces": "/commands/opglob /commands/opfind"}, "extent": [11139, 11236], "type": "methods_item", "id": "recursiveGlob"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Hierarchy"], "extent": [2130, 2147], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [12696, 12769], "text": ["Create a new node of type ", {"text": ["node_type_name"], "type": "code"}, " as a child of this node."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [12786, 13090], "text": ["The name of the new node. If not specified, Houdini appends a number\n        to the node type name, incrementing that number until a unique node\n        name is found.  If you specify a name and a node already exists with\n        that name, Houdini will append a number to create a unique name."]}], "indent": 4, "type": "dt", "extent": [12769, 12786], "text": [{"text": ["node_name"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [13114, 13225], "text": ["If True, the initialization script associated with the node type will\n        be run on the new node."]}], "indent": 4, "type": "dt", "extent": [13090, 13114], "text": [{"text": ["run_init_scripts"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [13246, 13336], "text": ["If True, any subnet contents will be loaded for custom subnet\n        operators."]}], "indent": 4, "type": "dt", "extent": [13225, 13246], "text": [{"text": ["load_contents"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [13359, 13824], "text": ["If True, the node\u2019s type name will be exactly as specified in the\n        ", {"text": ["node_type_name"], "type": "code"}, ". Otherwise, a preferred operator type that matches\n        the given ", {"text": ["node_type_name"], "type": "code"}, " may be used. For example, the given \"hda\"\n        may match a newer version \"hda::2.0\", or if there are two available\n        operators \"namespaceA::hda\" and \"namespaceB::hda\", and the \"namespaceB\"\n        has precedence, then the created node will be of type \"namespaceB::hda\"."]}], "indent": 4, "type": "dt", "extent": [13336, 13359], "text": [{"text": ["exact_type_name"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [13824, 13976], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if this node cannot contain children.\n    Raises ", {"text": "", "value": "/hom/hou/PermissionError", "fallback_text": "hou.PermissionError", "fullpath": "/hom/hou/PermissionError", "scheme": "Hom", "type": "link"}, " if this node is inside a locked asset."]}, {"lang": "pycon", "indent": 4, "type": "pre", "extent": [13976, 14786], "text": ["\n    >>> obj = hou.node(\"/obj\")\n\n    # Let Houdini choose a name based on the node type name.\n    >>> obj.createNode(\"geo\")\n    <hou.ObjNode of type geo at /obj/geo1>\n\n    # Let Houdini choose a unique name.\n    >>> obj.createNode(\"geo\")\n    <hou.ObjNode of type geo at /obj/geo2>\n\n    # Give the node a specific name.\n    >>> obj.createNode(\"geo\", \"foo\")\n    <hou.ObjNode of type geo at /obj/foo>\n\n    # Let Houdini create a unique name from our suggested name.  Also, don't\n    # run the geometry object init scripts so the contents are empty.\n    >>> obj.createNode(\"geo\", \"geo1\", run_init_scripts=False)\n    <hou.ObjNode of type geo at /obj/geo3>\n    >>> obj.node(\"geo1\").children()\n    (<hou.SopNode of type file at /obj/geo1/file1>,)\n    >>> obj.node(\"geo3\").children()\n    ()\n    "]}], "indent": 0, "text": [{"text": ["createNode(self, node_type_name, node_name=None, run_init_scripts=True, load_contents=True, exact_type_name=False)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::createNode", "replaces": "/commands/opadd"}, "extent": [12497, 12636], "type": "methods_item", "id": "createNode"}, {"body": [{"indent": 4, "type": "para", "extent": [14882, 15212], "text": ["Creates a node for visualizing the data from a particular output of this\n    node. If a visualizer node already exists in the current network, it is\n    moved and connected to the specified ", {"text": ["output_index"], "type": "code"}, ". This method is only\n    implemented for SOP and VOP nodes. Other node types do nothing when\n    this method is called."]}], "indent": 0, "text": [{"text": ["createOrMoveVisualizer(self, output_index)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::createOrMoveVisualizer"}, "extent": [14786, 14835], "type": "methods_item", "id": "createOrMoveVisualizer"}, {"body": [{"indent": 4, "type": "para", "extent": [15287, 15310], "text": ["Delete this node."]}, {"indent": 4, "type": "para", "extent": [15310, 15434], "text": ["If you call methods on a Node instance after it has been destroyed, Houdini\n    will raise ", {"text": "", "value": "/hom/hou/ObjectWasDeleted", "fallback_text": "hou.ObjectWasDeleted", "fullpath": "/hom/hou/ObjectWasDeleted", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 4, "type": "para", "extent": [15434, 15527], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if you try to delete a node inside a\n    locked asset."]}], "indent": 0, "text": [{"text": ["destroy(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::destroy", "replaces": "/commands/oprm"}, "extent": [15212, 15231], "type": "methods_item", "id": "destroy"}, {"body": [{"indent": 4, "type": "para", "extent": [15611, 15765], "text": ["Copy this node to a new place in the node hierarchy. The new node is placed\n    inside the given destination node. This method returns the new node."]}, {"indent": 4, "type": "para", "extent": [15765, 15943], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the destination node cannot contain the new node.\n    Raises ", {"text": "", "value": "/hom/hou/PermissionError", "fallback_text": "hou.PermissionError", "fullpath": "/hom/hou/PermissionError", "scheme": "Hom", "type": "link"}, " if the destination node is inside a locked asset."]}], "indent": 0, "text": [{"text": ["copyTo(destination_node)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::copyTo"}, "extent": [15527, 15575], "type": "methods_item", "id": "copyTo"}, {"body": [{"indent": 4, "type": "para", "extent": [16153, 16334], "text": ["Create copies of all specified items in this network. The items do not\n    need to be children of this network, but all items must be contained in\n    the same parent network."]}, {"indent": 4, "type": "para", "extent": [16334, 16803], "text": ["If ", {"text": ["channel_reference_originals"], "type": "code"}, " is True, the parameters of all new nodes\n    are set to channel reference the original nodes. If a copied node is a\n    sub-network, only the top level node establishes channel references to the\n    original. Child nodes inside the sub-network will be simple copies of the\n    original child nodes. The ", {"text": ["relative_references"], "type": "code"}, " parameter controls whether\n    the channel references use relative or absolute paths to the source nodes."]}, {"indent": 4, "type": "para", "extent": [16803, 17106], "text": ["If ", {"text": ["connect_outputs_to_multi_inputs"], "type": "code"}, " is True, and any items being copied\n    have outputs connected to a multi-input node (like a Merge), then the new\n    item copies will also be connected to the multi-input node. Normally\n    copied nodes do not have any outputs to nodes outside the copied set."]}, {"indent": 4, "type": "para", "extent": [17106, 17159], "text": ["Returns a ", {"text": ["tuple"], "type": "code"}, " of all the new network items."]}, {"indent": 4, "type": "para", "extent": [17159, 17311], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if this node cannot contain children.\n    Raises ", {"text": "", "value": "/hom/hou/PermissionError", "fallback_text": "hou.PermissionError", "fullpath": "/hom/hou/PermissionError", "scheme": "Hom", "type": "link"}, " if this node is inside a locked asset."]}], "indent": 0, "text": [{"text": ["copyItems(self, items, channel_reference_originals = False, relative_references = True, connect_outputs_to_multi_inputs = True)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/NetworkMovableItem", "fallback_text": "hou.NetworkMovableItem", "fullpath": "/hom/hou/NetworkMovableItem", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::copyItems"}, "extent": [15943, 16119], "type": "methods_item", "id": "copyItems"}, {"body": [{"indent": 4, "type": "para", "extent": [17377, 17704], "text": ["Destroys all the items in the provided tuple of\n    ", {"text": "", "value": "/hom/hou/NetworkMovableItem", "fallback_text": "hou.NetworkMovableItem", "fullpath": "/hom/hou/NetworkMovableItem", "scheme": "Hom", "type": "link"}, " objects. This is significantly more efficient\n    than looping over the items and calling ", {"text": ["destroy()"], "type": "code"}, " on each one. It also\n    safely handles cases where one object may not be allowed to be deleted\n    unless another object is also deleted."]}, {"indent": 4, "type": "para", "extent": [17704, 17907], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if one or more of the provided items is\n    not a child of this node.\n    Raises ", {"text": "", "value": "/hom/hou/PermissionError", "fallback_text": "hou.PermissionError", "fullpath": "/hom/hou/PermissionError", "scheme": "Hom", "type": "link"}, " if this node is or is inside a locked\n    digital asset."]}], "indent": 0, "text": [{"text": ["deleteItems(self, items)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::deleteItems"}, "extent": [17311, 17341], "type": "methods_item", "id": "deleteItems"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Adding and removing"], "extent": [12471, 12497], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [18026, 18118], "text": ["Return a boolean to indicate of the node is the last selected node in its\n    network."]}, {"indent": 4, "type": "para", "extent": [18118, 18331], "text": ["Each network (i.e. node containing children) stores its own list of\n    selected nodes, and the last selected node has special meaning.  For\n    example, it is the node displayed in unpinned parameter panes."]}, {"indent": 4, "type": "para", "extent": [18331, 18555], "text": ["See also ", {"text": "", "value": "/hom/hou/selectedNodes", "fallback_text": "hou.selectedNodes", "fullpath": "/hom/hou/selectedNodes", "scheme": "Hom", "type": "link"}, " to get a tuple of all the selected nodes\n    in all networks in Houdini.  The last node in this list also has special\n    meaning in Houdini, and corresponds to the global current node."]}], "indent": 0, "text": [{"text": ["isCurrent(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::isCurrent", "replaces": "/commands/opget /expressions/opflag"}, "extent": [17923, 17955], "type": "methods_item", "id": "isCurrent"}, {"body": [{"indent": 4, "type": "para", "extent": [18667, 18721], "text": ["Set or unset this node as the last selected one."]}, {"indent": 4, "type": "para", "extent": [18721, 18934], "text": ["Each network (i.e. node containing children) stores its own list of\n    selected nodes, and the last selected node has special meaning.  For\n    example, it is the node displayed in unpinned parameter panes."]}, {"indent": 4, "type": "para", "extent": [18934, 19159], "text": ["If ", {"text": ["on"], "type": "code"}, " is True, this node will become the last selected node.  If it\n    is False and this node was the last selected one, it will be unselected\n    and the second-last selected node will become the last selected node."]}, {"indent": 4, "type": "para", "extent": [19159, 19283], "text": ["If ", {"text": ["clear_all_selected"], "type": "code"}, " is true, Houdini will unselect every node in\n    this network before performing the operation."]}, {"indent": 4, "type": "para", "extent": [19283, 19353], "text": ["See also ", {"fragment": "#setSelected", "text": "", "value": "/hom/hou/Node#setSelected", "fallback_text": "hou.Node.setSelected", "fullpath": "/hom/hou/Node#setSelected", "scheme": "Hom", "type": "link"}, " and ", {"text": "", "value": "/hom/hou/selectedNodes", "fallback_text": "hou.selectedNodes", "fullpath": "/hom/hou/selectedNodes", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["setCurrent(self, on, clear_all_selected=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setCurrent", "replaces": "/commands/opset"}, "extent": [18555, 18607], "type": "methods_item", "id": "setCurrent"}, {"body": [{"indent": 4, "type": "para", "extent": [19534, 19729], "text": ["Return a tuple containing the children of this node that are selected.\n    Note that the last selected node has special meaning, and can also be\n    retrieved with ", {"fragment": "#isCurrent", "text": "", "value": "/hom/hou/Node#isCurrent", "fallback_text": "hou.Node.isCurrent", "fullpath": "/hom/hou/Node#isCurrent", "scheme": "Hom", "type": "link"}, "."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [19751, 19850], "text": ["If False, hidden nodes are not included in the result, even if they\n        are selected."]}], "indent": 4, "type": "dt", "extent": [19729, 19751], "text": [{"text": ["include_hidden"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [19886, 20132], "text": ["If True, include in the returned tuple any hidden nodes that exist\n        solely to support nodes that are actually selected. This specifically\n        refers to VOP Parameter nodes, but may include other support nodes\n        as well."]}], "indent": 4, "type": "dt", "extent": [19850, 19886], "text": [{"text": ["include_hidden_support_nodes"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [20132, 20218], "text": ["The following example will print the names of all selected objects in\n    ", {"text": ["/obj"], "type": "code"}, ":"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [20218, 20320], "text": ["\n    for n in hou.node(\"/obj\").selectedChildren():\n        print n.name()\n    "]}, {"indent": 4, "type": "para", "extent": [20320, 20419], "text": ["To find the total number of selected children nodes, use\n    ", {"text": ["len(node.selectedChildren())"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["selectedChildren(self, include_hidden=False, include_hidden_support_nodes=False)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::selectedChildren", "replaces": "/commands/opget"}, "extent": [19353, 19468], "type": "methods_item", "id": "selectedChildren"}, {"body": [{"indent": 4, "type": "para", "extent": [20583, 20849], "text": ["Return a tuple containing the children of this node that are selected.\n    Unlike ", {"text": ["selectedChildren"], "type": "code"}, ", this method will also return any selected\n    ", {"text": "", "value": "/hom/hou/NetworkBox", "fallback_text": "hou.NetworkBox", "fullpath": "/hom/hou/NetworkBox", "scheme": "Hom", "type": "link"}, ", ", {"text": "", "value": "/hom/hou/SubnetIndirectInput", "fallback_text": "hou.SubnetIndirectInput", "fullpath": "/hom/hou/SubnetIndirectInput", "scheme": "Hom", "type": "link"}, ",\n    ", {"text": "", "value": "/hom/hou/StickyNote", "fallback_text": "hou.StickyNote", "fullpath": "/hom/hou/StickyNote", "scheme": "Hom", "type": "link"}, ", and ", {"text": "", "value": "/hom/hou/NetworkDot", "fallback_text": "hou.NetworkDot", "fullpath": "/hom/hou/NetworkDot", "scheme": "Hom", "type": "link"}, " objects."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [20871, 21075], "text": ["If False, hidden nodes are not included in the result, even if they\n        are selected. Other network item types cannot be hidden, and so are\n        unaffected by the value of this parameter."]}], "indent": 4, "type": "dt", "extent": [20849, 20871], "text": [{"text": ["include_hidden"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [21111, 21357], "text": ["If True, include in the returned tuple any hidden nodes that exist\n        solely to support nodes that are actually selected. This specifically\n        refers to VOP Parameter nodes, but may include other support nodes\n        as well."]}], "indent": 4, "type": "dt", "extent": [21075, 21111], "text": [{"text": ["include_hidden_support_nodes"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [21357, 21445], "text": ["The following example will print the positions of all selected items in\n    ", {"text": ["/obj"], "type": "code"}, ":"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [21445, 21548], "text": ["\n    for n in hou.node(\"/obj\").selectedItems():\n        print n.position()\n    "]}], "indent": 0, "text": [{"text": ["selectedItems(self, include_hidden=False, include_hidden_support_nodes=False)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/NetworkMovableItem", "fallback_text": "hou.NetworkMovableItem", "fullpath": "/hom/hou/NetworkMovableItem", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::selectedItems"}, "extent": [20419, 20545], "type": "methods_item", "id": "selectedItems"}, {"body": [{"indent": 4, "type": "para", "extent": [21678, 21794], "text": ["Return the number of children of this node that are selected and are of\n    the type specified by ", {"text": ["item_type"], "type": "code"}, "."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [21811, 22012], "text": ["If ", {"text": ["None"], "type": "code"}, ", the total number of selected items of any type is returned.\n        If a ", {"text": "", "value": "/hom/hou/networkItemType", "fallback_text": "hou.networkItemType", "fullpath": "/hom/hou/networkItemType", "scheme": "Hom", "type": "link"}, " value is provided, the number of\n        selected items of that type is returned."]}], "indent": 4, "type": "dt", "extent": [21794, 21811], "text": [{"text": ["item_type"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [22033, 22086], "text": ["If ", {"text": ["True"], "type": "code"}, ", only selected items are counted."]}], "indent": 4, "type": "dt", "extent": [22012, 22033], "text": [{"text": ["selected_only"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [22108, 22315], "text": ["If ", {"text": ["False"], "type": "code"}, ", hidden nodes are not included in the result, even if they\n        are selected. Other network item types cannot be hidden, and so are\n        unaffected by the value of this parameter."]}], "indent": 4, "type": "dt", "extent": [22086, 22108], "text": [{"text": ["include_hidden"], "type": "code"}]}], "container": true, "type": "dt_group"}], "indent": 0, "text": [{"text": ["numItems(self, item_type=None, selected_only=False, include_hidden=False)"], "type": "code"}, "  \u2192 ", {"text": ["int"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::numSelectedItems"}, "extent": [21548, 21637], "type": "methods_item", "id": "numItems"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Selection"], "extent": [17907, 17923], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [22433, 22490], "text": ["Return the ", {"text": "", "value": "/hom/hou/NodeType", "fallback_text": "hou.NodeType", "fullpath": "/hom/hou/NodeType", "scheme": "Hom", "type": "link"}, " object for this node."]}, {"indent": 4, "type": "para", "extent": [22490, 22560], "text": ["For example, all camera node instances share the same node type."]}], "indent": 0, "text": [{"text": ["type(self)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/NodeType", "fallback_text": "hou.NodeType", "fullpath": "/hom/hou/NodeType", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::type", "replaces": "/commands/optype /expressions/optype"}, "extent": [22327, 22366], "type": "methods_item", "id": "type"}, {"body": [{"indent": 4, "type": "para", "extent": [22790, 22936], "text": ["Changes the node to a new type (within the same context). ", {"text": ["new_node_type"], "type": "code"}, "\n    is the internal string name of the type you want to change to."]}, {"indent": 4, "type": "para", "extent": [22936, 23255], "text": [{"text": ["Keep_name"], "type": "code"}, ", ", {"text": ["keep_parms"], "type": "code"}, ", and ", {"text": ["keep_network_contents"], "type": "code"}, " indicate that the\n    node should keep the same name, parameter values, and contents,\n    respectively, after its type has changed.  ", {"text": ["force_change_on_node_type_match"], "type": "code"}, "\n    indicates whether to perform the change even when is already of the\n    specified type."]}], "indent": 0, "text": [{"text": ["changeNodeType(self, new_node_type, keep_name=True, keep_parms=True, keep_network_contents=True, force_change_on_node_type_match=False)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::changeNodeType", "replaces": "/commands/opchangetype"}, "extent": [22560, 22719], "type": "methods_item", "id": "changeNodeType"}, {"body": [{"indent": 4, "type": "para", "extent": [23356, 23578], "text": ["Return the ", {"text": "", "value": "/hom/hou/NodeTypeCategory", "fallback_text": "hou.NodeTypeCategory", "fullpath": "/hom/hou/NodeTypeCategory", "scheme": "Hom", "type": "link"}, " corresponding to the children of\n    this node.  For example, if this node is a geometry object, the children\n    are SOPs.  If it is an object subnet, the children are objects."]}], "indent": 0, "text": [{"text": ["childTypeCategory(self)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/NodeTypeCategory", "fallback_text": "hou.NodeTypeCategory", "fullpath": "/hom/hou/NodeTypeCategory", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::childTypeCategory"}, "extent": [23255, 23314], "type": "methods_item", "id": "childTypeCategory"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Types"], "extent": [22315, 22327], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [23707, 23798], "text": ["Return the parameter at the given path, or ", {"text": ["None"], "type": "code"}, " if the parameter\n    doesn\u2019t exist."]}], "indent": 0, "text": [{"text": ["parm(self, parm_path)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}, " or ", {"text": ["None"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::parm", "replaces": "/expressions/chexist"}, "extent": [23595, 23651], "type": "methods_item", "id": "parm"}, {"body": [{"indent": 4, "type": "para", "extent": [23974, 24030], "text": ["Return a tuple of parameters matching the pattern."]}, {"indent": 4, "type": "para", "extent": [24030, 24393], "text": ["The pattern may contain multiple pieces, separated by spaces.  An asterisk\n    (", {"text": ["*"], "type": "code"}, ") in a pattern piece will match any character.  By default, Houdini\n    will add the parameters from each pattern piece to those already matched.\n    However, if the pattern piece begins with a caret (", {"text": ["^"], "type": "code"}, "), Houdini will\n    remove the matches for that piece from the result."]}, {"indent": 4, "type": "para", "extent": [24393, 24676], "text": ["By default the pattern match is case-sensitive.  Set ", {"text": ["ignore_case"], "type": "code"}, " to\n    True for case-insensitive pattern matching.  Note that case insensitivity\n    only applies when matching node and parameter names.  It does not apply\n    when matching group, network box or bundle names."]}, {"indent": 4, "type": "para", "extent": [24676, 24847], "text": ["By default, only parameters with names matching the pattern are returned. Set ", {"text": ["search_label"], "type": "code"}, " \n    to True to also return parameters with labels matching the pattern."]}, {"indent": 4, "type": "para", "extent": [24847, 24965], "text": ["If ", {"text": ["single_pattern"], "type": "code"}, " is True, the pattern will be treated as one pattern even if there are spaces in the pattern."]}, {"indent": 4, "type": "para", "extent": [24965, 25038], "text": ["This method returns an empty tuple if you pass in an empty pattern."]}], "indent": 0, "text": [{"text": ["globParms(self, pattern, ignore_case=False, search_label=False, single_pattern=False)"], "type": "code"}, "  \u2192 tuple of ", {"text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::globParms", "replaces": "/commands/chls"}, "extent": [23798, 23916], "type": "methods_item", "id": "globParms"}, {"body": [{"indent": 4, "type": "para", "extent": [25161, 25224], "text": ["Evaluates the specified parameter and returns the result."]}], "indent": 0, "text": [{"text": ["evalParm(self, parm_path)"], "type": "code"}, "  \u2192 ", {"text": ["int"], "type": "code"}, ", ", {"text": ["float"], "type": "code"}, ", or ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::evalParm", "replaces": "/expressions/ch /expressions/chs"}, "extent": [25038, 25097], "type": "methods_item", "id": "evalParm"}, {"body": [{"indent": 4, "type": "para", "extent": [25326, 25377], "text": ["Return a list of the parameters on this node."]}], "indent": 0, "text": [{"text": ["parms(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::parms", "replaces": "/commands/opparm"}, "extent": [25224, 25270], "type": "methods_item", "id": "parms"}, {"body": [{"indent": 4, "type": "para", "extent": [25483, 25546], "text": ["Return a list of the parameters that reference this node."]}], "indent": 0, "text": [{"text": ["parmsReferencingThis(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::parmsReferencingThis"}, "extent": [25377, 25438], "type": "methods_item", "id": "parmsReferencingThis"}, {"body": [{"indent": 4, "type": "para", "extent": [25630, 25755], "text": ["Recursively return a sequence of all the parameters on all of the nodes\n    contained in this node including this node."]}, {"indent": 4, "type": "para", "extent": [25755, 25816], "text": ["This method is a generator and does not return a tuple."]}, {"indent": 4, "type": "para", "extent": [25816, 25901], "text": ["Here is an example of printing out the parameter paths for all nodes under /obj:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [25901, 26027], "text": ["\n    root_node = hou.node(\"/obj\")\n    for parm in root_node.allParms():\n        print parm.path()\n    "]}], "indent": 0, "text": [{"text": ["allParms(self)"], "type": "code"}, "  \u2192 generator of ", {"text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::allParms"}, "extent": [25546, 25597], "type": "methods_item", "id": "allParms"}, {"body": [{"indent": 4, "type": "para", "extent": [26092, 26237], "text": ["Given a dictionary mapping parm names to values, set each of the\n    corresponding parms on this node to the given value in the dictionary."]}, {"indent": 4, "type": "para", "extent": [26237, 26306], "text": ["The following example sets the ", {"text": ["tx"], "type": "code"}, " and ", {"text": ["sy"], "type": "code"}, " parameters at once:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [26306, 26427], "text": ["\n    >>> node = hou.node(\"/obj\").createNode(\"geo\")\n    >>> node.setParms({\"tx\": 1, \"sy\": 3})\n    "]}, {"indent": 4, "type": "para", "extent": [26427, 26515], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if any of the parameter names are not\n    valid."]}, {"indent": 4, "type": "para", "extent": [26515, 26594], "text": ["See also the ", {"fragment": "#setParmExpressions", "text": ["setParmExpressions"], "value": "/hom/hou/Node#setParmExpressions", "fullpath": "/hom/hou/Node#setParmExpressions", "scheme": "Hom", "type": "link"}, " method."]}], "indent": 0, "text": [{"text": ["setParms(self, parm_dict)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setParms"}, "extent": [26027, 26059], "type": "methods_item", "id": "setParms"}, {"body": [{"indent": 4, "type": "para", "extent": [26672, 26802], "text": ["Given a dictionary mapping parm names to values, sets the pending value of\n    each of the corresponding parms on this node."]}, {"indent": 4, "type": "para", "extent": [26802, 26889], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if any of the parameter names are not\n    valid."]}, {"indent": 4, "type": "para", "extent": [26889, 26952], "text": ["See also the ", {"fragment": "#setPending", "text": ["setPending"], "value": "/hom/hou/Parm#setPending", "fullpath": "/hom/hou/Parm#setPending", "scheme": "Hom", "type": "link"}, " method."]}], "indent": 0, "text": [{"text": ["setParmsPending(self, parm_dict)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setParmsPending"}, "extent": [26594, 26632], "type": "methods_item", "id": "setParmsPending"}, {"body": [{"indent": 4, "type": "para", "extent": [27077, 27250], "text": ["Given a dictionary mapping parm names to expression strings, set each of\n    the corresponding parms on this node to the given expression string in\n    the dictionary."]}, {"indent": 4, "type": "para", "extent": [27250, 27361], "text": ["See ", {"fragment": "#setExpression", "text": "", "value": "/hom/hou/Parm#setExpression", "fallback_text": "hou.Parm.setExpression", "fullpath": "/hom/hou/Parm#setExpression", "scheme": "Hom", "type": "link"}, " for a description of the ", {"text": ["language"], "type": "code"}, " and\n    ", {"text": ["replace_expressions"], "type": "code"}, " parms."]}, {"indent": 4, "type": "para", "extent": [27361, 27441], "text": ["The following example expressions set the ", {"text": ["tx"], "type": "code"}, " and ", {"text": ["sy"], "type": "code"}, " parameters at once:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [27441, 27589], "text": ["\n    >>> node = hou.node(\"/obj\").createNode(\"geo\")\n    >>> node.setParmExpressions({\"tx\": 'ch(\"ty\")', \"sy\": \"sin($F)\"})\n    "]}, {"indent": 4, "type": "para", "extent": [27589, 27677], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if any of the parameter names are not\n    valid."]}, {"indent": 4, "type": "para", "extent": [27677, 27736], "text": ["See also the ", {"fragment": "#setParms", "text": ["setParms"], "value": "/hom/hou/Node#setParms", "fullpath": "/hom/hou/Node#setParms", "scheme": "Hom", "type": "link"}, " method."]}], "indent": 0, "text": [{"text": ["setParmExpressions(self, parm_dict, language=None, replace_expressions=True)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setParmExpressions"}, "extent": [26952, 27034], "type": "methods_item", "id": "setParmExpressions"}, {"body": [{"indent": 4, "type": "para", "extent": [27835, 27912], "text": ["Return the parm tuple at the given path, or ", {"text": ["None"], "type": "code"}, " if it doesn\u2019t exist."]}, {"indent": 4, "type": "para", "extent": [27912, 28026], "text": ["This method is similar to ", {"text": ["parm()"], "type": "code"}, ", except it returns a\n    ", {"text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " instead of a ", {"text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["parmTuple(self, parm_path)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " or ", {"text": ["None"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::parmTuple"}, "extent": [27736, 27801], "type": "methods_item", "id": "parmTuple"}, {"body": [{"indent": 4, "type": "para", "extent": [28139, 28208], "text": ["Evaluates the specified parameter tuple and returns the result."]}], "indent": 0, "text": [{"text": ["evalParmTuple(self, parm_path)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": ["int"], "type": "code"}, ", ", {"text": ["float"], "type": "code"}, ", or ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::evalParmTuple"}, "extent": [28026, 28101], "type": "methods_item", "id": "evalParmTuple"}, {"body": [{"indent": 4, "type": "para", "extent": [28299, 28356], "text": ["Return a list of all parameter tuples on this node."]}, {"indent": 4, "type": "para", "extent": [28356, 28477], "text": ["This method is similar to ", {"text": ["parms()"], "type": "code"}, ", except it returns a list of\n    ", {"text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " instead of ", {"text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["parmTuples(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::parmTuples"}, "extent": [28208, 28264], "type": "methods_item", "id": "parmTuples"}, {"body": [{"indent": 4, "type": "para", "extent": [28583, 28713], "text": ["Return a list of parameters in a folder on this node.  Returns all\n    parameters in the folder and its subfolders (if any)."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [28731, 29026], "text": ["A sequence of folder name strings.  For example, to get a list of the\n        parameters in the Shading folder of the Render folder, use\n        ", {"text": ["(\"Render\", \"Shading\")"], "type": "code"}, ".  Note that by folder name, we mean the label\n        used in the parameter dialog, not the internal parameter name."]}, {"indent": 8, "type": "para", "extent": [29026, 29154], "text": ["If this sequence is empty, the method returns all parameters on the\n        node, the same as if you called ", {"text": ["parms()"], "type": "code"}, "."]}], "indent": 4, "type": "dt", "extent": [28713, 28731], "text": ["folder_names"]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [29154, 29254], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the folder specified by ", {"text": ["folder_names"], "type": "code"}, "\n    does not exist."]}, {"indent": 4, "type": "para", "extent": [29254, 29424], "text": ["For example, suppose a node had a Render folder that contained a Shading\n    subfolder.  Then this line of code would return the parameters in the\n    Render folder:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [29424, 29676], "text": ["\n    # Note the trailing comma after \"Render\" to tell Python that \"Render\" is\n    # contained in a tuple/sequence as opposed to just a single string with\n    # parentheses around it.\n    >>> node.parmsInFolder((\"Render\", ))\n    "]}, {"indent": 4, "type": "para", "extent": [29676, 29757], "text": ["And this line of code would return the parameters in the Shading subfolder."]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [29757, 29836], "text": ["\n    >>> node.parmsInFolder((\"Render\", \"Shading\"))\n    "]}, {"indent": 4, "type": "para", "extent": [29836, 29938], "text": ["See also ", {"fragment": "#containingFolders", "text": "", "value": "/hom/hou/Parm#containingFolders", "fallback_text": "hou.Parm.containingFolders", "fullpath": "/hom/hou/Parm#containingFolders", "scheme": "Hom", "type": "link"}, "\n    and ", {"fragment": "#containingFolderSetParmTuples", "text": "", "value": "/hom/hou/Parm#containingFolderSetParmTuples", "fallback_text": "hou.Parm.containingFolderSetParmTuples", "fullpath": "/hom/hou/Parm#containingFolderSetParmTuples", "scheme": "Hom", "type": "link"}]}], "indent": 0, "text": [{"text": ["parmsInFolder(self, folder_names)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::parmsInFolder"}, "extent": [28477, 28545], "type": "methods_item", "id": "parmsInFolder"}, {"body": [{"indent": 4, "type": "para", "extent": [30058, 30324], "text": ["Return a list of the parameter tuples in a folder on this node.\n    This method is similar to ", {"text": ["parmsInFolder()"], "type": "code"}, ", except it returns a list of\n    ", {"text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " instead of ", {"text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}, ". See ", {"text": ["parmsInFolder()"], "type": "code"}, "\n    above for information about the arguments."]}, {"indent": 4, "type": "para", "extent": [30324, 30424], "text": ["See also ", {"fragment": "#containingFolders", "text": "", "value": "/hom/hou/Parm#containingFolders", "fallback_text": "hou.Parm.containingFolders", "fullpath": "/hom/hou/Parm#containingFolders", "scheme": "Hom", "type": "link"}, "\n    and ", {"fragment": "#containingFolderSetParmTuples", "text": "", "value": "/hom/hou/Parm#containingFolderSetParmTuples", "fallback_text": "hou.Parm.containingFolderSetParmTuples", "fullpath": "/hom/hou/Parm#containingFolderSetParmTuples", "scheme": "Hom", "type": "link"}]}], "indent": 0, "text": [{"text": ["parmTuplesInFolder(self, folder_names)"], "type": "code"}, "  \u2192 tuple of ", {"text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::parmTuplesInFolder"}, "extent": [29938, 30014], "type": "methods_item", "id": "parmTuplesInFolder"}, {"body": [{"indent": 4, "type": "para", "extent": [30534, 30586], "text": ["Return the node\u2019s default expression language."]}, {"indent": 4, "type": "para", "extent": [30586, 30866], "text": ["When you enter an expression in a parameter that does not already contain\n    an expression, the node\u2019s expression language is used to determine how\n    that expression should be evaluated.  You can change a node\u2019s expression\n    language in the parameter dialog in the GUI."]}, {"indent": 4, "type": "para", "extent": [30866, 31023], "text": ["Changing the node\u2019s expression language will not change the language in\n    parameters already containing expressions (i.e. parameters with keyframes)."]}, {"indent": 4, "type": "para", "extent": [31023, 31415], "text": ["Note that if a parameter already contains an expression and you change that\n    expression in the GUI, the expression language will not change, regardless\n    of the value of the node\u2019s expression language. To change the language of an\n    existing expression in a parameter from Python, use\n    ", {"fragment": "#setExpression", "text": "", "value": "/hom/hou/Parm#setExpression", "fallback_text": "hou.Parm.setExpression", "fullpath": "/hom/hou/Parm#setExpression", "scheme": "Hom", "type": "link"}, ", as in\n    ", {"text": ["parm.setExpression(parm.expression(), language)"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["expressionLanguage(self)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/exprLanguage", "fallback_text": "hou.exprLanguage", "fullpath": "/hom/hou/exprLanguage", "scheme": "Hom", "type": "link"}, " enum value"], "role": "item", "attrs": {"cppname": "HOM_Node::expressionLanguage"}, "extent": [30424, 30491], "type": "methods_item", "id": "expressionLanguage"}, {"body": [{"indent": 4, "type": "para", "extent": [31504, 31606], "text": ["Set the node\u2019s default expression language.\n    See ", {"text": ["expressionLanguage()"], "type": "code"}, " for more information."]}], "indent": 0, "text": [{"text": ["setExpressionLanguage(self, language)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setExpressionLanguage"}, "extent": [31415, 31458], "type": "methods_item", "id": "setExpressionLanguage"}, {"body": [{"indent": 4, "type": "para", "extent": [31742, 31923], "text": ["Return a dictionary of parameter aliases on the node\u2019s parameters.  The\n    keys in the dictionary are the parameters that have aliases and the values\n    are the alias names."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [31936, 32008], "text": ["Return the parameter aliases for this node ", {"text": ["and its children"], "type": "em"}, "."]}], "indent": 4, "type": "dt", "extent": [31923, 31936], "text": ["recurse"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": [{"text": ["parmAliases(self, recurse=False)"], "type": "code"}, "  \u2192 dict of ", {"text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}, " to ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::parmAliases", "replaces": "/commands/chalias"}, "extent": [31606, 31679], "type": "methods_item", "id": "parmAliases"}, {"body": [{"indent": 4, "type": "para", "extent": [32104, 32162], "text": ["Removes all alias names from parameters on the node."]}], "indent": 0, "text": [{"text": ["clearParmAliases(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::clearParmAliases", "replaces": "/commands/chalias"}, "extent": [32008, 32036], "type": "methods_item", "id": "clearParmAliases"}, {"body": [{"indent": 4, "type": "para", "extent": [32273, 32345], "text": ["Return a list of the spare (user-defined) parameters on this node."]}], "indent": 0, "text": [{"text": ["spareParms(self)"], "type": "code"}, "  \u2192 tuple of ", {"text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::spareParms", "replaces": "/commands/opspare"}, "extent": [32162, 32211], "type": "methods_item", "id": "spareParms"}, {"body": [{"indent": 4, "type": "para", "extent": [32443, 32493], "text": ["Removes all spare parameters from this node."]}], "indent": 0, "text": [{"text": ["removeSpareParms(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::removeSpareParms", "replaces": "/commands/opspareds"}, "extent": [32345, 32373], "type": "methods_item", "id": "removeSpareParms"}, {"body": [{"indent": 4, "type": "para", "extent": [32631, 32736], "text": ["Return the group of parm templates corresponding to the current parameter\n    layout for this node."]}, {"indent": 4, "type": "para", "extent": [32736, 32988], "text": ["You can edit the parameter layout for this node (add or remove spare\n    parameters, reorder or hide built-in parameters, etc.) by getting the\n    current parameter group, modifying it, and calling\n    ", {"fragment": "#setParmTemplateGroup", "text": "", "value": "/hom/hou/Node#setParmTemplateGroup", "fallback_text": "hou.Node.setParmTemplateGroup", "fullpath": "/hom/hou/Node#setParmTemplateGroup", "scheme": "Hom", "type": "link"}, " with it."]}, {"indent": 4, "type": "para", "extent": [32988, 33247], "text": ["The following example creates a geometry object, adds a ", {"text": ["My Parms"], "type": "code"}, " folder\n    to it, and adds a ", {"text": ["My Parm"], "type": "code"}, " float parameter to it in that folder.  The\n    parameters are added only to the geometry object created; other geometry\n    objects are unaffected."]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [33247, 33577], "text": ["\n    >>> node = hou.node(\"/obj\").createNode(\"geo\")\n    >>> group = node.parmTemplateGroup()\n    >>> folder = hou.FolderParmTemplate(\"folder\", \"My Parms\")\n    >>> folder.addParmTemplate(hou.FloatParmTemplate(\"myparm\", \"My Parm\", 1))\n    >>> group.append(folder)\n    >>> node.setParmTemplateGroup(group)\n    "]}, {"indent": 4, "type": "para", "extent": [33577, 33730], "text": ["See ", {"text": "", "value": "/hom/hou/ParmTemplateGroup", "fallback_text": "hou.ParmTemplateGroup", "fullpath": "/hom/hou/ParmTemplateGroup", "scheme": "Hom", "type": "link"}, " and the\n    ", {"fragment": "#setParmTemplateGroup", "text": ["setParmTemplateGroup"], "value": "/hom/hou/Node#setParmTemplateGroup", "fullpath": "/hom/hou/Node#setParmTemplateGroup", "scheme": "Hom", "type": "link"}, " method for more\n    information and examples."]}], "indent": 0, "text": [{"text": ["parmTemplateGroup(self)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/ParmTemplateGroup", "fallback_text": "hou.ParmTemplateGroup", "fullpath": "/hom/hou/ParmTemplateGroup", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_HDADefinition::parmTemplateGroup", "replaces": "/commands/opspare"}, "extent": [32493, 32553], "type": "methods_item", "id": "parmTemplateGroup"}, {"body": [{"indent": 4, "type": "para", "extent": [33896, 33944], "text": ["Change the spare parameters for this node."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [33971, 34062], "text": ["A ", {"text": "", "value": "/hom/hou/ParmTemplateGroup", "fallback_text": "hou.ParmTemplateGroup", "fullpath": "/hom/hou/ParmTemplateGroup", "scheme": "Hom", "type": "link"}, " object containing the new parameter\n        layout."]}], "indent": 4, "type": "dt", "extent": [33944, 33971], "text": [{"text": ["parm_template_group"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [34094, 34314], "text": ["If ", {"text": ["True"], "type": "code"}, ", parameters in the group with the same parm tuple names will\n        be automatically renamed.  If ", {"text": ["False"], "type": "code"}, " and there are parms with the same\n        name, this method raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, "."]}], "indent": 4, "type": "dt", "extent": [34062, 34094], "text": [{"text": ["rename_conflicting_parms"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [34314, 34791], "text": ["Note that each node type has a set of parameters which must exist and\n    must be of certain types.  If your parm template group does not contain\n    the required parameters for the node type the will be added at the\n    bottom and will be made invisible.  Similarly, if your parm template\n    group attempts to modify the type, range, label, or other property of\n    a required parameter, all changes to that parameter other than visibility\n    settings will be ignored."]}, {"indent": 4, "type": "para", "extent": [34791, 35056], "text": ["This method is preferred over the other parameter-related methods in this\n    class (addSpareParmTuple, removeSpareParmTuple, replaceSpareParmTuple,\n    addSpareParmFolder, removeSpareParmFolder) because it lets you more easily\n    make manipulate parameters."]}, {"indent": 4, "type": "para", "extent": [35056, 35168], "text": ["See ", {"fragment": "#setParmTemplateGroup", "text": "", "value": "/hom/hou/HDADefinition#setParmTemplateGroup", "fallback_text": "hou.HDADefinition.setParmTemplateGroup", "fullpath": "/hom/hou/HDADefinition#setParmTemplateGroup", "scheme": "Hom", "type": "link"}, " to change the parameter\n    interface of a digital asset."]}], "indent": 0, "text": [{"text": ["setParmTemplateGroup(self, parm_template_group, rename_conflicting_parms=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_HDADefinition::setParmTemplateGroup", "replaces": "/commands/opspare"}, "extent": [33730, 33815], "type": "methods_item", "id": "setParmTemplateGroup"}, {"body": [{"indent": 4, "type": "para", "extent": [35348, 35558], "text": ["Add a spare parameter tuple to the end of the parameters on the node.  If\n    ", {"text": ["in_folder"], "type": "code"}, " is not an empty sequence, this method adds the parameters to\n    the end of the parameters in a particular folder."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [35577, 35712], "text": ["A ", {"text": "", "value": "/hom/hou/ParmTemplate", "fallback_text": "hou.ParmTemplate", "fullpath": "/hom/hou/ParmTemplate", "scheme": "Hom", "type": "link"}, " subclass instance that specifies the type\n        of parameter tuple, the default value, range, etc."]}], "indent": 4, "type": "dt", "extent": [35558, 35577], "text": ["parm_template"]}, {"body": [{"indent": 8, "type": "para", "extent": [35727, 36162], "text": ["A sequence of folder names specifying which folder will hold the\n        parameter.  If this parameter is an empty sequence (e.g. ", {"text": ["()"], "type": "code"}, "), Houdini\n        will not put the parameter inside a folder.  If it is, for example,\n        ", {"text": ["(\"Misc\", \"Controls\")"], "type": "code"}, ", Houdini puts it inside the \"Controls\" folder\n        that\u2019s inside the \"Misc\" folder.  If it is, for example, ", {"text": ["(\"Misc\",)"], "type": "code"}, ",\n        Houdini puts it inside the \"Misc\" folder."]}], "indent": 4, "type": "dt", "extent": [35712, 35727], "text": ["in_folder"]}, {"body": [{"indent": 8, "type": "para", "extent": [36190, 36333], "text": ["If True, and the folder location specified by ", {"text": ["in_folder"], "type": "code"}, " does not\n        exist, this method creates the missing containing folders."]}], "indent": 4, "type": "dt", "extent": [36162, 36190], "text": ["create_missing_folders"]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [36333, 36451], "text": ["Note that this method can add a single folder by passing a\n    ", {"text": "", "value": "/hom/hou/FolderParmTemplate", "fallback_text": "hou.FolderParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate", "scheme": "Hom", "type": "link"}, " for ", {"text": ["parm_template"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [36451, 36530], "text": ["See also the ", {"text": ["removeSpareParmTuple()"], "type": "code"}, " and ", {"text": ["addSpareParmFolder()"], "type": "code"}, " methods."]}, {"indent": 4, "type": "para", "extent": [36530, 36597], "text": ["This method is deprecated in favor of ", {"text": ["setParmTemplateGroup"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["addSpareParmTuple(self, parm_template, in_folder=(), create_missing_folders=False)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::addSpareParmTuple", "replaces": "/commands/opspare"}, "extent": [35168, 35279], "type": "methods_item", "id": "addSpareParmTuple"}, {"body": [{"indent": 4, "type": "para", "extent": [36686, 36736], "text": ["Removes the specified spare parameter tuple."]}, {"indent": 4, "type": "para", "extent": [36736, 36773], "text": ["See also ", {"text": ["addSpareParmTuple()"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [36773, 36840], "text": ["This method is deprecated in favor of ", {"text": ["setParmTemplateGroup"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["removeSpareParmTuple(self, parm_tuple)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::removeSpareParmTuple"}, "extent": [36597, 36641], "type": "methods_item", "id": "removeSpareParmTuple"}, {"body": [{"indent": 4, "type": "para", "extent": [36951, 37298], "text": ["Adds a control parameter folder as the front-most folder at the top-level.\n    This is used to increase visibility of customized control parameters. If a \n    folder of the same name already exists, no new folder will be created.\n    If folder_name is None, it will be set as 'Controls'. If parm_name is None,\n    it will be set as 'folder'."]}, {"indent": 4, "type": "para", "extent": [37298, 37500], "text": ["If there are no current folders present, the existing parameters will be\n    grouped together and stored into a new folder named 'Parameters' and placed\n    after the new control parameter folder."]}], "indent": 0, "text": [{"text": ["addControlParmFolder(self, folder_name=None, parm_name=None)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::addControlParmFolder"}, "extent": [36840, 36906], "type": "methods_item", "id": "addControlParmFolder"}, {"body": [{"indent": 4, "type": "para", "extent": [37646, 37690], "text": ["Adds a folder to the spare parameters."]}, {"indent": 4, "type": "para", "extent": [37690, 37965], "text": ["Note that all the folders in a set correspond to one parameter.  If this\n    is the first folder to go in the set, parm_name will be used as the\n    parameter name.  Otherwise, parm_name will be ignored and the parameter\n    name of the first folder in the set is used."]}, {"indent": 4, "type": "para", "extent": [37965, 38155], "text": ["If this is the first folder in the set and parm_name is None, it will\n    default to 'sparefolder0'.  If parm_name is already in use, a unique name\n    will be automatically generated."]}, {"indent": 4, "type": "para", "extent": [38155, 38361], "text": ["If ", {"text": ["create_missing_folders"], "type": "code"}, " is True, this method will create the folders in\n    in_folder that don\u2019t exist. So, this method can be used to add spare folders\n    and a spare parameter at the same time."]}, {"indent": 4, "type": "para", "extent": [38361, 38601], "text": ["Note that you can add folders by passing a ", {"text": "", "value": "/hom/hou/FolderParmTemplate", "fallback_text": "hou.FolderParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate", "scheme": "Hom", "type": "link"}, "\n    to the ", {"text": ["addSpareParmTuple"], "type": "code"}, " method, so this method is deprecated.  Note\n    also that ", {"text": ["addSpareParmTuple"], "type": "code"}, " is deprecated in favor of\n    ", {"text": ["setParmTemplateGroup"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [38601, 38676], "text": ["See also the ", {"text": ["removeSpareParmFolder"], "type": "code"}, " and ", {"text": ["addSpareParmTuple"], "type": "code"}, " methods."]}, {"indent": 4, "type": "para", "extent": [38676, 38743], "text": ["This method is deprecated in favor of ", {"text": ["setParmTemplateGroup"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["addSpareParmFolder(self, folder_name, in_folder=(), parm_name=None, create_missing_folders=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::addSpareParmFolder"}, "extent": [37500, 37603], "type": "methods_item", "id": "addSpareParmFolder"}, {"body": [{"indent": 4, "type": "para", "extent": [38830, 38886], "text": ["Removes an empty folder from the spare parameters."]}, {"indent": 4, "type": "para", "extent": [38886, 39010], "text": [{"text": ["folder"], "type": "code"}, " is a sequence of folder names.  So, to remove\n    the Output folder, use ", {"text": ["(\"Output\",)"], "type": "code"}, " instead of ", {"text": ["\"Output\""], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [39010, 39132], "text": ["See also ", {"text": ["addSpareParmFolder()"], "type": "code"}, ", ", {"fragment": "#remove", "text": "", "value": "/hom/hou/ParmTemplateGroup#remove", "fallback_text": "hou.ParmTemplateGroup.remove", "fullpath": "/hom/hou/ParmTemplateGroup#remove", "scheme": "Hom", "type": "link"}, ", and\n    ", {"fragment": "#findFolder", "text": "", "value": "/hom/hou/ParmTemplateGroup#findFolder", "fallback_text": "hou.ParmTemplateGroup.findFolder", "fullpath": "/hom/hou/ParmTemplateGroup#findFolder", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["removeSpareParmFolder(self, folder)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::removeSpareParmFolder"}, "extent": [38743, 38784], "type": "methods_item", "id": "removeSpareParmFolder"}, {"body": [{"indent": 4, "type": "para", "extent": [39243, 39385], "text": ["Replace an existing spare parameter tuple with a new one.  The old\n    parameter tuple is removed and the new one is added in its place."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [39406, 39607], "text": ["The name of the spare parameter tuple to replace.  Raises\n        ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if no parameter tuple exists with this name,\n        or if it is the name of a non-spare parameter."]}], "indent": 4, "type": "dt", "extent": [39385, 39406], "text": ["parm_tuple_name"]}, {"body": [{"indent": 8, "type": "para", "extent": [39626, 39696], "text": ["A ", {"text": "", "value": "/hom/hou/ParmTemplate", "fallback_text": "hou.ParmTemplate", "fullpath": "/hom/hou/ParmTemplate", "scheme": "Hom", "type": "link"}, " describing the new parameter tuple."]}], "indent": 4, "type": "dt", "extent": [39607, 39626], "text": ["parm_template"]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [39696, 39884], "text": ["The new parameter tuple may or may not have the same name as the old one.\n    By providing a parameter tuple with the same name, you can modify an\n    existing spare parameter tuple."]}, {"indent": 4, "type": "para", "extent": [39884, 40050], "text": ["Note that you cannot replace non-spare parameter tuples.  However, you can\n    change the visibility of non-spare parameters using\n    ", {"fragment": "#hide", "text": "", "value": "/hom/hou/ParmTuple#hide", "fallback_text": "hou.ParmTuple.hide", "fullpath": "/hom/hou/ParmTuple#hide", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 4, "type": "para", "extent": [40050, 40163], "text": ["To change a parameter for all instances of digital asset, use\n    ", {"fragment": "#replaceParmTuple", "text": "", "value": "/hom/hou/HDADefinition#replaceParmTuple", "fallback_text": "hou.HDADefinition.replaceParmTuple", "fullpath": "/hom/hou/HDADefinition#replaceParmTuple", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 4, "type": "para", "extent": [40163, 40230], "text": ["This method is deprecated in favor of ", {"text": ["setParmTemplateGroup"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["replaceSpareParmTuple(self, parm_tuple_name, parm_template)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::replaceSpareParmTuple"}, "extent": [39132, 39197], "type": "methods_item", "id": "replaceSpareParmTuple"}, {"body": [{"indent": 4, "type": "para", "extent": [40297, 40402], "text": ["Return a list of local variables that can be referenced in parameter\n    expressions on this node."]}], "indent": 0, "text": [{"text": ["localVariables(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::localVariables()"}, "extent": [40230, 40256], "type": "methods_item", "id": "localVariables"}, {"body": [{"indent": 4, "type": "para", "extent": [40530, 40724], "text": ["Saves the animation associated with the parameters of this node to the clip\n    file specified by ", {"text": ["file_name"], "type": "var"}, ".\n    The extension of ", {"text": ["file_name"], "type": "var"}, " determines the format of the saved file."]}, {"indent": 4, "type": "para", "extent": [40724, 40773], "text": ["You can use one of the following extensions:"]}, {"body": [{"indent": 4, "blevel": 6, "type": "bullet", "extent": [40773, 40836], "text": [{"text": [".clip"], "type": "code"}, ": save animation as plain text (ASCII) clip file."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [40836, 40898], "text": [{"text": [".bclip"], "type": "code"}, ": save animation as a bclip (binary clip) file."]}, {"indent": 4, "blevel": 6, "type": "bullet", "extent": [40898, 40974], "text": [{"text": [".bclip.sc"], "type": "code"}, ": save animation as a bclip file using Blosc compression."]}], "container": true, "type": "bullet_group"}, {"indent": 4, "type": "para", "extent": [40974, 41308], "text": ["Set ", {"text": ["sample_rate"], "type": "var"}, " to a non-zero, non-negative value to specify the\n    sample_rate to be used for the clip file.\n    For example, if the current frame rate is 24 (", {"text": "", "value": "/hom/hou/fps", "fallback_text": "hou.fps", "fullpath": "/hom/hou/fps", "scheme": "Hom", "type": "link"}, "), and\n    ", {"text": ["sample_rate"], "type": "var"}, " is set to 12, the animation will be sampled every second\n    frame since ", {"text": ["sample_rate"], "type": "var"}, " is half of the current frame rate."]}, {"indent": 4, "type": "para", "extent": [41308, 41494], "text": ["If ", {"text": ["start"], "type": "var"}, " is not ", {"text": ["None"], "type": "code"}, ", start saving the animation from the specified\n    frame (inclusive).\n    Otherwise, the animation will be saved from the global start frame (inclusive)."]}, {"indent": 4, "type": "para", "extent": [41494, 41685], "text": ["Similarly, if ", {"text": ["end"], "type": "var"}, " is not ", {"text": ["None"], "type": "code"}, ", stop saving the animation at the\n    specified frame (inclusive).\n    Otherwise, the animation will be saved until the global end frame (inclusive)."]}, {"indent": 4, "type": "para", "extent": [41685, 41811], "text": ["The global start and end frame are specified in the\n    ", {"text": ["Global Animation Options"], "fullpath": "/ref/windows/global_anim_opts", "scheme": null, "type": "link", "value": "/ref/windows/global_anim_opts"}, " window."]}, {"indent": 4, "type": "para", "extent": [41811, 42025], "text": ["If ", {"text": ["scoped_only"], "type": "var"}, " is ", {"text": ["True"], "type": "code"}, ", only the animation associated with scoped\n    parameters will be saved. If there are no scoped parameters,\n    the animation associated with auto-scoped parameters will be saved."]}, {"indent": 4, "type": "para", "extent": [42025, 42141], "text": ["If ", {"text": ["scoped_only"], "type": "var"}, " is ", {"text": ["False"], "type": "code"}, ", animation associated with any of the\n    parameters of this node will be saved."]}, {"indent": 4, "type": "para", "extent": [42141, 42460], "text": ["Raises a hou.OperationFailed exception if none of the parameters of this\n    node have animation. If ", {"text": ["scoped_only"], "type": "var"}, " is ", {"text": ["True"], "type": "code"}, ", this exception can be\n    raised if none of the scoped parameters have animation, or if none of\n    the auto-scoped parameters have animation (if the node has no scoped\n    parameters)."]}, {"indent": 4, "type": "para", "extent": [42460, 42559], "text": ["Raises a hou.OperationFailed exception if there is an error saving the\n    animation to file."]}, {"indent": 4, "type": "para", "extent": [42559, 42815], "text": ["Raises a hou.InvalidInput exception if ", {"text": ["start >= end"], "type": "code"}, ". If specifying only\n    ", {"text": ["start"], "type": "var"}, ", ensure that the specified value is less than the global\n    end frame. Likewise, if specifying only ", {"text": ["end"], "type": "var"}, ", ensure it is larger than\n    the global start frame."]}], "indent": 0, "text": [{"text": ["saveParmClip(self, file_name, start=None, end=None, sample_rate=0, scoped_only=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::saveParmClip"}, "extent": [40402, 40493], "type": "methods_item", "id": "saveParmClip"}, {"body": [{"indent": 4, "type": "para", "extent": [42914, 43098], "text": ["Load animation for the parameters in this node from the clip file\n    specified by ", {"text": ["file_name"], "type": "var"}, ".\n    See ", {"fragment": "#saveParmClip", "text": "", "value": "/hom/hou/Node#saveParmClip", "fallback_text": "hou.Node.saveParmClip", "fullpath": "/hom/hou/Node#saveParmClip", "scheme": "Hom", "type": "link"}, " for the list of supported clip file formats."]}, {"indent": 4, "type": "para", "extent": [43098, 43210], "text": ["Any tracks in the clip file that do not match the name of the parameters\n    of this node will be ignored."]}, {"indent": 4, "type": "para", "extent": [43210, 43576], "text": ["If ", {"text": ["sample_rate"], "type": "var"}, " is set to a non-zero, non-negative value, the\n    specified value will be used when loading the animation.\n    For example, if the current frame rate is 24 (", {"text": "", "value": "/hom/hou/fps", "fallback_text": "hou.fps", "fullpath": "/hom/hou/fps", "scheme": "Hom", "type": "link"}, ") and\n    ", {"text": ["sample_rate"], "type": "var"}, " is set to 12, the animation will be loaded with a keyframe\n    at every second frame since ", {"text": ["sample_rate"], "type": "var"}, " is half of the current\n    frame rate."]}, {"indent": 4, "type": "para", "extent": [43576, 43728], "text": [{"text": ["start"], "type": "var"}, " specifies the frame the loaded animation should start from.\n    By default the animation starts at the frame specified in the clip file."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [43741, 43913], "text": ["Any existing keyframes for the parameters of this node that are\n        within the range of the loaded animation will be overwritten with\n        the loaded data."]}], "indent": 4, "role": "item", "type": "warning", "extent": [43728, 43741]}], "container": true, "role": "item_group", "type": "warning_group"}, {"indent": 4, "type": "para", "extent": [43913, 44038], "text": ["This function will raise a hou.OperationFailed exception if there is an\n    error reading animation data from the file."]}], "indent": 0, "text": [{"text": ["loadParmClip(self, file_name, sample_rate=0, start=None)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::loadParmClip"}, "extent": [42815, 42877], "type": "methods_item", "id": "loadParmClip"}, {"body": [{"indent": 4, "type": "para", "extent": [44199, 44423], "text": ["Returns the clip data for the parameters of this node.\n    This method is similar to ", {"fragment": "#saveParmClip", "text": "", "value": "/hom/hou/Node#saveParmClip", "fallback_text": "hou.Node.saveParmClip", "fullpath": "/hom/hou/Node#saveParmClip", "scheme": "Hom", "type": "link"}, ", except that it returns\n    the clip data (file contents) instead of saving the animation to a clip file."]}, {"indent": 4, "type": "para", "extent": [44423, 44540], "text": [{"text": ["start"], "type": "var"}, ", ", {"text": ["end"], "type": "var"}, ", ", {"text": ["sample_rate"], "type": "var"}, ", and ", {"text": ["scoped_only"], "type": "var"}, " behave the same as\n    in ", {"fragment": "#saveParmClip", "text": "", "value": "/hom/hou/Node#saveParmClip", "fallback_text": "hou.Node.saveParmClip", "fullpath": "/hom/hou/Node#saveParmClip", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 4, "type": "para", "extent": [44540, 44646], "text": ["If ", {"text": ["binary"], "type": "var"}, " is ", {"text": ["True"], "type": "code"}, ", return binary clip data,\n    otherwise return plain text (ASCII) clip data."]}, {"indent": 4, "type": "para", "extent": [44646, 44786], "text": ["If ", {"text": ["use_blosc_compression"], "type": "var"}, " is ", {"text": ["True"], "type": "code"}, ", blosc compress the binary clip data.\n    This cannot be used for plain text (ASCII) clip data."]}, {"indent": 4, "type": "para", "extent": [44786, 44890], "text": ["Raises a hou.OperationFailed exception if none of the parameters of\n    this tuple have animation."]}, {"indent": 4, "type": "para", "extent": [44890, 45146], "text": ["Raises a hou.InvalidInput exception if ", {"text": ["start >= end"], "type": "code"}, ". If specifying only\n    ", {"text": ["start"], "type": "var"}, ", ensure that the specified value is less than the global\n    end frame. Likewise, if specifying only ", {"text": ["end"], "type": "var"}, ", ensure it is larger than\n    the global start frame."]}, {"indent": 4, "type": "para", "extent": [45146, 45247], "text": ["Raises a hou.InvalidInput exception if ", {"text": ["binary = False"], "type": "code"}, " and\n    ", {"text": ["use_blosc_compression = True"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["parmClipData(start=None, end=None, binary=True, use_blosc_compression=True, sample_rate=0, scoped_only=False)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::parmClipData"}, "extent": [44038, 44162], "type": "methods_item", "id": "parmClipData"}, {"body": [{"indent": 4, "type": "para", "extent": [45374, 45599], "text": ["Load animation for the parameters in this node from the given clip ", {"text": ["data"], "type": "var"}, ".\n    This method is similar to ", {"fragment": "#loadParmClip", "text": "", "value": "/hom/hou/Node#loadParmClip", "fallback_text": "hou.Node.loadParmClip", "fullpath": "/hom/hou/Node#loadParmClip", "scheme": "Hom", "type": "link"}, ", except that it loads\n    animation from the given clip data instead of a clip file."]}, {"indent": 4, "type": "para", "extent": [45599, 45685], "text": [{"text": ["sample_rate"], "type": "var"}, " and ", {"text": ["start"], "type": "var"}, " behave the same as in ", {"fragment": "#loadParmClip", "text": "", "value": "/hom/hou/Node#loadParmClip", "fallback_text": "hou.Node.loadParmClip", "fullpath": "/hom/hou/Node#loadParmClip", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 4, "type": "para", "extent": [45685, 45758], "text": [{"text": ["binary"], "type": "var"}, " and ", {"text": ["blosc_compressed"], "type": "var"}, " specify the type of input data."]}, {"indent": 4, "type": "para", "extent": [45758, 45874], "text": ["If ", {"text": ["binary"], "type": "var"}, " is ", {"text": ["True"], "type": "code"}, ", the given data is binary clip data,\n    otherwise it is plain text (ASCII) clip data."]}, {"indent": 4, "type": "para", "extent": [45874, 46020], "text": ["If ", {"text": ["blosc_compressed"], "type": "var"}, " is ", {"text": ["True"], "type": "code"}, ", the given data is blosc compressed\n    binary data. This cannot be used for plain text (ASCII) clip data."]}, {"indent": 4, "type": "para", "extent": [46020, 46094], "text": ["Raises a hou.OperationFailed exception if the given data is invalid."]}, {"indent": 4, "type": "para", "extent": [46094, 46192], "text": ["Raises a hou.InvalidInput exception if ", {"text": ["binary = False"], "type": "code"}, " and\n    ", {"text": ["blosc_compressed = True"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["setParmClipData(data, binary=True, blosc_compressed=True, sample_rate=0, start=1)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setParmClipData"}, "extent": [45247, 45334], "type": "methods_item", "id": "setParmClipData"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Parameters"], "extent": [23578, 23595], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [46391, 46751], "text": ["Return a tuple of the nodes connected to this node\u2019s inputs. If an input\n    is connected to a ", {"text": "", "value": "/hom/hou/SubnetIndirectInput", "fallback_text": "hou.SubnetIndirectInput", "fullpath": "/hom/hou/SubnetIndirectInput", "scheme": "Hom", "type": "link"}, ", the node connected to the\n    corresponding input on the parent subnet is returned. In other words the\n    presence of the indirect input is hidden. This means the resulting nodes\n    may not all be siblings of the calling node."]}, {"indent": 4, "type": "para", "extent": [46751, 46958], "text": ["If a particular input is not connected (or is connected to an indirect\n    input and the corresponding subnet parent input is not connected), a\n    ", {"text": ["None"], "type": "code"}, " value is placed in the tuple at that location."]}], "indent": 0, "text": [{"text": ["inputs(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::inputs", "replaces": "/commands/opgetinput /expressions/opinputs /expressions/opninputs /expressions/icl /expressions/icn /expressions/icr /expressions/ics"}, "extent": [46217, 46265], "type": "methods_item", "id": "inputs"}, {"body": [{"indent": 4, "type": "para", "extent": [47096, 47163], "text": ["Return a tuple of the nodes connected to this node\u2019s outputs."]}, {"indent": 4, "type": "para", "extent": [47163, 47273], "text": ["This method is a shortcut for ", {"text": ["[connection.inputNode() for connection in\n    self.outputConnections()]"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["outputs(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::outputs", "replaces": "/expressions/opoutput /commands/opdepend /expressions/opnoutputs"}, "extent": [46958, 47006], "type": "methods_item", "id": "outputs"}, {"body": [{"indent": 4, "type": "para", "extent": [47411, 47682], "text": ["Returns a tuple of ", {"text": "", "value": "/hom/hou/NodeConnection", "fallback_text": "hou.NodeConnection", "fullpath": "/hom/hou/NodeConnection", "scheme": "Hom", "type": "link"}, " objects for the connections\n    coming into the top of this node. The tuple will have a length equal to\n    the number of connections coming into the node.  Returns an empty tuple\n    if nothing is connected to this node."]}, {"indent": 4, "type": "para", "extent": [47682, 47902], "text": ["To get a list of the connected nodes themselves, use ", {"fragment": "#inputs", "text": "", "value": "/hom/hou/Node#inputs", "fallback_text": "hou.Node.inputs", "fullpath": "/hom/hou/Node#inputs", "scheme": "Hom", "type": "link"}, ".\n    To get a list of all possible connection sites (whether or not anything\n    is connected to them), use ", {"fragment": "#inputConnectors", "text": "", "value": "/hom/hou/Node#inputConnectors", "fallback_text": "hou.Node.inputConnectors", "fullpath": "/hom/hou/Node#inputConnectors", "scheme": "Hom", "type": "link"}, "."]}, {"lang": "pycon", "indent": 4, "type": "pre", "extent": [47902, 48270], "text": ["\n    >>> cookie = hou.node(\"/obj\").createNode(\"geo\").createNode(\"cookie\")\n    >>> cookie.setInput(1, cookie.parent().createNode(\"box\"))\n    >>> cookie.inputConnections()\n    (<hou.NodeConnection from grid1 output 0 to cookie input 1>,)\n    >>> cookie.inputConnectors()\n    ((), (<hou.NodeConnection from grid1 output 0 to cookie input 1>,))\n    "]}, {"indent": 4, "type": "para", "extent": [48270, 48317], "text": ["See also ", {"fragment": "#inputConnectors", "text": "", "value": "/hom/hou/Node#inputConnectors", "fallback_text": "hou.Node.inputConnectors", "fullpath": "/hom/hou/Node#inputConnectors", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["inputConnections(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/NodeConnection", "fallback_text": "hou.NodeConnection", "fullpath": "/hom/hou/NodeConnection", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::inputConnections", "replaces": "/commands/opgetinput"}, "extent": [47273, 47340], "type": "methods_item", "id": "inputConnections"}, {"body": [{"indent": 4, "type": "para", "extent": [48428, 48614], "text": ["Return a tuple of NodeConnection objects for the connections going out of\n    the bottom of this node.  If nothing is wired into the output of this\n    node, return an empty tuple."]}, {"indent": 4, "type": "para", "extent": [48614, 48700], "text": ["To get a list of the connected nodes themselves, use\n    ", {"fragment": "#outputs", "text": "", "value": "/hom/hou/Node#outputs", "fallback_text": "hou.Node.outputs", "fullpath": "/hom/hou/Node#outputs", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 4, "type": "para", "extent": [48700, 48940], "text": ["Note that this method is a shortcut for: ", {"text": ["reduce(lambda a, b: a+b,\n    self.outputConnectors(), ())"], "type": "code"}, ".  Since most nodes have only one output\n    connector, though, this method is usually equivalent to\n    ", {"text": ["self.outputConnectors()[0]"], "type": "code"}, "."]}, {"lang": "pycon", "indent": 4, "type": "pre", "extent": [48940, 49319], "text": ["\n    >>> box = hou.node(\"/obj\").createNode(\"geo\").createNode(\"box\")\n    >>> box.parent().createNode(\"xform\").setFirstInput(box)\n    >>> box.parent().createNode(\"subdivide\").setFirstInput(box)\n    >>> box.outputConnections()\n    (<hou.NodeConnection from box1 output 0 to xform1 output 0>, <hou.NodeConnection from box1 output 0 to subdivide1 input 0>)\n    "]}, {"indent": 4, "type": "para", "extent": [49319, 49367], "text": ["See also ", {"fragment": "#outputConnectors", "text": "", "value": "/hom/hou/node#outputConnectors", "fallback_text": "hou.node.outputConnectors", "fullpath": "/hom/hou/node#outputConnectors", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["outputConnections(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/NodeConnection", "fallback_text": "hou.NodeConnection", "fullpath": "/hom/hou/NodeConnection", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::outputConnections "}, "extent": [48317, 48385], "type": "methods_item", "id": "outputConnections"}, {"body": [{"indent": 4, "type": "para", "extent": [49541, 49860], "text": ["Return a tuple of tuples of ", {"text": "", "value": "/hom/hou/NodeConnection", "fallback_text": "hou.NodeConnection", "fullpath": "/hom/hou/NodeConnection", "scheme": "Hom", "type": "link"}, " objects.  The length\n    of the result tuple is equal to the maximum number of inputs that can be\n    connected to this node.  Each subtuple contains exactly one node\n    connection if something is wired into the connector; otherwise it is the\n    empty tuple."]}, {"indent": 4, "type": "para", "extent": [49860, 49936], "text": ["See also ", {"text": "", "value": "/hom/hou/NodeConnection", "fallback_text": "hou.NodeConnection", "fullpath": "/hom/hou/NodeConnection", "scheme": "Hom", "type": "link"}, " and ", {"fragment": "#inputConnections", "text": "", "value": "/hom/hou/Node#inputConnections", "fallback_text": "hou.Node.inputConnections", "fullpath": "/hom/hou/Node#inputConnections", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["inputConnectors(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/NodeConnection", "fallback_text": "hou.NodeConnection", "fullpath": "/hom/hou/NodeConnection", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::inputConnectors", "replaces": "/commands/opdepend /commands/opgetinput /expressions/opinput"}, "extent": [49367, 49444], "type": "methods_item", "id": "inputConnectors"}, {"body": [{"indent": 4, "type": "para", "extent": [50150, 50446], "text": ["Return a a tuple of tuples of ", {"text": "", "value": "/hom/hou/NodeConnection", "fallback_text": "hou.NodeConnection", "fullpath": "/hom/hou/NodeConnection", "scheme": "Hom", "type": "link"}, " objects.  The length\n    of the result tuple is equal to the number of output connectors on this\n    node.  Each subtuple contains all the connections going out of that\n    connector, and is empty if nothing is wired to that connector."]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [50446, 50993], "text": ["\n    >>> split = hou.node(\"/obj\").createNode(\"dopnet\").createNode(\"split\")\n    >>> split.parent().createNode(\"rbdsolver\").setFirstInput(split)\n    >>> split.parent().createNode(\"gravity\").setFirstInput(split, 1)\n    >>> split.parent().createNode(\"merge\").setFirstInput(split, 1)\n    >>> split.outputConnectors()\n    ((<hou.NodeConnection from split1 output 0 to rbdsolver1 input 0>,), (<hou.NodeConnection from split1 output 1 to gravity2 input 0>, <hou.NodeConnection from split1 output 1 to merge1 input 0>), (), ())\n    "]}, {"indent": 4, "type": "para", "extent": [50993, 51071], "text": ["See also ", {"text": "", "value": "/hom/hou/NodeConnection", "fallback_text": "hou.NodeConnection", "fullpath": "/hom/hou/NodeConnection", "scheme": "Hom", "type": "link"}, " and ", {"fragment": "#outputConnections", "text": "", "value": "/hom/hou/Node#outputConnections", "fallback_text": "hou.Node.outputConnections", "fullpath": "/hom/hou/Node#outputConnections", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["outputConnectors(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/NodeConnection", "fallback_text": "hou.NodeConnection", "fullpath": "/hom/hou/NodeConnection", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::outputConnectors", "replaces": "/expressions/opgetinput /expressions/opninputs /expressions/icl /expressions/icn /expressions/icr /expressions/ics /commands/opdepend"}, "extent": [49936, 50014], "type": "methods_item", "id": "outputConnectors"}, {"body": [{"indent": 4, "type": "para", "extent": [51208, 51269], "text": ["Return the hou.SubnetIndirectInput objects of a subnet."]}, {"indent": 4, "type": "para", "extent": [51269, 51341], "text": ["Raises ", {"text": "", "value": "/hom/hou/InvalidNodeType", "fallback_text": "hou.InvalidNodeType", "fullpath": "/hom/hou/InvalidNodeType", "scheme": "Hom", "type": "link"}, " if this node is not a subnetwork."]}], "indent": 0, "text": [{"text": ["indirectInputs(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/SubnetIndirectInput", "fallback_text": "hou.SubnetIndirectInput", "fullpath": "/hom/hou/SubnetIndirectInput", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::indirectInputs", "replaces": "/commands/opdepend"}, "extent": [51071, 51141], "type": "methods_item", "id": "indirectInputs"}, {"body": [{"indent": 4, "type": "para", "extent": [51433, 51505], "text": ["Return the hou.Node objects that are produce the subnet\u2019s outputs."]}, {"indent": 4, "type": "para", "extent": [51505, 51577], "text": ["Raises ", {"text": "", "value": "/hom/hou/InvalidNodeType", "fallback_text": "hou.InvalidNodeType", "fullpath": "/hom/hou/InvalidNodeType", "scheme": "Hom", "type": "link"}, " if this node is not a subnetwork."]}], "indent": 0, "text": [{"text": ["subnetOutputs(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::subnetOutputs"}, "extent": [51341, 51395], "type": "methods_item", "id": "subnetOutputs"}, {"body": [{"indent": 4, "type": "para", "extent": [51718, 52011], "text": ["Return a tuple of all input ancestors of this node.  If include_ref_inputs\n    is False, then reference inputs are not traversed.  If follow_subnets is\n    True, then instead of treating subnetwork nodes as a single node, we also\n    traverse its children starting with its display node."]}, {"indent": 4, "type": "para", "extent": [52011, 52048], "text": ["See also the ", {"text": ["inputs()"], "type": "code"}, " method."]}], "indent": 0, "text": [{"text": ["inputAncestors(self, include_ref_inputs=True, follow_subnets=False)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::inputAncestors"}, "extent": [51577, 51679], "type": "methods_item", "id": "inputAncestors"}, {"body": [{"indent": 4, "type": "para", "extent": [52117, 52180], "text": ["Obtains an index of a node input that has the given name."]}, {"indent": 4, "type": "para", "extent": [52180, 52384], "text": ["For the node categories that use input names, it returns the index\n    of the input with the given name. For VOP nodes, the name may also be\n    a node parameter name that has a corresponding input."]}], "indent": 0, "text": [{"text": ["inputIndex(self, input_name)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::inputIndex"}, "extent": [52048, 52082], "type": "methods_item", "id": "inputIndex"}, {"body": [{"indent": 4, "type": "para", "extent": [52456, 52520], "text": ["Obtains an index of a node output that has the given name."]}, {"indent": 4, "type": "para", "extent": [52520, 52631], "text": ["For the node categories that use input names, it returns the index\n    of the output with the given name."]}], "indent": 0, "text": [{"text": ["outputIndex(self, output_name)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::outputIndex"}, "extent": [52384, 52420], "type": "methods_item", "id": "outputIndex"}, {"body": [{"indent": 4, "type": "para", "extent": [52775, 52974], "text": ["If ", {"text": ["item_to_become_input"], "type": "code"}, " is not None, connect the output connector of\n    another node to an input connector of this node.  Otherwise, disconnect\n    anything connected to the input connector."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [52991, 53042], "text": ["The index of this node\u2019s input connector."]}], "indent": 4, "type": "dt", "extent": [52974, 52991], "text": ["input_index"]}, {"body": [{"indent": 8, "type": "para", "extent": [53068, 53284], "text": ["If ", {"text": ["None"], "type": "code"}, " this method disconnects everything from the input connector.\n        If a ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}, " or a ", {"text": "", "value": "/hom/hou/SubnetIndirectInput", "fallback_text": "hou.SubnetIndirectInput", "fullpath": "/hom/hou/SubnetIndirectInput", "scheme": "Hom", "type": "link"}, ", this method\n        connects its output to this node\u2019s input connector."]}], "indent": 4, "type": "dt", "extent": [53042, 53068], "text": ["item_to_become_input"]}, {"body": [{"indent": 8, "type": "para", "extent": [53302, 53359], "text": ["The index of the other node\u2019s output connector."]}], "indent": 4, "type": "dt", "extent": [53284, 53302], "text": ["output_index"]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [53359, 53609], "text": ["Raises ", {"text": "", "value": "/hom/hou/InvalidInput", "fallback_text": "hou.InvalidInput", "fullpath": "/hom/hou/InvalidInput", "scheme": "Hom", "type": "link"}, " if ", {"text": ["output_index"], "type": "code"}, " is invalid.  Raises\n    ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if ", {"text": ["item_to_become_input"], "type": "code"}, " is not in the same\n    network as this node.  Raises ", {"text": "", "value": "/hom/hou/PermissionError", "fallback_text": "hou.PermissionError", "fullpath": "/hom/hou/PermissionError", "scheme": "Hom", "type": "link"}, " if the node is\n    inside a locked asset."]}], "indent": 0, "text": [{"text": ["setInput(self, input_index, item_to_become_input, output_index=0)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setInput", "replaces": "/commands/opwire /commands/opunwire"}, "extent": [52631, 52702], "type": "methods_item", "id": "setInput"}, {"body": [{"indent": 4, "type": "para", "extent": [53728, 53895], "text": ["Connects an output on this node (specified by either an output name or\n    an output index) to the input on the item_to_become_input specified by\n    input_name."]}], "indent": 0, "text": [{"text": ["setNamedInput(self, input_name, item_to_become_input, output_name_or_index)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setNamedInput"}, "extent": [53609, 53690], "type": "methods_item", "id": "setNamedInput"}, {"body": [{"indent": 4, "type": "para", "extent": [54022, 54139], "text": ["A shortcut for ", {"text": ["self.setInput(0, item_to_become_input)"], "type": "code"}, ".  See\n    ", {"fragment": "#setInput", "text": "", "value": "/hom/hou/Node#setInput", "fallback_text": "hou.Node.setInput", "fullpath": "/hom/hou/Node#setInput", "scheme": "Hom", "type": "link"}, " for more information."]}], "indent": 0, "text": [{"text": ["setFirstInput(self, item_to_become_input, output_index=0)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setFirstInput", "replaces": "/commands/opwire"}, "extent": [53895, 53958], "type": "methods_item", "id": "setFirstInput"}, {"body": [{"indent": 4, "type": "para", "extent": [54286, 54690], "text": ["Connect the output connector from another node into the first unconnected\n    input connector or a multi-input connector of this node. If a node has\n    some ordered inputs followed by a multi-input connector, the\n    ", {"text": ["unordered_only"], "type": "code"}, " parameter can be used to force the input to connect to\n    the unordered multi-input connection instead of any of the ordered input\n    which may not be connected."]}, {"indent": 4, "type": "para", "extent": [54690, 54732], "text": ["This method is roughly equivalent to:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [54732, 54997], "text": ["\n    for input_index, conectors in enumerate(self.inputConnectors()):\n        if len(connectors) == 0:\n            self.setInput(input_index, item_to_become_input, output_index)\n        raise hou.InvalidInput(\"All inputs are connected\")\n    "]}, {"indent": 4, "type": "para", "extent": [54997, 55117], "text": ["Raises ", {"text": "", "value": "/hom/hou/InvalidInput", "fallback_text": "hou.InvalidInput", "fullpath": "/hom/hou/InvalidInput", "scheme": "Hom", "type": "link"}, " if all inputs are connected.  See\n    ", {"fragment": "#setInput", "text": "", "value": "/hom/hou/Node#setInput", "fallback_text": "hou.Node.setInput", "fullpath": "/hom/hou/Node#setInput", "scheme": "Hom", "type": "link"}, " for more information."]}], "indent": 0, "text": [{"text": ["setNextInput(self, item_to_become_input, output_index=0, unordered_only=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setNextInput", "replaces": "/commands/opwire"}, "extent": [54139, 54223], "type": "methods_item", "id": "setNextInput"}, {"body": [{"indent": 4, "type": "para", "extent": [55227, 55491], "text": ["Insert an input wire.  In other words, for each input connector after\n    input_index, shift the contents of that input connector to the next\n    one, and then call ", {"fragment": "#setInput", "text": "", "value": "/hom/hou/Node#setInput", "fallback_text": "hou.Node.setInput", "fullpath": "/hom/hou/Node#setInput", "scheme": "Hom", "type": "link"}, ".  See ", {"fragment": "#setInput", "text": "", "value": "/hom/hou/Node#setInput", "fallback_text": "hou.Node.setInput", "fullpath": "/hom/hou/Node#setInput", "scheme": "Hom", "type": "link"}, "\n    for the meanings of the parameters."]}], "indent": 0, "text": [{"text": ["insertInput(self, input_index, item_to_become_input, output_index=0)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::insertInput"}, "extent": [55117, 55191], "type": "methods_item", "id": "insertInput"}, {"body": [{"indent": 4, "type": "para", "extent": [55569, 56187], "text": ["Some nodes can have a small number of dedicated inputs with specific\n    meanings, followed by an arbitrary number of additional inputs, where\n    gaps are not permitted between the inputs (these are referred to as\n    unordere inputs). This is common in DOP nodes such as the\n    ", {"text": ["Multiple Solver DOP"], "fullpath": "/nodes/dop/multisolver", "scheme": "Node", "type": "link", "value": "/nodes/dop/multisolver"}, ". This function returns the\n    number of dedicated (or ordered) inputs that occur before the unordered\n    inputs begin. This function will only return non-zero values if the\n    ", {"fragment": "#hasUnorderedInputs", "text": "", "value": "/hom/hou/NodeType#hasUnorderedInputs", "fallback_text": "hou.NodeType.hasUnorderedInputs", "fullpath": "/hom/hou/NodeType#hasUnorderedInputs", "scheme": "Hom", "type": "link"}, " function for this node\u2019s\n    ", {"fragment": "#type", "text": "", "value": "/hom/hou/Node#type", "fallback_text": "hou.Node.type", "fullpath": "/hom/hou/Node#type", "scheme": "Hom", "type": "link"}, " object returns ", {"text": ["True"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["numOrderedInputs(self)"], "type": "code"}, "  \u2192 ", {"text": ["int"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::numOrderedInputs"}, "extent": [55491, 55528], "type": "methods_item", "id": "numOrderedInputs"}, {"body": [{"indent": 4, "type": "para", "extent": [56370, 56464], "text": ["Create a new node and connect it to one of this node\u2019s inputs.  Return the\n    new node."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [56481, 56531], "text": ["The index of this node\u2019s input connector."]}], "indent": 4, "type": "dt", "extent": [56464, 56481], "text": ["input_index"]}, {"body": [{"indent": 8, "type": "para", "extent": [56551, 56682], "text": ["The name of the type of node to create.  See the\n        ", {"fragment": "#createNode", "text": ["createNode"], "value": "/hom/hou/Node#createNode", "fullpath": "/hom/hou/Node#createNode", "scheme": "Hom", "type": "link"}, " method for more information."]}], "indent": 4, "type": "dt", "extent": [56531, 56551], "text": ["node_type_name"]}, {"body": [{"indent": 8, "type": "para", "extent": [56697, 56787], "text": ["See the ", {"fragment": "#createNode", "text": ["createNode"], "value": "/hom/hou/Node#createNode", "fullpath": "/hom/hou/Node#createNode", "scheme": "Hom", "type": "link"}, " method for more\n        information."]}], "indent": 4, "type": "dt", "extent": [56682, 56697], "text": ["node_name"]}, {"body": [{"indent": 8, "type": "para", "extent": [56809, 56899], "text": ["See the ", {"fragment": "#createNode", "text": ["createNode"], "value": "/hom/hou/Node#createNode", "fullpath": "/hom/hou/Node#createNode", "scheme": "Hom", "type": "link"}, " method for more\n        information."]}], "indent": 4, "type": "dt", "extent": [56787, 56809], "text": ["run_init_scripts"]}, {"body": [{"indent": 8, "type": "para", "extent": [56918, 57008], "text": ["See the ", {"fragment": "#createNode", "text": ["createNode"], "value": "/hom/hou/Node#createNode", "fullpath": "/hom/hou/Node#createNode", "scheme": "Hom", "type": "link"}, " method for more\n        information."]}], "indent": 4, "type": "dt", "extent": [56899, 56918], "text": ["load_contents"]}, {"body": [{"indent": 8, "type": "para", "extent": [57029, 57120], "text": ["See the ", {"fragment": "#createNode", "text": ["createNode"], "value": "/hom/hou/Node#createNode", "fullpath": "/hom/hou/Node#createNode", "scheme": "Hom", "type": "link"}, " method for more\n        information."]}], "indent": 4, "type": "dt", "extent": [57008, 57029], "text": ["exact_type_name"]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [57120, 57195], "text": ["See also the ", {"fragment": "#createOutputNode", "text": ["createOutputNode"], "value": "/hom/hou/Node#createOutputNode", "fullpath": "/hom/hou/Node#createOutputNode", "scheme": "Hom", "type": "link"}, " method."]}], "indent": 0, "text": [{"text": ["createInputNode(self, input_index, node_type_name, node_name=None, run_init_scripts=True, load_contents=True, bool exact_type_name=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::createInputNode"}, "extent": [56187, 56330], "type": "methods_item", "id": "createInputNode"}, {"body": [{"indent": 4, "type": "para", "extent": [57367, 57474], "text": ["Create a new node and connect its first input to this node\u2019s (first) output.\n    Return the new node."]}, {"indent": 4, "type": "para", "extent": [57474, 57575], "text": ["See the ", {"fragment": "#createNode", "text": ["createNode"], "value": "/hom/hou/Node#createNode", "fullpath": "/hom/hou/Node#createNode", "scheme": "Hom", "type": "link"}, " method for more information\n    on the parameters."]}, {"indent": 4, "type": "para", "extent": [57575, 57648], "text": ["See also the ", {"fragment": "#createInputNode", "text": ["createInputNode"], "value": "/hom/hou/Node#createInputNode", "fullpath": "/hom/hou/Node#createInputNode", "scheme": "Hom", "type": "link"}, " method."]}], "indent": 0, "text": [{"text": ["createOutputNode(self, node_type_name, node_name=None, run_init_scripts=True, load_contents=True, bool exact_type_name=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::createOutputNode"}, "extent": [57195, 57326], "type": "methods_item", "id": "createOutputNode"}, {"body": [{"indent": 4, "type": "para", "extent": [57723, 57844], "text": ["Returns a tuple of all input names for this node. Names for input\n    connectors that are hidden are also included."]}], "indent": 0, "text": [{"text": ["inputNames(self)"], "type": "code"}, "  \u2192 tuple of ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::inputNames"}, "extent": [57648, 57688], "type": "methods_item", "id": "inputNames"}, {"body": [{"indent": 4, "type": "para", "extent": [57921, 58044], "text": ["Returns a tuple of all input labels for this node. Labels for input\n    connectors that are hidden are also included."]}], "indent": 0, "text": [{"text": ["inputLabels(self)"], "type": "code"}, "  \u2192 tuple of ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::inputLabels"}, "extent": [57844, 57885], "type": "methods_item", "id": "inputLabels"}, {"body": [{"indent": 4, "type": "para", "extent": [58121, 58177], "text": ["Returns a tuple of all output names for this node."]}], "indent": 0, "text": [{"text": ["outputNames(self)"], "type": "code"}, "  \u2192 tuple of ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::outputNames"}, "extent": [58044, 58085], "type": "methods_item", "id": "outputNames"}, {"body": [{"indent": 4, "type": "para", "extent": [58256, 58313], "text": ["Returns a tuple of all output labels for this node."]}], "indent": 0, "text": [{"text": ["outputLabels(self)"], "type": "code"}, "  \u2192 tuple of ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::outputLabels"}, "extent": [58177, 58219], "type": "methods_item", "id": "outputLabels"}, {"body": [{"indent": 4, "type": "para", "extent": [58419, 58564], "text": ["Return the string associated with the specified input index and key.\n    The purpose of this string may vary from one node type to another."]}, {"indent": 4, "type": "para", "extent": [58564, 58780], "text": ["This method will raise an exception if the node type does not use this\n    feature. Use ", {"fragment": "#hasEditableInputData", "text": ["hasEditableInputData"], "value": "/hom/hou/NodeType#hasEditableInputData", "fullpath": "/hom/hou/NodeType#hasEditableInputData", "scheme": "Hom", "type": "link"}, "\n    to determine if a node type supports editable input data."]}], "indent": 0, "text": [{"text": ["editableInputString(self, input_index, key)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_NodeType::editableInputString"}, "extent": [58313, 58371], "type": "methods_item", "id": "editableInputString"}, {"body": [{"indent": 4, "type": "para", "extent": [58890, 59037], "text": ["Sets a string value associated with the specified input index and key.\n    The purpose of this string may vary from one node type to another."]}, {"indent": 4, "type": "para", "extent": [59037, 59253], "text": ["This method will raise an exception if the node type does not use this\n    feature. Use ", {"fragment": "#hasEditableInputData", "text": ["hasEditableInputData"], "value": "/hom/hou/NodeType#hasEditableInputData", "fullpath": "/hom/hou/NodeType#hasEditableInputData", "scheme": "Hom", "type": "link"}, "\n    to determine if a node type supports editable input data."]}], "indent": 0, "text": [{"text": ["setEditableInputString(self, input_index, key, value)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_NodeType::setEditableInputString"}, "extent": [58780, 58839], "type": "methods_item", "id": "setEditableInputString"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Inputs and outputs"], "extent": [46192, 46217], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [59384, 59707], "text": ["Return a tuple of nodes that are referenced by this node, either through\n    parameter expressions, referring to the node by name, or using expressions\n    which rely on the data generated by another node. These reflect all the\n    other ways (besides connecting to an input) in which one node may affect\n    another."]}, {"indent": 4, "type": "para", "extent": [59707, 59846], "text": ["Note that the result can differ depending last cook of the nodes. It\u2019s \n    recommended that you first call cook() on the node first."]}], "indent": 0, "text": [{"text": ["references(self, include_children = True)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::references"}, "extent": [59272, 59349], "type": "methods_item", "id": "references"}, {"body": [{"indent": 4, "type": "para", "extent": [59957, 60273], "text": ["Return a tuple of nodes that are reference this node, either through\n    parameter expressions, referring to the node by name, or using expressions\n    which rely on the data generated by this node. These reflect all the\n    other ways (besides connecting to an input) in which one node may affect\n    another."]}, {"indent": 4, "type": "para", "extent": [60273, 60344], "text": ["Note that the result can differ depending last cook of the nodes."]}], "indent": 0, "text": [{"text": ["dependents(self, include_children = True)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::dependents"}, "extent": [59846, 59922], "type": "methods_item", "id": "dependents"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Dependencies"], "extent": [59253, 59272], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [60443, 60510], "text": ["Return True if the node is a sub-network and False otherwise."]}], "indent": 0, "text": [{"text": ["isSubNetwork(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::isEditableInsideLockedHDA"}, "extent": [60358, 60393], "type": "methods_item", "id": "isSubNetwork"}, {"body": [{"indent": 4, "type": "para", "extent": [60680, 60903], "text": ["Given a sequence of children nodes of this node, collapse them into a\n    subnetwork.  In other words, create a subnet inside this node\u2019s network\n    and move the specified children of this network inside that subnet."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [60920, 60993], "text": ["The children nodes of this node that will go in the new subnet."]}], "indent": 4, "type": "dt", "extent": [60903, 60920], "text": ["child_nodes"]}, {"body": [{"indent": 8, "type": "para", "extent": [61010, 61121], "text": ["The name for the new subnet node, or None if you want Houdini to\n        automatically choose a name."]}], "indent": 4, "type": "dt", "extent": [60993, 61010], "text": ["subnet_name"]}, {"body": [{"indent": 8, "type": "para", "extent": [61138, 61290], "text": ["The type for the new subnet node, or None if you want Houdini to\n        automatically choose a primary subnetwork type, which is recommended."]}], "indent": 4, "type": "dt", "extent": [61121, 61138], "text": ["subnet_type"]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [61290, 61437], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if a node inside ", {"text": ["child_nodes"], "type": "code"}, " is not\n    a child of this network, or if ", {"text": ["child_nodes"], "type": "code"}, " is an empty sequence."]}, {"indent": 4, "type": "para", "extent": [61437, 61552], "text": ["This example function takes a single node and replaces it with a subnet,\n    moving the node into the subnet.."]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [61552, 61711], "text": ["\n    def collapseSingleNodeIntoSubnet(node, subnet_name=None):\n        node.parent().collapseIntoSubnet((node,), subnet_name=None)\n    "]}], "indent": 0, "text": [{"text": ["collapseIntoSubnet(self, child_nodes, subnet_name=None, subnet_type=None)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::collapseIntoSubnet", "replaces": "/commands/opcollapse"}, "extent": [60510, 60607], "type": "methods_item", "id": "collapseIntoSubnet"}, {"body": [{"indent": 4, "type": "para", "extent": [61853, 62067], "text": ["Move the children of this subnet node to become siblings of this node, and\n    then delete this node.  The method is the opposite of\n    ", {"text": ["collapseIntoSubnet()"], "type": "code"}, ". Returns a tuple containing all extracted items."]}, {"indent": 4, "type": "para", "extent": [62067, 62140], "text": ["Raises ", {"text": "", "value": "/hom/hou/InvalidNodeType", "fallback_text": "hou.InvalidNodeType", "fullpath": "/hom/hou/InvalidNodeType", "scheme": "Hom", "type": "link"}, " if this node is not a subnetwork."]}], "indent": 0, "text": [{"text": ["extractAndDelete(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/NetworkMovableItem", "fallback_text": "hou.NetworkMovableItem", "fullpath": "/hom/hou/NetworkMovableItem", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::extractAndDelete", "replaces": "/commands/opextract"}, "extent": [61711, 61783], "type": "methods_item", "id": "extractAndDelete"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Subnets"], "extent": [60344, 60358], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [62241, 62310], "text": ["Return ", {"text": ["True"], "type": "code"}, " if ", {"fragment": "#createDigitalAsset", "text": "", "value": "/hom/hou/Node#createDigitalAsset", "fallback_text": "hou.Node.createDigitalAsset", "fullpath": "/hom/hou/Node#createDigitalAsset", "scheme": "Hom", "type": "link"}, " can succeed."]}], "indent": 0, "text": [{"text": ["canCreateDigitalAsset(self)"], "type": "code"}, "  \u2192 bool"], "role": "item", "attrs": {"cppname": "HOM_Node::canCreateDigitalAsset"}, "extent": [62153, 62195], "type": "methods_item", "id": "canCreateDigitalAsset"}, {"body": [{"indent": 4, "type": "para", "extent": [62638, 62741], "text": ["Create a digital asset from this node.  You would typically call this\n    method on subnet nodes."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [62751, 62826], "text": ["The name of the node type that the new digital asset will define."]}], "indent": 4, "type": "dt", "extent": [62741, 62751], "text": ["name"]}, {"body": [{"indent": 8, "type": "para", "extent": [62845, 62994], "text": ["The name of the hda file where Houdini will save the digital asset.\n        If ", {"text": ["None"], "type": "code"}, " Houdini will use ", {"text": ["$HOME/houdiniX.Y/hda/OPcustom.hda"], "type": "code"}, "."]}], "indent": 4, "type": "dt", "extent": [62826, 62845], "text": ["hda_file_name"]}, {"body": [{"indent": 8, "type": "para", "extent": [63011, 63128], "text": ["The name that will appear in the tab menu.  If None, Houdini will use\n        the name for the description."]}], "indent": 4, "type": "dt", "extent": [62994, 63011], "text": ["description"]}, {"body": [{"indent": 8, "type": "para", "extent": [63148, 63325], "text": ["The minimum number of inputs that need to be wired into instances of\n        the digital asset.  See ", {"fragment": "#minNumInputs", "text": "", "value": "/hom/hou/HDADefinition#minNumInputs", "fallback_text": "hou.HDADefinition.minNumInputs", "fullpath": "/hom/hou/HDADefinition#minNumInputs", "scheme": "Hom", "type": "link"}, " for more\n        information."]}], "indent": 4, "type": "dt", "extent": [63128, 63148], "text": ["min_num_inputs"]}, {"body": [{"indent": 8, "type": "para", "extent": [63345, 63532], "text": ["The number of input connectors available on instances of the digital\n        asset for input connections.  See ", {"fragment": "#minNumInputs", "text": "", "value": "/hom/hou/HDADefinition#minNumInputs", "fallback_text": "hou.HDADefinition.minNumInputs", "fullpath": "/hom/hou/HDADefinition#minNumInputs", "scheme": "Hom", "type": "link"}, "\n        for more information."]}], "indent": 4, "type": "dt", "extent": [63325, 63345], "text": ["max_num_inputs"]}, {"body": [{"indent": 8, "type": "para", "extent": [63555, 63731], "text": ["Whether or not the contents of this digital asset are compressed inside\n        the hda file.  See ", {"fragment": "#compressContents", "text": "", "value": "/hom/hou/HDAOptions#compressContents", "fallback_text": "hou.HDAOptions.compressContents", "fullpath": "/hom/hou/HDAOptions#compressContents", "scheme": "Hom", "type": "link"}, " for more\n        information."]}], "indent": 4, "type": "dt", "extent": [63532, 63555], "text": ["compress_contents"]}, {"body": [{"indent": 8, "type": "para", "extent": [63744, 63851], "text": ["A user-defined comment string.  See ", {"fragment": "#comment", "text": "", "value": "/hom/hou/HDADefinition#comment", "fallback_text": "hou.HDADefinition.comment", "fullpath": "/hom/hou/HDADefinition#comment", "scheme": "Hom", "type": "link"}, "\n        for more information."]}], "indent": 4, "type": "dt", "extent": [63731, 63744], "text": ["comment"]}, {"body": [{"indent": 8, "type": "para", "extent": [63864, 63971], "text": ["A user-defined version string.  See ", {"fragment": "#version", "text": "", "value": "/hom/hou/HDADefinition#version", "fallback_text": "hou.HDADefinition.version", "fullpath": "/hom/hou/HDADefinition#version", "scheme": "Hom", "type": "link"}, "\n        for more information."]}], "indent": 4, "type": "dt", "extent": [63851, 63864], "text": ["version"]}, {"body": [{"indent": 8, "type": "para", "extent": [63993, 64351], "text": ["Whether or not the digital asset\u2019s definition will be saved with the\n        hip file instead of an hda file.  When this parameter is True, Houdini\n        ignores the ", {"text": ["hda_file_name"], "type": "code"}, " parameter.  Setting this parameter to True\n        is equivalent to setting this parameter to False and setting the\n        ", {"text": ["hda_file_name"], "type": "code"}, " parameter to \"Embedded\"."]}], "indent": 4, "type": "dt", "extent": [63971, 63993], "text": ["save_as_embedded"]}, {"body": [{"indent": 8, "type": "para", "extent": [64383, 64517], "text": ["If True, Houdini will not generate warnings if the contents of this\n        digital asset reference nodes outside the asset."]}], "indent": 4, "type": "dt", "extent": [64351, 64383], "text": ["ignore_external_references"]}, {"body": [{"indent": 8, "type": "para", "extent": [64539, 64732], "text": ["Normally, Houdini will change the node creating the digital asset into\n        the new digital asset type.  Setting this flag to false will cause the\n        node to remain unchanged."]}], "indent": 4, "type": "dt", "extent": [64517, 64539], "text": ["change_node_type"]}, {"body": [{"indent": 8, "type": "para", "extent": [64751, 64815], "text": ["Create a backup before modifying an existing hda file."]}], "indent": 4, "type": "dt", "extent": [64732, 64751], "text": ["create_backup"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": [{"text": ["createDigitalAsset(self, name=None, hda_file_name=None, description=None, min_num_inputs=None, max_num_inputs=None, compress_contents=False, comment=None, version=None, save_as_embedded=False, ignore_external_references=False, change_node_type=True, create_backup=True)"], "type": "code"}, "  \u2192 ", {"text": ["Node"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::createDigitalAsset"}, "extent": [62310, 62595], "type": "methods_item", "id": "createDigitalAsset"}, {"body": [{"indent": 4, "type": "para", "extent": [64997, 65403], "text": ["Create a compiled digital asset from this node.  You would typically call\n    this method on vop network nodes, such as Material Shader Builder SHOP,\n    Surface Shader Builder SHOP, or VEX Surface SHOP Type VOPNET. The digital asset\n    does not have contents section, which means it does not have vop network inside,\n    but instead relies on the saved VEX code sections to provide the shader code."]}, {"indent": 4, "type": "para", "extent": [65403, 65614], "text": ["After the creation of a compiled HDA, if its VEX code section is ever\n    changed manually, the corresponding vex object code section can be\n    recompiled using ", {"fragment": "#compileCodeSection", "text": "", "value": "/hom/hou/HDADefinition#compileCodeSection", "fallback_text": "hou.HDADefinition.compileCodeSection", "fullpath": "/hom/hou/HDADefinition#compileCodeSection", "scheme": "Hom", "type": "link"}, "."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [65624, 65699], "text": ["The name of the node type that the new digital asset will define."]}], "indent": 4, "type": "dt", "extent": [65614, 65624], "text": ["name"]}, {"body": [{"indent": 8, "type": "para", "extent": [65718, 65867], "text": ["The name of the hda file where Houdini will save the digital asset.\n        If ", {"text": ["None"], "type": "code"}, " Houdini will use ", {"text": ["$HOME/houdiniX.Y/hda/OPcustom.hda"], "type": "code"}, "."]}], "indent": 4, "type": "dt", "extent": [65699, 65718], "text": ["hda_file_name"]}, {"body": [{"indent": 8, "type": "para", "extent": [65884, 66002], "text": ["The name that will appear in the tab menu.  If None, Houdini will use\n        the name for the description."]}], "indent": 4, "type": "dt", "extent": [65867, 65884], "text": ["description"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": [{"text": ["createCompiledDigitalAsset(self, name=None, hda_file_name=None, description=None)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::createCompiledDigitalAsset", "replaces": "/commands/otcreatecompiledtypefrom"}, "extent": [64815, 64902], "type": "methods_item", "id": "createCompiledDigitalAsset"}, {"body": [{"indent": 4, "type": "para", "extent": [66126, 66186], "text": ["Unlocks a digital asset so its contents can be edited."]}, {"indent": 4, "type": "para", "extent": [66186, 66257], "text": ["To use this function, you must have permission to modify the HDA."]}], "indent": 0, "text": [{"text": ["allowEditingOfContents(self, propagate=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::allowEditingOfContents", "replaces": "/commands/otsync"}, "extent": [66002, 66053], "type": "methods_item", "id": "allowEditingOfContents"}, {"body": [{"indent": 4, "type": "para", "extent": [66364, 66532], "text": ["If this node is an unlocked digital asset, change its contents to match\n    what is stored in the definition and lock it.  The parameter values are\n    unchanged."]}, {"indent": 4, "type": "para", "extent": [66532, 66618], "text": ["If this node is locked or is not a digital asset, this method has no\n    effect."]}, {"indent": 4, "type": "para", "extent": [66618, 66705], "text": ["See also ", {"fragment": "#matchesCurrentDefinition", "text": "", "value": "/hom/hou/Node#matchesCurrentDefinition", "fallback_text": "hou.Node.matchesCurrentDefinition", "fullpath": "/hom/hou/Node#matchesCurrentDefinition", "scheme": "Hom", "type": "link"}, " and\n    ", {"fragment": "#isLocked", "text": "", "value": "/hom/hou/Node#isLocked", "fallback_text": "hou.Node.isLocked", "fullpath": "/hom/hou/Node#isLocked", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["matchCurrentDefinition(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::matchCurrentDefinition", "replaces": "/commands/otsync"}, "extent": [66257, 66291], "type": "methods_item", "id": "matchCurrentDefinition"}, {"body": [{"indent": 4, "type": "para", "extent": [66826, 66906], "text": ["Return whether the contents of the node are locked to its type definition."]}], "indent": 0, "text": [{"text": ["matchesCurrentDefinition(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::matchesCurrentDefinition", "replaces": "/commands/otsync"}, "extent": [66705, 66751], "type": "methods_item", "id": "matchesCurrentDefinition"}, {"body": [{"indent": 4, "type": "para", "extent": [66975, 67094], "text": ["If this node is an instance of a digital asset, return whether or not it\n    is locked.  Otherwise, return False."]}, {"indent": 4, "type": "para", "extent": [67094, 67246], "text": ["To differentiate between unlocked digital assets and nodes that are\n    not instances of digital assets, check if the node\u2019s type has a definition:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [67246, 67385], "text": ["\n    def isUnlockedAsset(node):\n        return not node.isLockedHDA() and node.type().definition() is not None\n    "]}, {"indent": 4, "type": "para", "extent": [67385, 67515], "text": ["See ", {"fragment": "#updateFromNode", "text": "", "value": "/hom/hou/HDADefinition#updateFromNode", "fallback_text": "hou.HDADefinition.updateFromNode", "fullpath": "/hom/hou/HDADefinition#updateFromNode", "scheme": "Hom", "type": "link"}, " for an example of how to\n    save and lock all unlocked digital asset instances."]}], "indent": 0, "text": [{"text": ["isLockedHDA(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::isLockedHDA"}, "extent": [66906, 66939], "type": "methods_item", "id": "isLockedHDA"}, {"body": [{"indent": 4, "type": "para", "extent": [67596, 67752], "text": ["Return whether this node is inside a locked digital asset.  If this node is\n    not inside a locked HDA, the node may deviate from the HDA definition."]}], "indent": 0, "text": [{"text": ["isInsideLockedHDA(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::isInsideLockedHDA"}, "extent": [67515, 67554], "type": "methods_item", "id": "isInsideLockedHDA"}, {"body": [{"indent": 4, "type": "para", "extent": [67849, 68052], "text": ["Return True if the node is an editable node contained inside a locked HDA\n    node and False otherwise. In particular this function will return False\n    for a node that is not inside a locked HDA."]}], "indent": 0, "text": [{"text": ["isEditableInsideLockedHDA(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::isEditableInsideLockedHDA"}, "extent": [67752, 67799], "type": "methods_item", "id": "isEditableInsideLockedHDA"}, {"body": [{"indent": 4, "type": "para", "extent": [68119, 68482], "text": ["Return True if the node is editable. This is similar to the\n    ", {"fragment": "#isEditableInsideLockedHDA", "text": "", "value": "/hom/hou/Node#isEditableInsideLockedHDA", "fallback_text": "hou.Node.isEditableInsideLockedHDA", "fullpath": "/hom/hou/Node#isEditableInsideLockedHDA", "scheme": "Hom", "type": "link"}, " method except that it will return\n    True for nodes that are not inside a locked HDA. This function is the\n    simplest way to determine if most node modifications (changing inputs,\n    changing parameters, changing flags) will be allowed on the node."]}], "indent": 0, "text": [{"text": ["isEditable(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::isEditable"}, "extent": [68052, 68084], "type": "methods_item", "id": "isEditable"}, {"body": [{"indent": 4, "type": "para", "extent": [68560, 68763], "text": ["This method is a shortcut for `self.type().hdaModule() to reduce the length\n    of expressions in Python parameters and button callbacks.  See\n    ", {"fragment": "#hdaModule", "text": "", "value": "/hom/hou/NodeType#hdaModule", "fallback_text": "hou.NodeType.hdaModule", "fullpath": "/hom/hou/NodeType#hdaModule", "scheme": "Hom", "type": "link"}, " for more information."]}, {"indent": 4, "type": "para", "extent": [68763, 68812], "text": ["See also the ", {"text": ["hm"], "type": "code"}, " method and ", {"text": "", "value": "/hom/hou/phm", "fallback_text": "hou.phm", "fullpath": "/hom/hou/phm", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["hdaModule(self)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/HDAModule", "fallback_text": "hou.HDAModule", "fullpath": "/hom/hou/HDAModule", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::hdaModule"}, "extent": [68482, 68526], "type": "methods_item", "id": "hdaModule"}, {"body": [{"indent": 4, "type": "para", "extent": [68883, 68938], "text": ["This method is a shortcut for ", {"text": ["self.hdaModule()"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [68938, 68967], "text": ["See also ", {"text": "", "value": "/hom/hou/phm", "fallback_text": "hou.phm", "fullpath": "/hom/hou/phm", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["hm(self)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/HDAModule", "fallback_text": "hou.HDAModule", "fullpath": "/hom/hou/HDAModule", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::hdaModule"}, "extent": [68812, 68849], "type": "methods_item", "id": "hm"}, {"body": [{"indent": 4, "type": "para", "extent": [69064, 69210], "text": ["Synchronize the node from the specified version to the current version of\n    its HDA definition. See also ", {"fragment": "#version", "text": "", "value": "/hom/hou/HDADefinition#version", "fallback_text": "hou.HDADefinition.version", "fullpath": "/hom/hou/HDADefinition#version", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["syncNodeVersionIfNeeded(self, from_version)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::syncNodeVersionIfNeeded"}, "extent": [68967, 69016], "type": "methods_item", "id": "syncNodeVersionIfNeeded"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Assets"], "extent": [62140, 62153], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [69315, 69354], "text": ["Return the node\u2019s comment string."]}], "indent": 0, "text": [{"text": ["comment(self)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::comment", "replaces": "/commands/opcomment"}, "extent": [69225, 69254], "type": "methods_item", "id": "comment"}, {"body": [{"indent": 4, "type": "para", "extent": [69449, 69530], "text": ["Sets the comment associated with this node.\n    See also ", {"text": ["appendComment()"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["setComment(self, comment)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setComment", "replaces": "/commands/opcomment"}, "extent": [69354, 69385], "type": "methods_item", "id": "setComment"}, {"body": [{"indent": 4, "type": "para", "extent": [69631, 69701], "text": ["Appends the given text to the comment associated with this node."]}], "indent": 0, "text": [{"text": ["appendComment(self, comment)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::appendComment", "replaces": "/commands/opcomment"}, "extent": [69530, 69564], "type": "methods_item", "id": "appendComment"}, {"body": [{"indent": 4, "type": "para", "extent": [69847, 69956], "text": ["Return a boolean to indicate of the node should display its\n    descriptive name in the network editor."]}], "indent": 0, "text": [{"text": ["isDisplayDescriptiveNameFlagSet(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::isDisplayDescriptiveNameFlagSet", "replaces": "/commands/opget /expressions/opflag"}, "extent": [69701, 69754], "type": "methods_item", "id": "isDisplayDescriptiveNameFlagSet"}, {"body": [{"indent": 4, "type": "para", "extent": [70076, 70175], "text": ["Set or unset whether this node should display its descriptive\n    name in the network editor."]}], "indent": 0, "text": [{"text": ["setDisplayDescriptiveNameFlag(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setDisplayDescriptiveName", "replaces": "/commands/opset"}, "extent": [69956, 70001], "type": "methods_item", "id": "setDisplayDescriptiveNameFlag"}, {"body": [{"indent": 4, "type": "para", "extent": [70292, 70393], "text": ["Return an integer to indicate which output of the node should\n    be used for display purposes."]}], "indent": 0, "text": [{"text": ["outputForViewFlag(self)"], "type": "code"}, "  \u2192 ", {"text": ["int"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::outputForViewFlag", "replaces": "/commands/opget /expressions/opflag"}, "extent": [70175, 70213], "type": "methods_item", "id": "outputForViewFlag"}, {"body": [{"indent": 4, "type": "para", "extent": [70503, 70576], "text": ["Sets which output should be used for display purposes on this node."]}], "indent": 0, "text": [{"text": ["setOutputForViewFlag(self, output)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setOutputForViewFlag", "replaces": "/commands/opset"}, "extent": [70393, 70433], "type": "methods_item", "id": "setOutputForViewFlag"}, {"body": [{"indent": 4, "type": "para", "extent": [70686, 70743], "text": ["Return the date and time when the node was created."]}], "indent": 0, "text": [{"text": ["creationTime(self)"], "type": "code"}, "  \u2192 ", {"text": ["datetime.datetime"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::creationTime", "replaces": "/commands/opstat"}, "extent": [70576, 70623], "type": "methods_item", "id": "creationTime"}, {"body": [{"indent": 4, "type": "para", "extent": [70861, 70924], "text": ["Return the date and time when the node was last modified."]}], "indent": 0, "text": [{"text": ["modificationTime(self)"], "type": "code"}, "  \u2192 ", {"text": ["datetime.datetime"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::modificationTime", "replaces": "/commands/opstat"}, "extent": [70743, 70794], "type": "methods_item", "id": "modificationTime"}, {"body": [], "indent": 0, "text": [{"text": ["creator(self)"], "type": "code"}, "  \u2192 Node"], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_Node::creator", "replaces": "/commands/opstat"}, "extent": [70924, 70951], "type": "methods_item", "id": "creator"}, {"body": [{"indent": 4, "type": "para", "extent": [71096, 71242], "text": ["This returns the name of the viewport tool that was used to be created.\n    This name is not set by default and is usually the empty string."]}], "indent": 0, "text": [{"text": ["creatorState(self)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::creatorState"}, "extent": [71026, 71059], "type": "methods_item", "id": "creatorState"}, {"body": [{"indent": 4, "type": "para", "extent": [71316, 71501], "text": ["This sets the name of the tool that created this node. If you call this\n    with a name that differs from the node type name, you should also call\n    ", {"text": ["setBuiltExplicitly(False)"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["setCreatorState(self, state)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setCreatorState"}, "extent": [71242, 71276], "type": "methods_item", "id": "setCreatorState"}, {"body": [{"indent": 4, "type": "para", "extent": [71572, 72014], "text": ["Return whether this node was built explicitly (defaults to True).  Most\n    nodes are built explicitly, but some are implicitly created by Houdini.\n    For example, if you select geometry from multiple SOPs and then perform\n    an operation, Houdini will put down an implicit merge SOP before performing\n    that operation.  When reselecting geometry in SOPs, Houdini will\n    automatically delete any SOPs that were created implicitly."]}], "indent": 0, "text": [{"text": ["isBuiltExplicitly(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::creator"}, "extent": [71501, 71540], "type": "methods_item", "id": "isBuiltExplicitly"}, {"body": [{"indent": 4, "type": "para", "extent": [72107, 72413], "text": ["Set whether this node was built explicitly (default value is True). If\n    set to False, this node will not show up in various menus and in the\n    Network View pane\u2019s list mode. This flag is typically used for\n    intermediate utility nodes that one is unlikely to want to change its\n    parameters."]}], "indent": 0, "text": [{"text": ["setBuiltExplicitly(self, built_explicitly)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setBuiltExplicitly()"}, "extent": [72014, 72062], "type": "methods_item", "id": "setBuiltExplicitly"}, {"body": [{"indent": 4, "type": "para", "extent": [72490, 72612], "text": ["Return whether the node is time dependent.  A time dependent node is\n    re-evaluated every time the frame changes."]}], "indent": 0, "text": [{"text": ["isTimeDependent(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::isTimeDependent"}, "extent": [72413, 72450], "type": "methods_item", "id": "isTimeDependent"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Metadata"], "extent": [69210, 69225], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [72836, 72953], "text": ["Moves a node to a well-spaced position near its inputs or outputs and\n    returns the new position of the node."]}], "indent": 0, "text": [{"text": ["moveToGoodPosition(self, relative_to_inputs=True, move_inputs=True, move_outputs=True, move_unconnected=True)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Vector2", "fallback_text": "hou.Vector2", "fullpath": "/hom/hou/Vector2", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::moveToGoodPosition", "replaces": "/commands/opautoplace"}, "extent": [72625, 72762], "type": "methods_item", "id": "moveToGoodPosition"}, {"body": [{"indent": 4, "type": "para", "extent": [73104, 73193], "text": ["Automatically position all or some children of this node in the network\n    editor."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [73204, 73436], "text": ["A sequence of child ", {"text": "", "value": "/hom/hou/NetworkMovableItem", "fallback_text": "hou.NetworkMovableItem", "fullpath": "/hom/hou/NetworkMovableItem", "scheme": "Hom", "type": "link"}, " objects to position.\n        This may include nodes, dots, and/or subnet inputs. If this sequence\n        is empty, this method will reposition all child items of this node."]}], "indent": 4, "type": "dt", "extent": [73193, 73204], "text": ["items"]}, {"body": [{"indent": 8, "type": "para", "extent": [73460, 73647], "text": ["A fraction of the width and height of a tile that affects the space\n        between nodes with common inputs.  If this parameter is -1, Houdini\n        uses the default spacing."]}], "indent": 4, "type": "dt", "extent": [73436, 73460], "text": ["horizontal_spacing"]}, {"body": [{"indent": 8, "type": "para", "extent": [73669, 73859], "text": ["A fraction of the width and height of a tile that affects the space\n        between a node and its output nodes.  If this parameter is -1, Houdini\n        uses the default spacing."]}], "indent": 4, "type": "dt", "extent": [73647, 73669], "text": ["vertical_spacing"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": [{"text": ["layoutChildren(self, items=(), horizontal_spacing=-1.0, vertical_spacing=-1.0)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::layoutChildren", "replaces": "/commands/oplayout"}, "extent": [72953, 73037], "type": "methods_item", "id": "layoutChildren"}, {"body": [{"indent": 4, "type": "para", "extent": [73949, 74102], "text": ["Return whether the node is hidden in the network editor.  Note that Houdini\n    also uses the term \"exposed\" to refer to nodes that are not hidden."]}, {"indent": 4, "type": "para", "extent": [74102, 74270], "text": ["If a visible node is connected to a hidden node, the network editor will\n    display dashed lines for the wire going from the visible node to the hidden\n    node."]}, {"indent": 4, "type": "para", "extent": [74270, 74305], "text": ["See also ", {"fragment": "#hide", "text": "", "value": "/hom/hou/Node#hide", "fallback_text": "hou.Node.hide", "fullpath": "/hom/hou/Node#hide", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["isHidden(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::isHidden", "replaces": "/commands/opget /expressions/opflag"}, "extent": [73859, 73879], "type": "methods_item", "id": "isHidden"}, {"body": [{"indent": 4, "type": "para", "extent": [74379, 74502], "text": ["Hide or show a node in the network editor.  See ", {"fragment": "#isHidden", "text": "", "value": "/hom/hou/Node#isHidden", "fallback_text": "hou.Node.isHidden", "fullpath": "/hom/hou/Node#isHidden", "scheme": "Hom", "type": "link"}, "\n    for more information about hidden nodes."]}], "indent": 0, "text": [{"text": ["hide(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::hide", "replaces": "/commands/opset"}, "extent": [74305, 74325], "type": "methods_item", "id": "hide"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Layout"], "extent": [72612, 72625], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [74617, 74658], "text": ["Asks or forces the node to re-cook."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [74675, 74934], "text": ["The frames at which to cook the object. This should be a tuple of 2 or 3\n        ints giving the start frame, end frame, and optionally a frame\n        increment, in that order. If you supply a two-tuple ", {"text": ["(start, end)"], "type": "code"}, ", the\n        increment is ", {"text": ["1"], "type": "code"}, "."]}], "indent": 4, "type": "dt", "extent": [74658, 74675], "text": ["frame_range"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": [{"text": ["cook(self, force=False, frame_range=())"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::cook", "replaces": "/commands/opcook"}, "extent": [74516, 74562], "type": "methods_item", "id": "cook"}, {"body": [{"indent": 4, "type": "para", "extent": [75020, 75060], "text": ["Asks if the node needs to re-cook."]}], "indent": 0, "text": [{"text": ["needsToCook(self, time=hou.time())"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::needsToCook"}, "extent": [74934, 74984], "type": "methods_item", "id": "needsToCook"}, {"body": [{"indent": 4, "type": "para", "extent": [75126, 75204], "text": ["Returns the number of times this node has cooked in the current session."]}], "indent": 0, "text": [{"text": ["cookCount(self)"], "type": "code"}, "  \u2192 ", {"text": ["int"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::cookCount()"}, "extent": [75060, 75090], "type": "methods_item", "id": "cookCount"}, {"body": [{"indent": 4, "type": "para", "extent": [75275, 75371], "text": ["Update the UI states, such as hidden and disabled, for each parameter\n    in the node."]}, {"indent": 4, "type": "para", "extent": [75371, 76024], "text": ["UI states can be expressed as conditionals (i.e. Disable\n    When) which require evaluation.  Typically in graphical Houdini the\n    Parameter Pane performs the evaluation when the node is selected in order\n    to determine how the node parameters should look in the pane.  However in\n    non-graphical Houdini or if the Parameter Pane has not yet loaded the node,\n    then the evaluation does not occur and the UI states remain at their\n    defaults causing methods such as ", {"fragment": "#isDisabled", "text": "", "value": "/hom/hou/Parm#isDisabled", "fallback_text": "hou.Parm.isDisabled", "fullpath": "/hom/hou/Parm#isDisabled", "scheme": "Hom", "type": "link"}, " and\n    ", {"fragment": "#isHidden", "text": "", "value": "/hom/hou/Parm#isHidden", "fallback_text": "hou.Parm.isHidden", "fullpath": "/hom/hou/Parm#isHidden", "scheme": "Hom", "type": "link"}, " to return incorrect values.  In these cases, it\n    is recommended that ", {"fragment": "#updateParmStates", "text": "", "value": "/hom/hou/Node#updateParmStates", "fallback_text": "hou.Node.updateParmStates", "fullpath": "/hom/hou/Node#updateParmStates", "scheme": "Hom", "type": "link"}, " is called."]}], "indent": 0, "text": [{"text": ["updateParmStates(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::updateParmStates()"}, "extent": [75204, 75232], "type": "methods_item", "id": "updateParmStates"}, {"body": [{"indent": 4, "type": "para", "extent": [76093, 76208], "text": ["Return the text of any errors from the last cook of this node,\n    or an empty tuple if there were no errors."]}], "indent": 0, "text": [{"text": ["errors(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::errors"}, "extent": [76024, 76062], "type": "methods_item", "id": "errors"}, {"body": [{"indent": 4, "type": "para", "extent": [76281, 76400], "text": ["Return the text of any warnings from the last cook of this node,\n    or an empty tuple if there were no warnings."]}], "indent": 0, "text": [{"text": ["warnings(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::warnings"}, "extent": [76208, 76248], "type": "methods_item", "id": "warnings"}, {"body": [{"indent": 4, "type": "para", "extent": [76473, 76592], "text": ["Return the text of any messages from the last cook of this node,\n    or an empty tuple if there were no messages."]}], "indent": 0, "text": [{"text": ["messages(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::messages"}, "extent": [76400, 76440], "type": "methods_item", "id": "messages"}, {"body": [{"indent": 4, "type": "para", "extent": [76741, 77032], "text": ["Returns a tree structure containing information about the node and its\n    most recently cooked data. The contents of the tree vary widely depending\n    on the node type, and the nature of its cooked data. This tree of data is\n    used to generate the node information window contents."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [77045, 77322], "text": ["Setting ", {"text": ["verbose"], "type": "code"}, " to ", {"text": ["True"], "type": "code"}, " will cause some additional information to\n        be generated. In particular data that is expensive to calculate, or\n        which will generate a large amount of information tends to be generated\n        only if this option is turned on."]}], "indent": 4, "type": "dt", "extent": [77032, 77045], "text": ["verbose"]}, {"body": [{"indent": 8, "type": "para", "extent": [77333, 77694], "text": ["Setting ", {"text": ["debug"], "type": "code"}, " to ", {"text": ["True"], "type": "code"}, " will, in a few cases, cause additional\n        information to be displayed which generally will be most useful when\n        debugging the internal operation of Houdini. For example, geometry\n        attributes will display their \"data ids\", which can be helpful when\n        tracking down errors in SOPs written with the HDK."]}], "indent": 4, "type": "dt", "extent": [77322, 77333], "text": ["debug"]}, {"body": [{"indent": 8, "type": "para", "extent": [77712, 77786], "text": ["Specifies which of the node\u2019s outputs to return information for."]}], "indent": 4, "type": "dt", "extent": [77694, 77712], "text": ["output_index"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": [{"text": ["infoTree(self, verbose=False, debug=False, output_index=0)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/NodeInfoTree", "fallback_text": "hou.NodeInfoTree", "fullpath": "/hom/hou/NodeInfoTree", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::infoTree", "replaces": "/commands/opinfo"}, "extent": [76592, 76682], "type": "methods_item", "id": "infoTree"}, {"body": [{"indent": 4, "type": "para", "extent": [77891, 77973], "text": ["Return True if the node can generate compiled cook code and False otherwise."]}, {"indent": 4, "type": "para", "extent": [77973, 78090], "text": ["If check_parent is true, the parents in the ancestor hierarchy are tested\n    if any of them can generate code."]}], "indent": 0, "text": [{"text": ["canGenerateCookCode(self, check_parent=False)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::canGenerateCookCode"}, "extent": [77786, 77847], "type": "methods_item", "id": "canGenerateCookCode"}, {"body": [{"indent": 4, "type": "para", "extent": [78207, 78437], "text": ["Return the node itself or a network node that contains this node and \n    can generate compiled cook code.  For example, the generator node for \n    a VOP node could be the SHOP node or SOP node that contains it for example."]}, {"indent": 4, "type": "para", "extent": [78437, 78555], "text": ["Return None if this node cannot generate code and is not contained \n    in a code generating node either either."]}], "indent": 0, "text": [{"text": ["cookCodeGeneratorNode(self, check_parent=False)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::cookCodeGeneratorNode"}, "extent": [78090, 78161], "type": "methods_item", "id": "cookCodeGeneratorNode"}, {"body": [{"indent": 4, "type": "para", "extent": [78633, 78702], "text": ["Return the language of the generated cook code (i.e. VEX, RSL)."]}, {"indent": 4, "type": "para", "extent": [78702, 78784], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if this node cannot generate compiled code."]}], "indent": 0, "text": [{"text": ["cookCodeLanguage(self)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::cookCodeLanguage"}, "extent": [78555, 78592], "type": "methods_item", "id": "cookCodeLanguage"}, {"body": [{"indent": 4, "type": "para", "extent": [78889, 79049], "text": ["Return True if this node can generate compiled cook code for multiple\n    contexts (i.e. surface context, displacement context, etc.) and False otherwise."]}, {"indent": 4, "type": "para", "extent": [79049, 79131], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if this node cannot generate compiled code."]}], "indent": 0, "text": [{"text": ["supportsMultiCookCodeContexts(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::supportsMultiCookCodeContexts"}, "extent": [78784, 78835], "type": "methods_item", "id": "supportsMultiCookCodeContexts"}, {"body": [{"indent": 4, "type": "para", "extent": [79251, 79404], "text": ["Saves compiled VEX code to a disk file (for nodes that support this).\n    See ", {"fragment": "#saveCookCodeToFile", "text": "", "value": "/hom/hou/Node#saveCookCodeToFile", "fallback_text": "hou.Node.saveCookCodeToFile", "fullpath": "/hom/hou/Node#saveCookCodeToFile", "scheme": "Hom", "type": "link"}, " for a description of the arguments."]}], "indent": 0, "text": [{"text": ["saveCompiledCookCodeToFile(self, file_name, context_name=None)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::saveCompiledCookCodeToFile"}, "extent": [79131, 79199], "type": "methods_item", "id": "saveCompiledCookCodeToFile"}, {"body": [{"indent": 4, "type": "para", "extent": [79526, 79602], "text": ["Saves VEX/RSL source code to a disk file (on nodes that support this)."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [79619, 79679], "text": ["The file path in which to save the generated code."]}], "indent": 4, "type": "dt", "extent": [79602, 79619], "text": [{"text": ["file_name"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [79698, 79897], "text": ["If ", {"text": ["True"], "type": "code"}, ", the method does not write a header comment at the beginning\n        of the file containing the file name and node path from which the code\n        was generated and a time stamp."]}], "indent": 4, "type": "dt", "extent": [79679, 79698], "text": [{"text": ["skip_header"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [79917, 80152], "text": ["A string containing name of the shader context for the code. This\n        option applies to nodes such as the\n        ", {"text": ["Material Shader Builder"], "fullpath": "/nodes/shop/vopmaterial", "scheme": "Node", "type": "link", "value": "/nodes/shop/vopmaterial"}, " which can generate\n        code for multiple context types."]}, {"indent": 8, "type": "para", "extent": [80152, 80321], "text": ["For example, a Material network might contain both surface and\n        displacement shaders, so you must specify which type of shader code to\n        generate:"]}, {"lang": "python", "indent": 8, "type": "pre", "extent": [80321, 80454], "text": ["\n        node(\"/shop/vopmaterial1\").saveCookCodeToFile(\"myfile.vfl\", context_name=\"surface\")\n        "]}, {"indent": 8, "type": "para", "extent": [80454, 80514], "text": ["On single-context nodes this argument is ignored."]}, {"indent": 8, "type": "para", "extent": [80514, 80655], "text": ["For VEX materials, possible values are ", {"text": ["surface"], "type": "code"}, ", ", {"text": ["displacement"], "type": "code"}, ",\n        ", {"text": ["light"], "type": "code"}, ", ", {"text": ["shadow"], "type": "code"}, ", ", {"text": ["fog"], "type": "code"}, ", ", {"text": ["image3d"], "type": "code"}, ", ", {"text": ["photon"], "type": "code"}, ", or ", {"text": ["cvex"], "type": "code"}, "."]}, {"indent": 8, "type": "para", "extent": [80655, 80771], "text": ["For RSL materials, possible values are ", {"text": ["surface"], "type": "code"}, ", ", {"text": ["displacement"], "type": "code"}, ",\n        ", {"text": ["light"], "type": "code"}, ", ", {"text": ["volume"], "type": "code"}, ", or ", {"text": ["imager"], "type": "code"}, "."]}], "indent": 4, "type": "dt", "extent": [79897, 79917], "text": [{"text": ["context_name"], "type": "code"}]}], "container": true, "type": "dt_group"}], "indent": 0, "text": [{"text": ["saveCookCodeToFile(self, file_name, skip_header=False, context_name=None)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::saveCookCodeToFile"}, "extent": [79404, 79483], "type": "methods_item", "id": "saveCookCodeToFile"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Cooking"], "extent": [74502, 74516], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [80910, 80968], "text": ["Return a list of the network boxes inside this node."]}], "indent": 0, "text": [{"text": ["networkBoxes(self)"], "type": "code"}, "  \u2192 tuple of ", {"text": "", "value": "/hom/hou/NetworkBox", "fallback_text": "hou.NetworkBox", "fullpath": "/hom/hou/NetworkBox", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::networkBoxes", "replaces": "/commands/nbls"}, "extent": [80791, 80849], "type": "methods_item", "id": "networkBoxes"}, {"body": [{"indent": 4, "type": "para", "extent": [81094, 81184], "text": ["Return a generator that iterates through all the network boxes inside this\n    node."]}], "indent": 0, "text": [{"text": ["iterNetworkBoxes(self)"], "type": "code"}, "  \u2192 generator of ", {"text": "", "value": "/hom/hou/NetworkBox", "fallback_text": "hou.NetworkBox", "fullpath": "/hom/hou/NetworkBox", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::networkBoxes", "replaces": "/commands/nbls"}, "extent": [80968, 81033], "type": "methods_item", "id": "iterNetworkBoxes"}, {"body": [{"indent": 4, "type": "para", "extent": [81303, 81427], "text": ["Return a network box with the given name inside this node, or ", {"text": ["None"], "type": "code"}, " if\n    no network box with the given name exists."]}], "indent": 0, "text": [{"text": ["findNetworkBox(self, name)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/NetworkBox", "fallback_text": "hou.NetworkBox", "fullpath": "/hom/hou/NetworkBox", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::findNetworkBox", "replaces": "/commands/nbls"}, "extent": [81184, 81240], "type": "methods_item", "id": "findNetworkBox"}, {"body": [{"indent": 4, "type": "para", "extent": [81566, 81652], "text": ["Return a list of network boxes inside this node whose names match a\n    pattern."]}], "indent": 0, "text": [{"text": ["findNetworkBoxes(self, pattern)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/NetworkBox", "fallback_text": "hou.NetworkBox", "fullpath": "/hom/hou/NetworkBox", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::findNetworkBoxes", "replaces": "/commands/nbglob"}, "extent": [81427, 81499], "type": "methods_item", "id": "findNetworkBoxes"}, {"body": [{"indent": 4, "type": "para", "extent": [81781, 81897], "text": ["Creates a network box inside this network. Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, "\n    if this node is not a network."]}, {"indent": 4, "type": "para", "extent": [81897, 81971], "text": ["If you don\u2019t specify a ", {"text": ["name"], "type": "code"}, ", Houdini gives the box a default name."]}, {"indent": 4, "type": "para", "extent": [81971, 82201], "text": ["Network box names are not displayed in the network editor pane. Instead, a\n    \"comment\" can be specified with the ", {"fragment": "#setComment", "text": "", "value": "/hom/hou/NetworkBox#setComment", "fallback_text": "hou.NetworkBox.setComment", "fullpath": "/hom/hou/NetworkBox#setComment", "scheme": "Hom", "type": "link"}, "\n    method, and this comment will appear in the title bar of the network box."]}], "indent": 0, "text": [{"text": ["createNetworkBox(self, name=None)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/NetworkBox", "fallback_text": "hou.NetworkBox", "fullpath": "/hom/hou/NetworkBox", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::createNetworkBox", "replaces": "/commands/nbadd"}, "extent": [81652, 81715], "type": "methods_item", "id": "createNetworkBox"}, {"body": [{"indent": 4, "type": "para", "extent": [82384, 82432], "text": ["Copies a network box and returns the copy."]}, {"indent": 4, "type": "para", "extent": [82432, 82623], "text": ["If ", {"text": ["new_name"], "type": "code"}, " is given, the network box will be copied to a new network box\n    named new_name (a different name will be generated if there is already a\n    network box with that name)."]}, {"indent": 4, "type": "para", "extent": [82623, 82792], "text": ["If ", {"text": ["channel_reference_original"], "type": "code"}, " is ", {"text": ["True"], "type": "code"}, ", all operators created by the copy\n    will have their animatable parameters set to reference the original\n    operators."]}, {"indent": 4, "type": "para", "extent": [82792, 82935], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if this node is not a network or if the\n    node child type does not match the network box\u2019s node type."]}], "indent": 0, "text": [{"text": ["copyNetworkBox(self, network_box_to_copy, new_name=None, channel_reference_original=False)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/NetworkBox", "fallback_text": "hou.NetworkBox", "fullpath": "/hom/hou/NetworkBox", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::copyNetworkBox", "replaces": "/commands/nbcp"}, "extent": [82201, 82321], "type": "methods_item", "id": "copyNetworkBox"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Network boxes"], "extent": [80771, 80791], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [83047, 83104], "text": ["Return a list of the sticky notes inside this node."]}], "indent": 0, "text": [{"text": ["stickyNotes(self)"], "type": "code"}, "  \u2192 tuple of ", {"text": "", "value": "/hom/hou/StickyNote", "fallback_text": "hou.StickyNote", "fullpath": "/hom/hou/StickyNote", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::stickyNotes"}, "extent": [82954, 83011], "type": "methods_item", "id": "stickyNotes"}, {"body": [{"indent": 4, "type": "para", "extent": [83204, 83293], "text": ["Return a generator that iterates through all the sticky notes inside this\n    node."]}], "indent": 0, "text": [{"text": ["iterStickyNotes(self)"], "type": "code"}, "  \u2192 generator of ", {"text": "", "value": "/hom/hou/StickyNote", "fallback_text": "hou.StickyNote", "fullpath": "/hom/hou/StickyNote", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::stickyNotes"}, "extent": [83104, 83168], "type": "methods_item", "id": "iterStickyNotes"}, {"body": [{"indent": 4, "type": "para", "extent": [83388, 83512], "text": ["Return a sticky note with the given name inside this node, or ", {"text": ["None"], "type": "code"}, " if\n    no sticky note with the given name exists."]}], "indent": 0, "text": [{"text": ["findStickyNote(self, name)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/StickyNote", "fallback_text": "hou.StickyNote", "fullpath": "/hom/hou/StickyNote", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::findStickyNote"}, "extent": [83293, 83349], "type": "methods_item", "id": "findStickyNote"}, {"body": [{"indent": 4, "type": "para", "extent": [83623, 83708], "text": ["Return a list of sticky notes inside this node whose names match a\n    pattern."]}], "indent": 0, "text": [{"text": ["findStickyNotes(self, pattern)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/StickyNote", "fallback_text": "hou.StickyNote", "fullpath": "/hom/hou/StickyNote", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::findStickyNotes"}, "extent": [83512, 83583], "type": "methods_item", "id": "findStickyNotes"}, {"body": [{"indent": 4, "type": "para", "extent": [83812, 83928], "text": ["Creates a sticky note inside this network. Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, "\n    if this node is not a network."]}, {"indent": 4, "type": "para", "extent": [83928, 84003], "text": ["If you don\u2019t specify a ", {"text": ["name"], "type": "code"}, ", Houdini gives the note a default name."]}], "indent": 0, "text": [{"text": ["createStickyNote(self, name=None)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/StickyNote", "fallback_text": "hou.StickyNote", "fullpath": "/hom/hou/StickyNote", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::createStickyNote"}, "extent": [83708, 83771], "type": "methods_item", "id": "createStickyNote"}, {"body": [{"indent": 4, "type": "para", "extent": [84128, 84176], "text": ["Copies a sticky note and returns the copy."]}, {"indent": 4, "type": "para", "extent": [84176, 84367], "text": ["If ", {"text": ["new_name"], "type": "code"}, " is given, the sticky note will be copied to a new sticky note\n    named new_name (a different name will be generated if there is already a\n    sticky note with that name)."]}, {"indent": 4, "type": "para", "extent": [84367, 84510], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if this node is not a network or if the\n    node child type does not match the sticky note\u2019s node type."]}], "indent": 0, "text": [{"text": ["copyStickyNote(self, network_box_to_copy, new_name=None)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/StickyNote", "fallback_text": "hou.StickyNote", "fullpath": "/hom/hou/StickyNote", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::copyStickyNote"}, "extent": [84003, 84089], "type": "methods_item", "id": "copyStickyNote"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Sticky notes"], "extent": [82935, 82954], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [84623, 84739], "text": ["Creates a network dot inside this network. Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, "\n    if this node is not a network."]}], "indent": 0, "text": [{"text": ["createNetworkDot(self)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/NetworkDot", "fallback_text": "hou.NetworkDot", "fullpath": "/hom/hou/NetworkDot", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::createNetworkDot"}, "extent": [84529, 84582], "type": "methods_item", "id": "createNetworkDot"}, {"body": [{"indent": 4, "type": "para", "extent": [84833, 84884], "text": ["Returns a tuple of all dots in this network."]}], "indent": 0, "text": [{"text": ["networkDots(self)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/NetworkDot", "fallback_text": "hou.NetworkDot", "fullpath": "/hom/hou/NetworkDot", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::networkDots"}, "extent": [84739, 84797], "type": "methods_item", "id": "networkDots"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Network dots"], "extent": [84510, 84529], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [85024, 85084], "text": ["Add a node group to the node and return the new group."]}, {"indent": 4, "type": "para", "extent": [85084, 85329], "text": ["If a group of the given name already exists then this function simply\n    returns the existing group without adding a new one. If the name of the\n    group is None or an empty string, then a unique default name is\n    automatically chosen."]}, {"indent": 4, "type": "para", "extent": [85329, 85490], "text": ["This function can only be called on nodes that are networks. If it is called\n    on a node that is not a network, then it raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 4, "type": "para", "extent": [85490, 85552], "text": ["To remove a node group, use ", {"fragment": "#destroy", "text": "", "value": "/hom/hou/NodeGroup#destroy", "fallback_text": "hou.NodeGroup.destroy", "fullpath": "/hom/hou/NodeGroup#destroy", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["addNodeGroup(self, name=None)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/NodeGroup", "fallback_text": "hou.NodeGroup", "fullpath": "/hom/hou/NodeGroup", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::addNodeGroup", "replaces": "/commands/opgadd"}, "extent": [84902, 84961], "type": "methods_item", "id": "addNodeGroup"}, {"body": [{"indent": 4, "type": "para", "extent": [85661, 85772], "text": ["Return a node group contained by the node with the given name, or ", {"text": ["None"], "type": "code"}, " if\n    the group does not exist."]}], "indent": 0, "text": [{"text": ["nodeGroup(self, name)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/NodeGroup", "fallback_text": "hou.NodeGroup", "fullpath": "/hom/hou/NodeGroup", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::nodeGroup", "replaces": "/commands/opgls"}, "extent": [85552, 85602], "type": "methods_item", "id": "nodeGroup"}, {"body": [{"indent": 4, "type": "para", "extent": [85886, 85937], "text": ["Return the list of node groups in this node."]}], "indent": 0, "text": [{"text": ["nodeGroups(self)"], "type": "code"}, "  \u2192 tuple of ", {"text": "", "value": "/hom/hou/NodeGroup", "fallback_text": "hou.NodeGroup", "fullpath": "/hom/hou/NodeGroup", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::nodeGroups", "replaces": "/commands/opgls"}, "extent": [85772, 85826], "type": "methods_item", "id": "nodeGroups"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Node groups"], "extent": [84884, 84902], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [86017, 86087], "text": ["Runs the initialization script associated with this node\u2019s type."]}], "indent": 0, "text": [{"text": ["runInitScripts(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::runInitScripts"}, "extent": [85951, 85978], "type": "methods_item", "id": "runInitScripts"}, {"body": [{"indent": 4, "type": "para", "extent": [86188, 86252], "text": ["Return the script that will run when this node is deleted."]}], "indent": 0, "text": [{"text": ["deleteScript(self)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::deleteScript", "replaces": "/commands/opdelscript"}, "extent": [86087, 86120], "type": "methods_item", "id": "deleteScript"}, {"body": [{"indent": 4, "type": "para", "extent": [86368, 86431], "text": ["Sets the script that will run when this node is deleted."]}], "indent": 0, "text": [{"text": ["setDeleteScript(self, script_text, language=hou.scriptLanguage.Python)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setDeleteScript"}, "extent": [86252, 86328], "type": "methods_item", "id": "setDeleteScript"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Scripts"], "extent": [85937, 85951], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [86542, 86742], "text": ["Return a node path representing the location for storing clips. This\n    location may or may not exist. To find or create such a network, use\n    ", {"fragment": "#findOrCreateMotionEffectsNetwork", "text": "", "value": "/hom/hou/Node#findOrCreateMotionEffectsNetwork", "fallback_text": "hou.Node.findOrCreateMotionEffectsNetwork", "fullpath": "/hom/hou/Node#findOrCreateMotionEffectsNetwork", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["motionEffectsNetworkPath(self)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::motionEffectsNetworkPath"}, "extent": [86447, 86493], "type": "methods_item", "id": "motionEffectsNetworkPath"}, {"body": [{"indent": 4, "type": "para", "extent": [86893, 87025], "text": ["Return a CHOP network node suitable for storing Motion Effects. By\n    default, if the node doesn\u2019t exist, it will be created."]}, {"indent": 4, "type": "para", "extent": [87025, 87116], "text": ["See also ", {"fragment": "#storeAsClip", "text": "", "value": "/hom/hou/Parm#storeAsClip", "fallback_text": "hou.Parm.storeAsClip", "fullpath": "/hom/hou/Parm#storeAsClip", "scheme": "Hom", "type": "link"}, " and\n    ", {"fragment": "#motionEffectsNetworkPath", "text": "", "value": "/hom/hou/Node#motionEffectsNetworkPath", "fallback_text": "hou.Node.motionEffectsNetworkPath", "fullpath": "/hom/hou/Node#motionEffectsNetworkPath", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["findOrCreateMotionEffectsNetwork(self, create=True)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/chopNetNodeTypeCategory", "fallback_text": "hou.chopNetNodeTypeCategory", "fullpath": "/hom/hou/chopNetNodeTypeCategory", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_Node::findOrCreateMotionEffectsNetwork"}, "extent": [86742, 86836], "type": "methods_item", "id": "findOrCreateMotionEffectsNetwork"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Motion FX"], "extent": [86431, 86447], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [87252, 87429], "text": ["Return a copy stamping floating point or string value.  This node must be a\n    downstream stamping operator, such as a Copy SOP, Cache SOP, LSystem SOP,\n    or Copy CHOP."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [87446, 87489], "text": ["The name of the stamping variable."]}], "indent": 4, "type": "dt", "extent": [87429, 87446], "text": [{"text": ["parm_name"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [87510, 87709], "text": ["The value that this function returns if Houdini is not currently\n        performing stamping, or if ", {"text": ["parm_name"], "type": "code"}, " is not a valid variable\n        name.  This value may be a float or a string."]}], "indent": 4, "type": "dt", "extent": [87489, 87510], "text": [{"text": ["default_value"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [87709, 87775], "text": ["You might put the following expression in a Python parameter:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [87775, 87848], "text": ["\n    node(\"../copy1\").stampValue(\"sides\", 5)\n    "]}], "indent": 0, "text": [{"text": ["stampValue(self, parm_name, default_value)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::stampValue", "replaces": "/expressions/stamp /expressions/stamps"}, "extent": [87131, 87180], "type": "methods_item", "id": "stampValue"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Stamping"], "extent": [87116, 87131], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [87955, 88122], "text": ["Given a sequence of child items (nodes, network boxes, sticky notes, etc),\n    save them to the clipboard so they can be pasted into this or another\n    network."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [88133, 88226], "text": ["A sequence of ", {"text": "", "value": "/hom/hou/NetworkMovableItem", "fallback_text": "hou.NetworkMovableItem", "fullpath": "/hom/hou/NetworkMovableItem", "scheme": "Hom", "type": "link"}, "s that are children of this\n        node."]}], "indent": 4, "type": "dt", "extent": [88122, 88133], "text": ["items"]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [88226, 88443], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if any of the nodes or network boxes\n    are node children of this node.\n    Raises ", {"text": "", "value": "/hom/hou/PermissionError", "fallback_text": "hou.PermissionError", "fullpath": "/hom/hou/PermissionError", "scheme": "Hom", "type": "link"}, " if you do not have permission to read\n    the contents of this node."]}], "indent": 0, "text": [{"text": ["copyItemsToClipboard(self, items)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::copyItemsToClipboard"}, "extent": [87870, 87910], "type": "methods_item", "id": "copyItemsToClipboard"}, {"body": [{"indent": 4, "type": "para", "extent": [88583, 88771], "text": ["Given a sequence of child items (nodes, network boxes, sticky notes, etc),\n    save a file containing those items.  You can load this file using\n    ", {"fragment": "#loadItemsFromFile", "text": "", "value": "/hom/hou/Node#loadItemsFromFile", "fallback_text": "hou.Node.loadItemsFromFile", "fullpath": "/hom/hou/Node#loadItemsFromFile", "scheme": "Hom", "type": "link"}, "."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [88782, 88875], "text": ["A sequence of ", {"text": "", "value": "/hom/hou/NetworkMovableItem", "fallback_text": "hou.NetworkMovableItem", "fullpath": "/hom/hou/NetworkMovableItem", "scheme": "Hom", "type": "link"}, "s that are children of this\n        node."]}], "indent": 4, "type": "dt", "extent": [88771, 88782], "text": ["items"]}, {"body": [{"indent": 8, "type": "para", "extent": [88890, 89001], "text": ["The name of the file to write the contents to.  You can use any\n        extension for this file name."]}], "indent": 4, "type": "dt", "extent": [88875, 88890], "text": ["file_name"]}, {"body": [{"indent": 8, "type": "para", "extent": [89025, 89462], "text": ["Set to ", {"text": ["True"], "type": "code"}, " to save simplified definitions for HDAs into the file\n        along with the child nodes. Doing this allows the generated file to\n        be safely loaded into any houdini session, even if the assets used\n        in the file are not already loaded into the houdini session. Depending\n        on the use of the generated file, this information is often not\n        required and makes the files unnecessarily large."]}], "indent": 4, "type": "dt", "extent": [89001, 89025], "text": ["save_hda_fallbacks"]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [89462, 89719], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if any of the nodes or network boxes\n    are node children of this node, or if the file could not be written to.\n    Raises ", {"text": "", "value": "/hom/hou/PermissionError", "fallback_text": "hou.PermissionError", "fullpath": "/hom/hou/PermissionError", "scheme": "Hom", "type": "link"}, " if you do not have permission to read\n    the contents of this node."]}], "indent": 0, "text": [{"text": ["saveItemsToFile(self, items, file_name, save_hda_fallbacks = False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::saveItemsToFile", "replaces": "/commands/opwrite"}, "extent": [88443, 88516], "type": "methods_item", "id": "saveItemsToFile"}, {"body": [{"indent": 4, "type": "para", "extent": [89852, 90082], "text": ["Combines separate lists of nods and network boxes into a single sequence,\n    and calls ", {"fragment": "#saveItemsToFile", "text": "", "value": "/hom/hou/Node#saveItemsToFile", "fallback_text": "hou.Node.saveItemsToFile", "fullpath": "/hom/hou/Node#saveItemsToFile", "scheme": "Hom", "type": "link"}, ". This method is provided for\n    backward compatibility. New code should call ", {"text": ["saveItemsToFile"], "type": "code"}, " directly."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [90093, 90164], "text": ["A sequence of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}, "s that are children of this node."]}], "indent": 4, "type": "dt", "extent": [90082, 90093], "text": ["nodes"]}, {"body": [{"indent": 8, "type": "para", "extent": [90183, 90404], "text": ["A sequence of ", {"text": "", "value": "/hom/hou/NetworkBox", "fallback_text": "hou.NetworkBox", "fullpath": "/hom/hou/NetworkBox", "scheme": "Hom", "type": "link"}, "es that are contained in this node.\n        Note that the contents of the network boxes are not automatically\n        saved, so it is up to you to put them in the list of nodes."]}], "indent": 4, "type": "dt", "extent": [90164, 90183], "text": ["network_boxes"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": [{"text": ["saveChildrenToFile(self, nodes, network_boxes, file_name)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::saveChildrenToFile", "replaces": "/commands/opwrite"}, "extent": [89719, 89782], "type": "methods_item", "id": "saveChildrenToFile"}, {"body": [{"indent": 4, "type": "para", "extent": [90540, 90653], "text": ["Load the contents of a file (saved with ", {"fragment": "#saveItemsToFile", "text": "", "value": "/hom/hou/Node#saveItemsToFile", "fallback_text": "hou.Node.saveItemsToFile", "fullpath": "/hom/hou/Node#saveItemsToFile", "scheme": "Hom", "type": "link"}, ")\n    into the contents of this node."]}, {"indent": 4, "type": "para", "extent": [90653, 90969], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the file does not exist or it is not\n    the correct type of file.  Raises ", {"text": "", "value": "/hom/hou/PermissionError", "fallback_text": "hou.PermissionError", "fullpath": "/hom/hou/PermissionError", "scheme": "Hom", "type": "link"}, " if this\n    node is a locked instance of a digital asset.  Raises ", {"text": "", "value": "/hom/hou/LoadWarning", "fallback_text": "hou.LoadWarning", "fullpath": "/hom/hou/LoadWarning", "scheme": "Hom", "type": "link"}, "\n    if the load succeeds but with warnings and ", {"text": ["ignore_load_warnings"], "type": "code"}, " is\n    ", {"text": ["False"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["loadItemsFromFile(self, file_name, ignore_load_warnings=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::loadItemsFromFile", "replaces": "/commands/opread"}, "extent": [90404, 90472], "type": "methods_item", "id": "loadItemsFromFile"}, {"body": [{"indent": 4, "type": "para", "extent": [91111, 91248], "text": ["Calls ", {"fragment": "#loadItemsFromFile", "text": "", "value": "/hom/hou/Node#loadItemsFromFile", "fallback_text": "hou.Node.loadItemsFromFile", "fullpath": "/hom/hou/Node#loadItemsFromFile", "scheme": "Hom", "type": "link"}, ". Provided for backward\n    compatibility. New code should call ", {"text": ["loadItemsFromFile"], "type": "code"}, " directly."]}], "indent": 0, "text": [{"text": ["loadChildrenFromFile(self, file_name, ignore_load_warnings=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::loadChildrenFromFile", "replaces": "/commands/opread"}, "extent": [90969, 91040], "type": "methods_item", "id": "loadChildrenFromFile"}, {"body": [{"indent": 4, "type": "para", "extent": [91348, 91672], "text": ["Load the contents of a file saved with ", {"fragment": "#copyItemsToClipboard", "text": "", "value": "/hom/hou/Node#copyItemsToClipboard", "fallback_text": "hou.Node.copyItemsToClipboard", "fullpath": "/hom/hou/Node#copyItemsToClipboard", "scheme": "Hom", "type": "link"}, "\n    into the contents of this node. If the ", {"text": ["position"], "type": "code"}, " parameter is given as a\n    tuple of two float values (or equivalent, like a ", {"text": "", "value": "/hom/hou/Vector2", "fallback_text": "hou.Vector2", "fullpath": "/hom/hou/Vector2", "scheme": "Hom", "type": "link"}, "), the\n    pasted items are moved such that they are centered around the provided\n    position."]}, {"indent": 4, "type": "para", "extent": [91672, 91901], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if this node is not a network, or if\n    there are errors loading the items from the clipboard. Raises\n    ", {"text": "", "value": "/hom/hou/PermissionError", "fallback_text": "hou.PermissionError", "fullpath": "/hom/hou/PermissionError", "scheme": "Hom", "type": "link"}, " if this node is a locked instance of a\n    digital asset."]}], "indent": 0, "text": [{"text": ["pasteItemsFromClipboard(self, position = None)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::pasteItemsFromClipboard"}, "extent": [91248, 91300], "type": "methods_item", "id": "pasteItemsFromClipboard"}, {"body": [{"indent": 4, "type": "para", "extent": [92196, 92254], "text": ["Prints the Python code necessary to recreate a node."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [92267, 92424], "text": ["Do not set values if they are the parameter\u2019s default.  Applies to the\n        contents of the node if either recurse or save_box_contents is True."]}], "indent": 4, "type": "dt", "extent": [92254, 92267], "text": [{"text": ["brief"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [92439, 92500], "text": ["Recursively apply to the entire operator hierarchy."]}], "indent": 4, "type": "dt", "extent": [92424, 92439], "text": [{"text": ["recurse"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [92525, 92567], "text": ["Script the contents of the node."]}], "indent": 4, "type": "dt", "extent": [92500, 92525], "text": [{"text": ["save_box_contents"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [92593, 92717], "text": ["Only output channels.  Applies to the contents of the node if either\n        recurse or save_box_contents is True."]}], "indent": 4, "type": "dt", "extent": [92567, 92593], "text": [{"text": ["save_channels_only"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [92747, 92967], "text": ["Generate a creation script for the node.  If set to False, the\n        generated script assumes that the network box already exists.  When set\n        to True, the script will begin by creating the network box."]}], "indent": 4, "type": "dt", "extent": [92717, 92747], "text": [{"text": ["save_creation_commands"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [92994, 93172], "text": ["Output channel and key times in samples (frames) instead of seconds.\n        Applies to the contents of the node if either recurse or\n        save_box_contents is True."]}], "indent": 4, "type": "dt", "extent": [92967, 92994], "text": [{"text": ["save_keys_in_frames"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [93201, 93379], "text": ["Evaluate parameters, saving their values instead of the expressions.\n        Applies to the contents of the node if either recurse or\n        save_box_contents is True."]}], "indent": 4, "type": "dt", "extent": [93172, 93201], "text": [{"text": ["save_parm_values_only"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [93403, 93650], "text": ["Save spare parameters as well.  When save_creation_commands is True,\n        commands for creating spare parameters will also be output.  Applies to\n        the contents of the node if either recurse or save_box_contents is\n        True."]}], "indent": 4, "type": "dt", "extent": [93379, 93403], "text": [{"text": ["save_spare_parms"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [93671, 93771], "text": ["If a function_name is specified, the output will be wrapped in a Python\n        function."]}], "indent": 4, "type": "dt", "extent": [93650, 93671], "text": [{"text": ["function_name"], "type": "code"}]}], "container": true, "type": "dt_group"}], "indent": 0, "text": [{"text": ["asCode(self, brief=False, recurse=False, save_channels_only=False, save_creation_commands=True, save_keys_in_frames=False, save_outgoing_wires=False, save_parm_values_only=False, save_spare_parms=True, function_name=None)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::asCode", "replaces": "/commands/opscript"}, "extent": [91901, 92137], "type": "methods_item", "id": "asCode"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Serialization"], "extent": [87848, 87870], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [93868, 93913], "text": ["Implements ", {"text": ["=="], "type": "code"}, " between ", {"text": ["Node"], "type": "code"}, " objects."]}, {"indent": 4, "type": "para", "extent": [93913, 93980], "text": ["For example,  hou.root() == hou.node(\"/\") will return ", {"text": ["True"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [93980, 94355], "text": ["There can be multiple Python ", {"text": ["Node"], "type": "code"}, " objects for the same Houdini node.\n    Two identical calls to ", {"text": ["hou.node()"], "type": "code"}, " will return different Python ", {"text": ["Node"], "type": "code"}, "\n    objects, with each representing the same Houdini node. Comparing these nodes\n    using ", {"text": ["=="], "type": "code"}, " (which calls ", {"text": ["__eq__"], "type": "code"}, ") will return ", {"text": ["True"], "type": "code"}, ", while comparing them\n    using ", {"text": ["is"], "type": "code"}, " (the object identity test) will return ", {"text": ["False"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["__eq__(self, node)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::operator==(HOM_Node*)"}, "extent": [93787, 93822], "type": "methods_item", "id": "__eq__"}, {"body": [{"indent": 4, "type": "para", "extent": [94435, 94497], "text": ["Implements ", {"text": ["!="], "type": "code"}, " between ", {"text": ["Node"], "type": "code"}, " objects. See ", {"text": ["__eq__()"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["__ne__(self, node)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::operator!=(HOM_Node*)"}, "extent": [94355, 94389], "type": "methods_item", "id": "__ne__"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Operators"], "extent": [93771, 93787], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [94611, 94754], "text": ["Registers a Python callback that Houdini will call whenever a particular action, or event, occurs on ", {"text": ["this particular node instance"], "type": "em"}, "."]}, {"indent": 4, "type": "para", "extent": [94754, 95062], "text": ["Callbacks only persist for the current session. For example, they are not saved to the ", {"text": [".hip"], "type": "code"}, " file. If you want persistent callbacks in every session, you can add them in code in ", {"text": ["456.py"], "type": "code"}, " (runs when the user opens a ", {"text": [".hip"], "type": "code"}, " file). See ", {"text": ["where to add Python scripting"], "fullpath": "/hom/locations", "scheme": null, "type": "link", "value": "/hom/locations"}, " for more information."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [95081, 95231], "text": ["A sequence of ", {"text": "", "value": "/hom/hou/nodeEventType", "fallback_text": "hou.nodeEventType", "fullpath": "/hom/hou/nodeEventType", "scheme": "Hom", "type": "link"}, " enumeration values describing the event types that will cause Houdini to call the ", {"text": ["callback"], "type": "code"}, " function."]}], "indent": 4, "type": "dt", "extent": [95062, 95081], "text": [{"text": ["event_types"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [95247, 95415], "text": ["A callable Python object, such as a function or bound method. Houdini will call this function whenever one of the event types in ", {"text": ["event_types"], "type": "code"}, " occurs."]}, {"indent": 8, "type": "para", "extent": [95415, 95598], "text": ["Houdini calls the function with an ", {"text": ["event_type"], "type": "code"}, " keyword argument containing the ", {"text": "", "value": "/hom/hou/nodeEventType", "fallback_text": "hou.nodeEventType", "fullpath": "/hom/hou/nodeEventType", "scheme": "Hom", "type": "link"}, " value corresponding to the event that triggered the callback."]}, {"indent": 8, "type": "para", "extent": [95598, 95965], "text": ["Houdini will pass additional keyword arguments depending on the event type. For example, in a callback for the ", {"text": ["ParmTupleChanged"], "type": "code"}, " event, Houdini will pass a ", {"text": ["parm_tuple"], "type": "code"}, " keyword argument containing a ", {"text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " reference to the parameter that changed. See ", {"text": "", "value": "/hom/hou/nodeEventType", "fallback_text": "hou.nodeEventType", "fullpath": "/hom/hou/nodeEventType", "scheme": "Hom", "type": "link"}, " for the extra arguments (if any) passed for each event type."]}, {"indent": 8, "type": "para", "extent": [95965, 96154], "text": ["You can add ", {"text": ["**kwargs"], "type": "code"}, " to the argument list to accept all keyword arguments, to allow the same callback to be used for different events, or to be safe from future changes:"]}, {"lang": "python", "indent": 8, "type": "pre", "extent": [96154, 96261], "text": ["\n        def event_callback(event_type, **kwargs):\n            ...\n        "]}], "indent": 4, "type": "dt", "extent": [95231, 95247], "text": [{"text": ["callback"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [96272, 96535], "text": ["If you try to add the exact same callback function more than once, Houdini will still only call the function only once in response to an event. However, it may be useful to \"add\" the same function if you want to register it with different ", {"text": ["event_types"], "type": "code"}, "."]}], "indent": 4, "role": "item", "type": "note", "extent": [96261, 96272]}], "container": true, "role": "item_group", "type": "note_group"}, {"indent": 4, "type": "para", "extent": [96535, 96622], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the ", {"text": ["event_types"], "type": "code"}, " list argument is\n    empty."]}, {"indent": 4, "type": "para", "extent": [96622, 96730], "text": ["The following example shows to set up a function that\u2019s called whenever a certain node\u2019s name changes:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [96730, 96970], "text": ["\n    \n    def name_changed(node, event_type, **kwargs):\n        print(\"The geometry object is now named\", node.name())\n    \n    hou.node(\"/obj/geo1\").addEventCallback(hou.nodeEventType.NameChanged, name_changed)\n    "]}, {"indent": 4, "type": "para", "extent": [96970, 97064], "text": ["See also ", {"fragment": "#removeEventCallback", "text": "", "value": "/hom/hou/Node#removeEventCallback", "fallback_text": "hou.Node.removeEventCallback", "fullpath": "/hom/hou/Node#removeEventCallback", "scheme": "Hom", "type": "link"}, " and ", {"fragment": "#removeAllEventCallbacks", "text": "", "value": "/hom/hou/Node#removeAllEventCallbacks", "fallback_text": "hou.Node.removeAllEventCallbacks", "fullpath": "/hom/hou/Node#removeAllEventCallbacks", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["addEventCallback(self, event_types, callback)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::addEventCallback"}, "extent": [94513, 94565], "type": "methods_item", "id": "addEventCallback"}, {"body": [{"indent": 4, "type": "para", "extent": [97162, 97468], "text": ["Given a callback that was previously added on this node and a sequence\n    of ", {"text": "", "value": "/hom/hou/nodeEventType", "fallback_text": "hou.nodeEventType", "fullpath": "/hom/hou/nodeEventType", "scheme": "Hom", "type": "link"}, " enumerated values, remove those event types from\n    the set of event types for the callback.  If the remaining set of event\n    types is empty, the callback will be removed entirely from this node."]}, {"indent": 4, "type": "para", "extent": [97468, 97557], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the callback had not been previously\n    added."]}, {"indent": 4, "type": "para", "extent": [97557, 97620], "text": ["See ", {"fragment": "#addEventCallback", "text": "", "value": "/hom/hou/Node#addEventCallback", "fallback_text": "hou.Node.addEventCallback", "fullpath": "/hom/hou/Node#addEventCallback", "scheme": "Hom", "type": "link"}, " for more information."]}], "indent": 0, "text": [{"text": ["removeEventCallback(self, event_types, callback)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::removeEventCallback"}, "extent": [97064, 97118], "type": "methods_item", "id": "removeEventCallback"}, {"body": [{"indent": 4, "type": "para", "extent": [97703, 97771], "text": ["Remove all event callbacks for all event types from this node."]}, {"indent": 4, "type": "para", "extent": [97771, 97834], "text": ["See ", {"fragment": "#addEventCallback", "text": "", "value": "/hom/hou/Node#addEventCallback", "fallback_text": "hou.Node.addEventCallback", "fullpath": "/hom/hou/Node#addEventCallback", "scheme": "Hom", "type": "link"}, " for more information."]}], "indent": 0, "text": [{"text": ["removeAllEventCallbacks(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::removeAllEventCallbacks"}, "extent": [97620, 97655], "type": "methods_item", "id": "removeAllEventCallbacks"}, {"body": [{"indent": 4, "type": "para", "extent": [97954, 98095], "text": ["Return a tuple of all the Python callbacks that have been registered with\n    this node with calls to ", {"fragment": "#addEventCallback", "text": "", "value": "/hom/hou/Node#addEventCallback", "fallback_text": "hou.Node.addEventCallback", "fullpath": "/hom/hou/Node#addEventCallback", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["eventCallbacks()"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of (", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/nodeEventType", "fallback_text": "hou.nodeEventType", "fullpath": "/hom/hou/nodeEventType", "scheme": "Hom", "type": "link"}, ", callback)"], "role": "item", "attrs": {"cppname": "HOM_ui::eventCallbacks"}, "extent": [97834, 97917], "type": "methods_item", "id": "eventCallbacks"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Callbacks"], "extent": [94497, 94513], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [98189, 98240], "text": ["Add/set a named string on this node instance."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [98252, 98414], "text": ["A unique name (key) for the user-defined data.  By using different\n        names, you can attach multiple pieces of user-defined data to a node."]}], "indent": 4, "type": "dt", "extent": [98240, 98252], "text": [{"text": ["name"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "extent": [98427, 98457], "text": ["The string to store."]}], "indent": 4, "type": "dt", "extent": [98414, 98427], "text": [{"text": ["value"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "extent": [98457, 98592], "text": ["This name/value pair is stored with the hip file and is included in the\n    output from ", {"text": "", "value": "/commands/opscript", "fallback_text": "opscript", "fullpath": "/commands/opscript", "scheme": "Cmd", "type": "link"}, " and ", {"fragment": "#asCode", "text": "", "value": "/hom/hou/Node#asCode", "fallback_text": "hou.Node.asCode", "fullpath": "/hom/hou/Node#asCode", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 4, "type": "para", "extent": [98592, 98685], "text": ["The following example illustrates how to set, access, and delete\n    user-defined data:"]}, {"lang": "pycon", "indent": 4, "type": "pre", "extent": [98685, 99032], "text": ["\n    >>> n = hou.node(\"/obj\").createNode(\"geo\")\n    >>> n.setUserData(\"my data\", \"my data value\")\n    >>> n.userData(\"my data\")\n    'my data value'\n    >>> n.userDataDict()\n    {'my data': 'my data value'}\n    >>> n.destroyUserData(\"my data\")\n    >>> n.userDataDict()\n    {}\n    >>> print n.userData(\"my data\")\n    None\n    "]}, {"indent": 4, "type": "para", "extent": [99032, 99132], "text": ["See ", {"text": ["per-node user-defined data"], "fullpath": "/hom/nodeuserdata", "scheme": null, "type": "link", "value": "/hom/nodeuserdata"}, " for more information\n    and examples."]}, {"body": [{"body": [{"indent": 8, "type": "para", "extent": [99141, 99326], "text": ["If you prefix a user data key with ", {"text": ["nodeinfo_"], "type": "code"}, ", the key (without the prefix) and the value will be shown as a custom field in the ", {"fragment": "#info", "text": ["node info popup window"], "value": "/network/nodes#info", "fullpath": "/network/nodes#info", "scheme": null, "type": "link"}, "."]}], "indent": 4, "role": "item", "type": "tip", "extent": [99132, 99141]}], "container": true, "role": "item_group", "type": "tip_group"}], "indent": 0, "text": [{"text": ["setUserData(self, name, value)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setUserData"}, "extent": [98111, 98148], "type": "methods_item", "id": "setUserData"}, {"body": [{"indent": 4, "type": "para", "extent": [99421, 99515], "text": ["Return a dictionary containing all the user-defined name/string pairs\n    for this node."]}, {"indent": 4, "type": "para", "extent": [99515, 99573], "text": ["See ", {"fragment": "#setUserData", "text": "", "value": "/hom/hou/Node#setUserData", "fallback_text": "hou.Node.setUserData", "fullpath": "/hom/hou/Node#setUserData", "scheme": "Hom", "type": "link"}, " for more information."]}], "indent": 0, "text": [{"text": ["userDataDict(self, name)"], "type": "code"}, "  \u2192 ", {"text": ["dict"], "type": "code"}, " of ", {"text": ["str"], "type": "code"}, " to ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::userDataDict"}, "extent": [99326, 99384], "type": "methods_item", "id": "userDataDict"}, {"body": [{"indent": 4, "type": "para", "extent": [99651, 99749], "text": ["Return the user-defined data with this name, or ", {"text": ["None"], "type": "code"}, " if no data with this\n    name exists."]}, {"indent": 4, "type": "para", "extent": [99749, 99807], "text": ["See ", {"fragment": "#setUserData", "text": "", "value": "/hom/hou/Node#setUserData", "fallback_text": "hou.Node.setUserData", "fullpath": "/hom/hou/Node#setUserData", "scheme": "Hom", "type": "link"}, " for more information."]}, {"indent": 4, "type": "para", "extent": [99807, 99854], "text": ["This method can be implemented as follows:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [99854, 99958], "text": ["\n    def userData(self, name):\n        return self.userDataDict().get(name)\n    "]}], "indent": 0, "text": [{"text": ["userData(self, name)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}, " or ", {"text": ["None"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::userData"}, "extent": [99573, 99618], "type": "methods_item", "id": "userData"}, {"body": [{"indent": 4, "type": "para", "extent": [100032, 100082], "text": ["Remove the user-defined data with this name."]}, {"indent": 4, "type": "para", "extent": [100082, 100140], "text": ["See ", {"fragment": "#setUserData", "text": "", "value": "/hom/hou/Node#setUserData", "fallback_text": "hou.Node.setUserData", "fullpath": "/hom/hou/Node#setUserData", "scheme": "Hom", "type": "link"}, " for more information."]}, {"indent": 4, "type": "para", "extent": [100140, 100217], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if no user data with this name exists."]}], "indent": 0, "text": [{"text": ["destroyUserData(self, name)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::destroyUserData"}, "extent": [99958, 99992], "type": "methods_item", "id": "destroyUserData"}, {"body": [{"indent": 4, "type": "para", "extent": [100301, 100440], "text": ["Add/set a named value on this node instance.  Unlike ", {"text": ["setUserData"], "type": "code"}, ",\n    values set using this method are not saved with the hip file."]}, {"indent": 4, "type": "para", "extent": [100440, 100699], "text": [{"text": ["name"], "type": "code"}, ":\n    A unique name (key) for the user-defined data.  By using different\n    names, you can attach multiple pieces of user-defined data to a node.\n    ", {"text": ["value"], "type": "code"}, ":\n    The value to store.  Unlike ", {"text": ["setUserData"], "type": "code"}, ", this value may be any Python\n    object."]}, {"indent": 4, "type": "para", "extent": [100699, 100909], "text": ["This name/value pair is not stored with the hip file.  It is useful for\n    nodes implemented in Python that want to save temporary values between\n    cooks, to avoid recomputing them on subsequent cooks."]}, {"indent": 4, "type": "para", "extent": [100909, 101009], "text": ["The following example illustrates how to set, access, and delete\n    cached user-defined data:"]}, {"lang": "pycon", "indent": 4, "type": "pre", "extent": [101009, 101431], "text": ["\n    >>> n = hou.node(\"/obj\").createNode(\"geo\")\n    >>> n.setCachedUserData(\"my data\", [1, 2, {\"a\": \"b\", \"c\": \"d\"}])\n    >>> n.cachedUserData(\"my data\")\n    [1, 2, {'a': 'b', 'c': 'd'}]\n    >>> n.cachedUserDataDict()\n    {'my data': [1, 2, {'a': 'b', 'c': 'd'}]}\n    >>> n.destroyCachedUserData(\"my data\")\n    >>> n.cachedUserDataDict()\n    {}\n    >>> print n.cachedUserData(\"my data\")\n    None\n    "]}, {"indent": 4, "type": "para", "extent": [101431, 101526], "text": ["See ", {"text": ["per-node user-defined data"], "fullpath": "/hom/nodeuserdata", "scheme": "Hom", "type": "link", "value": "/hom/nodeuserdata"}, " for more information\n    and examples."]}], "indent": 0, "text": [{"text": ["setCachedUserData(self, name, value)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setCachedUserData"}, "extent": [100217, 100259], "type": "methods_item", "id": "setCachedUserData"}, {"body": [{"indent": 4, "type": "para", "extent": [101633, 101727], "text": ["Return a dictionary containing all the user-defined name/string pairs\n    for this node."]}, {"indent": 4, "type": "para", "extent": [101727, 101791], "text": ["See ", {"fragment": "#setCachedUserData", "text": "", "value": "/hom/hou/Node#setCachedUserData", "fallback_text": "hou.Node.setCachedUserData", "fullpath": "/hom/hou/Node#setCachedUserData", "scheme": "Hom", "type": "link"}, " for more information."]}], "indent": 0, "text": [{"text": ["cachedUserDataDict(self, name)"], "type": "code"}, "  \u2192 ", {"text": ["dict"], "type": "code"}, " of ", {"text": ["str"], "type": "code"}, " to ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::cachedUserDataDict"}, "extent": [101526, 101590], "type": "methods_item", "id": "cachedUserDataDict"}, {"body": [{"indent": 4, "type": "para", "extent": [101881, 101986], "text": ["Return the user-defined cached data with this name, or ", {"text": ["None"], "type": "code"}, " if no data\n    with this name exists."]}, {"indent": 4, "type": "para", "extent": [101986, 102050], "text": ["See ", {"fragment": "#setCachedUserData", "text": "", "value": "/hom/hou/Node#setCachedUserData", "fallback_text": "hou.Node.setCachedUserData", "fullpath": "/hom/hou/Node#setCachedUserData", "scheme": "Hom", "type": "link"}, " for more information."]}, {"indent": 4, "type": "para", "extent": [102050, 102097], "text": ["This method can be implemented as follows:"]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [102097, 102213], "text": ["\n    def cachedUserData(self, name):\n        return self.cachedUserDataDict().get(name)\n    "]}, {"indent": 4, "type": "para", "extent": [102213, 102383], "text": ["Note that ", {"text": ["None"], "type": "code"}, " is a valid value for a key, so the most reliable way to\n    check if a key is valid is to check if it is in the result of\n    ", {"text": ["cachedUserDataDict"], "type": "code"}, ":"]}, {"lang": "pycon", "indent": 4, "type": "pre", "extent": [102383, 102779], "text": ["\n    >>> n = hou.node(\"/obj\").createNode(\"geo\")\n    >>> n.cachedUserDataDict()\n    {}\n    >>> print n.cachedUserData(\"foo\")\n    None\n    >>> \"foo\" in n.cachedUserDataDict()\n    False\n    >>> n.setCachedUserData(\"foo\", None)\n    >>> n.cachedUserDataDict()\n    {'foo': None}\n    >>> print n.cachedUserData(\"foo\")\n    None\n    >>> \"foo\" in n.cachedUserDataDict()\n    True\n    "]}], "indent": 0, "text": [{"text": ["cachedUserData(self, name)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}, " or ", {"text": ["None"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::cachedUserData"}, "extent": [101791, 101842], "type": "methods_item", "id": "cachedUserData"}, {"body": [{"indent": 4, "type": "para", "extent": [102865, 102922], "text": ["Remove the user-defined cached data with this name."]}, {"indent": 4, "type": "para", "extent": [102922, 102986], "text": ["See ", {"fragment": "#setCachedUserData", "text": "", "value": "/hom/hou/Node#setCachedUserData", "fallback_text": "hou.Node.setCachedUserData", "fullpath": "/hom/hou/Node#setCachedUserData", "scheme": "Hom", "type": "link"}, " for more information."]}, {"indent": 4, "type": "para", "extent": [102986, 103063], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if no user data with this name exists."]}], "indent": 0, "text": [{"text": ["destroyCachedUserData(self, name)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::destroyCachedUserData"}, "extent": [102779, 102819], "type": "methods_item", "id": "destroyCachedUserData"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["User data"], "extent": [98095, 98111], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [103176, 103307], "text": ["Return the names of all data blocks stored on this node that are of the\n    data type specified by the ", {"text": ["blocktype"], "type": "code"}, " parameter."]}, {"indent": 4, "type": "para", "extent": [103307, 103654], "text": ["Data blocks are similar to user data in that they can contain any extra\n    data that may be useful to attach to a specific node. They differ from user\n    data in that data blocks are designed to more efficiently handle large\n    blocks of data. Data blocks can also contain binary data, and have a data\n    type associated with each block."]}], "indent": 0, "text": [{"text": ["dataBlockKeys(self, blocktype)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::dataBlockKeys"}, "extent": [103081, 103138], "type": "methods_item", "id": "dataBlockKeys"}, {"body": [{"indent": 4, "type": "para", "extent": [103731, 103804], "text": ["Return the data type of the block specified by the ", {"text": ["key"], "type": "code"}, " parameter."]}, {"indent": 4, "type": "para", "extent": [103804, 103913], "text": ["Raises ", {"text": "", "value": "/hom/hou/ValueError", "fallback_text": "hou.ValueError", "fullpath": "/hom/hou/ValueError", "scheme": "Hom", "type": "link"}, " if the provided key is not associated with any\n    data block on this node."]}], "indent": 0, "text": [{"text": ["dataBlockType(self, key)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::dataBlockType"}, "extent": [103654, 103693], "type": "methods_item", "id": "dataBlockType"}, {"body": [{"indent": 4, "type": "para", "extent": [103982, 104187], "text": ["Returns the data block stored under the given key. This method will only\n    work if the specified data block is has a type that can be represented by\n    a python object. Otherwise None is returned."]}, {"indent": 4, "type": "para", "extent": [104187, 104296], "text": ["Raises ", {"text": "", "value": "/hom/hou/ValueError", "fallback_text": "hou.ValueError", "fullpath": "/hom/hou/ValueError", "scheme": "Hom", "type": "link"}, " if the provided key is not associated with any\n    data block on this node."]}], "indent": 0, "text": [{"text": ["dataBlock(self, key)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::dataBlock"}, "extent": [103913, 103948], "type": "methods_item", "id": "dataBlock"}, {"body": [{"indent": 4, "type": "para", "extent": [104380, 104501], "text": ["Stores the provided data block on the node under the provided key name,\n    marking it with the provided data type."]}, {"indent": 4, "type": "para", "extent": [104501, 104593], "text": ["Passing a block value of ", {"text": ["None"], "type": "code"}, " will remove any data block with the\n    specified key."]}], "indent": 0, "text": [{"text": ["setDataBlock(self, key, block, blocktype)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setDataBlock"}, "extent": [104296, 104343], "type": "methods_item", "id": "setDataBlock"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Data blocks"], "extent": [103063, 103081], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [104699, 104820], "text": ["Return the simulation defined by this DOP network node.  This raises\n    an exception if this is not a dop network."]}], "indent": 0, "text": [{"text": ["simulation(self)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/DopSimulation", "fallback_text": "hou.DopSimulation", "fullpath": "/hom/hou/DopSimulation", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_DopNetNode::simulation"}, "extent": [104608, 104658], "type": "methods_item", "id": "simulation"}, {"body": [{"indent": 4, "type": "para", "extent": [104994, 105144], "text": ["Given a ", {"text": "", "value": "/hom/hou/DopObject", "fallback_text": "hou.DopObject", "fullpath": "/hom/hou/DopObject", "scheme": "Hom", "type": "link"}, ", return a tuple of DOP nodes that processed\n    that object.  This raises an exception if this is not a dopnetwork."]}], "indent": 0, "text": [{"text": ["findNodesThatProcessedObject(self, dop_object)"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of ", {"text": "", "value": "/hom/hou/DopNode", "fallback_text": "hou.DopNode", "fullpath": "/hom/hou/DopNode", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_DopNetNode::findNodesThatProcessedObject", "replaces": "/expressions/dopnodeobjs"}, "extent": [104820, 104904], "type": "methods_item", "id": "findNodesThatProcessedObject"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Dynamics"], "extent": [104593, 104608], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [105238, 105310], "text": ["Return True if the specified flag is readable and False otherwise."]}, {"indent": 4, "type": "para", "extent": [105310, 105359], "text": [{"text": ["flag"], "type": "code"}, " must be a ", {"text": "", "value": "/hom/hou/nodeFlag", "fallback_text": "hou.nodeFlag", "fullpath": "/hom/hou/nodeFlag", "scheme": "Hom", "type": "link"}, " value. "]}], "indent": 0, "text": [{"text": ["isFlagReadable(self, flag)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::isFlagReadable"}, "extent": [105156, 105199], "type": "methods_item", "id": "isFlagReadable"}, {"body": [{"indent": 4, "type": "para", "extent": [105440, 105512], "text": ["Return True if the specified flag is writable and False otherwise."]}, {"indent": 4, "type": "para", "extent": [105512, 105560], "text": [{"text": ["flag"], "type": "code"}, " must be a ", {"text": "", "value": "/hom/hou/nodeFlag", "fallback_text": "hou.nodeFlag", "fullpath": "/hom/hou/nodeFlag", "scheme": "Hom", "type": "link"}, " value."]}], "indent": 0, "text": [{"text": ["isFlagWritable(self, flag)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::isFlagWritable"}, "extent": [105359, 105401], "type": "methods_item", "id": "isFlagWritable"}, {"body": [{"indent": 4, "type": "para", "extent": [105645, 105690], "text": ["Returns the value of the specific flag."]}, {"indent": 4, "type": "para", "extent": [105690, 105739], "text": [{"text": ["flag"], "type": "code"}, " must be a ", {"text": "", "value": "/hom/hou/nodeFlag", "fallback_text": "hou.nodeFlag", "fullpath": "/hom/hou/nodeFlag", "scheme": "Hom", "type": "link"}, " value. "]}], "indent": 0, "text": [{"text": ["isGenericFlagSet(self, flag)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::isGenericFlagSet"}, "extent": [105560, 105604], "type": "methods_item", "id": "isGenericFlagSet"}, {"body": [{"indent": 4, "type": "para", "extent": [105817, 105897], "text": ["Sets the value of the specified flag based on the ", {"text": ["bool"], "type": "code"}, " ", {"text": ["value"], "type": "code"}, " argument."]}, {"indent": 4, "type": "para", "extent": [105897, 105950], "text": [{"text": ["flag"], "type": "code"}, " must be a ", {"text": "", "value": "/hom/hou/nodeFlag", "fallback_text": "hou.nodeFlag", "fullpath": "/hom/hou/nodeFlag", "scheme": "Hom", "type": "link"}, " value. "]}], "indent": 0, "text": [{"text": ["setGenericFlag(self, flag, value)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_Node::setGenericFlag"}, "extent": [105739, 105778], "type": "methods_item", "id": "setGenericFlag"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Flags"], "extent": [105144, 105156], "container": true, "type": "h", "id": null}], "indent": 0, "level": 1, "text": "Methods", "role": "section", "extent": [2121, 2130], "container": true, "type": "methods_section", "id": "methods"}], "summary": ["The base class for all nodes in Houdini (objects, SOPs, COPs, etc.)  An instance of this class corresponds to exactly one instance of a node in Houdini."], "type": "root", "attrs": {"cppname": "HOM_Node", "type": "homclass", "superclass": "hou.NetworkMovableItem", "group": "nodes"}, "title": [{"text": "hou.", "type": "supertitle"}, "Node"]}