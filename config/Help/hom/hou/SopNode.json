{"body": [{"indent": 0, "text": [{"text": "hou.", "type": "supertitle"}, "SopNode"], "type": "title", "extent": [0, 16], "level": 0}, {"indent": 0, "type": "summary", "extent": [89, 123], "text": ["Represents a surface node."]}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [227, 350], "text": ["Return the geometry computed by this SOP node.  If the SOP has not already\n    cooked, this method will cook the SOP."]}, {"indent": 4, "type": "para", "extent": [350, 483], "text": ["The returned Geometry object is not frozen.  See ", {"fragment": "#freeze", "text": "", "value": "/hom/hou/Geometry#freeze", "fallback_text": "hou.Geometry.freeze", "fullpath": "/hom/hou/Geometry#freeze", "scheme": "Hom", "type": "link"}, "\n    for more information on frozen Geometry objects."]}, {"indent": 4, "type": "para", "extent": [483, 754], "text": ["You can optionally specify the ", {"text": ["output_index"], "type": "code"}, " argument to request the\n    geometry attached to another output on the node.  This only applies to SOP\n    nodes with multiple outputs.  If there is no geometry for the specified\n    output index then None is returned. "]}], "indent": 0, "text": [{"text": ["geometry(self, output_index=0)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Geometry", "fallback_text": "hou.Geometry", "fullpath": "/hom/hou/Geometry", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::geometry"}, "extent": [132, 191], "type": "methods_item", "id": "geometry"}, {"body": [{"indent": 4, "type": "para", "extent": [869, 1022], "text": ["Return the geometry computed by this SOP node cooked at the specified\n    frame.  If the SOP has not already cooked, this method will cook the SOP."]}, {"indent": 4, "type": "para", "extent": [1022, 1151], "text": ["The returned Geometry object is frozen.  See ", {"fragment": "#freeze", "text": "", "value": "/hom/hou/Geometry#freeze", "fallback_text": "hou.Geometry.freeze", "fullpath": "/hom/hou/Geometry#freeze", "scheme": "Hom", "type": "link"}, "\n    for more information on frozen Geometry objects."]}, {"indent": 4, "type": "para", "extent": [1151, 1422], "text": ["You can optionally specify the ", {"text": ["output_index"], "type": "code"}, " argument to request the\n    geometry attached to another output on the node.  This only applies to SOP\n    nodes with multiple outputs.  If there is no geometry for the specified\n    output index then None is returned. "]}], "indent": 0, "text": [{"text": ["geometryAtFrame(self, frame, output_index=0)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Geometry", "fallback_text": "hou.Geometry", "fullpath": "/hom/hou/Geometry", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::geometryAtFrame"}, "extent": [754, 826], "type": "methods_item", "id": "geometryAtFrame"}, {"body": [{"indent": 4, "type": "para", "extent": [1517, 1600], "text": ["Return the geometry that is connected to the node input specified by ", {"text": ["index"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "extent": [1600, 1733], "text": ["The returned Geometry object is not frozen.  See ", {"fragment": "#freeze", "text": "", "value": "/hom/hou/Geometry#freeze", "fallback_text": "hou.Geometry.freeze", "fullpath": "/hom/hou/Geometry#freeze", "scheme": "Hom", "type": "link"}, "\n    for more information on frozen Geometry objects."]}], "indent": 0, "text": [{"text": ["inputGeometry(self, index)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Geometry", "fallback_text": "hou.Geometry", "fullpath": "/hom/hou/Geometry", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::inputGeometry"}, "extent": [1422, 1476], "type": "methods_item", "id": "inputGeometry"}, {"body": [{"indent": 4, "type": "para", "extent": [1849, 1963], "text": ["Return the geometry that is connected to the node input specified by ", {"text": ["index"], "type": "code"}, "\n    and at the specified frame."]}, {"indent": 4, "type": "para", "extent": [1963, 2096], "text": ["The returned Geometry object is not frozen.  See ", {"fragment": "#freeze", "text": "", "value": "/hom/hou/Geometry#freeze", "fallback_text": "hou.Geometry.freeze", "fullpath": "/hom/hou/Geometry#freeze", "scheme": "Hom", "type": "link"}, "\n    for more information on frozen Geometry objects."]}], "indent": 0, "text": [{"text": ["inputGeometryAtFrame(self, frame, index)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Geometry", "fallback_text": "hou.Geometry", "fullpath": "/hom/hou/Geometry", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::inputGeometryAtFrame"}, "extent": [1733, 1801], "type": "methods_item", "id": "inputGeometryAtFrame"}, {"body": [{"indent": 4, "type": "para", "extent": [2189, 2298], "text": ["Return the geometry delta stored in this SOP node.  If the SOP has no deltas\n    then None is returned."]}, {"indent": 4, "type": "para", "extent": [2298, 2520], "text": ["If the SOP recooks, the geometry delta objects will update to the SOP\u2019s new\n    geometry delta object. If the SOP is deleted, accessing the geometry delta\n    object will raise a ", {"text": "", "value": "/hom/hou/ObjectWasDeleted", "fallback_text": "hou.ObjectWasDeleted", "fullpath": "/hom/hou/ObjectWasDeleted", "scheme": "Hom", "type": "link"}, " exception."]}], "indent": 0, "text": [{"text": ["geometryDelta(self)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/GeometryDelta", "fallback_text": "hou.GeometryDelta", "fullpath": "/hom/hou/GeometryDelta", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::geometryDelta"}, "extent": [2096, 2148], "type": "methods_item", "id": "geometryDelta"}, {"body": [{"indent": 4, "type": "para", "extent": [2617, 2694], "text": ["Return the current component selection of the specified component type."]}, {"indent": 4, "type": "para", "extent": [2694, 2855], "text": ["This method is deprecated now that component selections are once again\n    managed at the viewer level. See ", {"fragment": "#currentGeometrySelection", "text": "", "value": "/hom/hou/SceneViewer#currentGeometrySelection", "fallback_text": "hou.SceneViewer.currentGeometrySelection", "fullpath": "/hom/hou/SceneViewer#currentGeometrySelection", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["selection(self, selection_type)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Selection", "fallback_text": "hou.Selection", "fullpath": "/hom/hou/Selection", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::selection"}, "extent": [2520, 2580], "type": "methods_item", "id": "selection"}, {"body": [{"indent": 4, "type": "para", "extent": [2930, 3192], "text": ["Sets the current component selection to the supplied value. A separate\n    selection object is stored for each component type, so changing the\n    selection this way may not update the viewport if it is not currently set\n    to show this type of selection."]}, {"indent": 4, "type": "para", "extent": [3192, 3357], "text": ["This method is deprecated now that component selections are once again\n    managed at the viewer level.  See ", {"fragment": "#setCurrentGeometrySelection", "text": "", "value": "/hom/hou/SceneViewer#setCurrentGeometrySelection", "fallback_text": "hou.SceneViewer.setCurrentGeometrySelection", "fullpath": "/hom/hou/SceneViewer#setCurrentGeometrySelection", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["setSelection(self, selection)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::setSelection"}, "extent": [2855, 2890], "type": "methods_item", "id": "setSelection"}, {"body": [{"indent": 4, "type": "para", "extent": [3422, 3618], "text": ["Return this node\u2019s current point.  You would typically call this method\n    from an expression on a node that iterates over a set of points and\n    re-evaluates the parameter for each point."]}, {"indent": 4, "type": "para", "extent": [3618, 4246], "text": ["This method lets you implement the Python equivalent of Hscript\u2019s local\n    variables.  Many of Houdini\u2019s SOPs iterate over a set of points, and\n    for each point they store the current point and then evaluate a parameter.\n    If the parameter contains a local variable, Houdini looks up the SOP\u2019s\n    current point when evaluating that variable.  For example, the point SOP\n    evaluates the ", {"text": ["t"], "type": "code"}, " parameter for each point, and sets that point\u2019s position\n    according to the value of the parameter.  If that parameter contains,\n    say, the local variable $TX, it will evaluate to the x position of the\n    current point."]}, {"indent": 4, "type": "para", "extent": [4246, 4515], "text": ["This method gives you access to the ", {"text": "", "value": "/hom/hou/Point", "fallback_text": "hou.Point", "fullpath": "/hom/hou/Point", "scheme": "Hom", "type": "link"}, " representation of\n    Houdini\u2019s current point.  Using this point you could evaluate the position,\n    an attribute value, or do more complex operations like compute the\n    distance from the point to the origin."]}, {"indent": 4, "type": "para", "extent": [4515, 4670], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if you call this method from outside\n    a SOP parameter expression, or if the SOP does not support local variables."]}, {"indent": 4, "type": "para", "extent": [4670, 4866], "text": ["The following lists Python equivalents for some point-related Hscript\n    expression local variables.  Note that you can also access local variables\n    from Python using ", {"text": "", "value": "/hom/hou/lvar", "fallback_text": "hou.lvar", "fullpath": "/hom/hou/lvar", "scheme": "Hom", "type": "link"}, "."]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [4866, 5658], "text": ["\n    # $PT (Hscript expression) or lvar('PT') (Python):\n    pwd().curPoint().number()\n\n    # $NPT (Hscript expression) or lvar('NPT') (Python):\n    len(pwd().geometry().iterPoints())\n\n    # $TX (Hscript expression) or lvar('TX') (Python):\n    pwd().curPoint().position()[0]\n\n    # $WEIGHT (Hscript expression) or lvar('WEIGHT`) (Python):\n    pwd().curPoint().position()[3]\n\n    # $CR (Hscript expression) or lvar('CR') (Python):\n    pwd().curPoint().attribValue(\"Cd\")[0]\n\n    # $ID (Hscript expression) or lvar('ID') (Python):\n    pwd().curPoint().attribValue(\"id\")\n\n    # $LIFE (Hscript expression) or lvar('LIFE') (Python):\n    pwd().curPoint().attribValue(\"life\")\n\n    # $VX (Hscript expression) or lvar('VX') (Python):\n    pwd().curPoint().attribValue(\"v\")[0]\n    "]}], "indent": 0, "text": [{"text": ["curPoint(self)"], "type": "code"}, "  \u2192 Point"], "role": "item", "attrs": {"cppname": "HOM_SopNode::curPoint"}, "extent": [3357, 3386], "type": "methods_item", "id": "curPoint"}, {"body": [{"indent": 4, "type": "para", "extent": [5736, 5834], "text": ["Set this node\u2019s current point.  You can only call this method from\n    a Python-defined SOP."]}, {"indent": 4, "type": "para", "extent": [5834, 6162], "text": ["See ", {"fragment": "#curPoint", "text": "", "value": "/hom/hou/SopNode#curPoint", "fallback_text": "hou.SopNode.curPoint", "fullpath": "/hom/hou/SopNode#curPoint", "scheme": "Hom", "type": "link"}, " for an explanation of a SOP\u2019s current point.\n    You would use this method to set the current point from inside a SOP\n    written in Python, before you evaluate a parameter containing a local\n    variable referring to the current point.  See ", {"fragment": "#globPoints", "text": "", "value": "/hom/hou/Geometry#globPoints", "fallback_text": "hou.Geometry.globPoints", "fullpath": "/hom/hou/Geometry#globPoints", "scheme": "Hom", "type": "link"}, "\n    for an example."]}, {"indent": 4, "type": "para", "extent": [6162, 6428], "text": ["Note that you can set the current point to None.  In this case,\n    subsequent calls to ", {"fragment": "#curPoint", "text": "", "value": "/hom/hou/SopNode#curPoint", "fallback_text": "hou.SopNode.curPoint", "fullpath": "/hom/hou/SopNode#curPoint", "scheme": "Hom", "type": "link"}, " will raise\n    ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, ".  After a Python SOP is done cooking, Houdini\n    will automatically set the current point back to None."]}, {"indent": 4, "type": "para", "extent": [6428, 6515], "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if called from outside a Python-defined\n    SOP."]}], "indent": 0, "text": [{"text": ["setCurPoint(self, point_or_none)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::setCurPoint"}, "extent": [5658, 5697], "type": "methods_item", "id": "setCurPoint"}, {"body": [], "indent": 0, "text": [{"text": ["curPoint2(self)"], "type": "code"}, "  \u2192 Point"], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SopNode::curPoint2"}, "extent": [6515, 6545], "type": "methods_item", "id": "curPoint2"}, {"body": [{"indent": 4, "type": "para", "extent": [6661, 6869], "text": ["Return this node\u2019s current primitive.  You would typically call this method\n    from an expression on a node that iterates over a set of primitives and\n    re-evaluates the parameter for each primitive."]}, {"indent": 4, "type": "para", "extent": [6869, 6927], "text": ["See ", {"fragment": "#curPoint", "text": "", "value": "/hom/hou/SopNode#curPoint", "fallback_text": "hou.SopNode.curPoint", "fullpath": "/hom/hou/SopNode#curPoint", "scheme": "Hom", "type": "link"}, " for more information."]}, {"indent": 4, "type": "para", "extent": [6927, 7127], "text": ["The following lists Python equivalents for some primitive-related Hscript\n    expression local variables.  Note that you can also access local variables\n    from Python using ", {"text": "", "value": "/hom/hou/lvar", "fallback_text": "hou.lvar", "fullpath": "/hom/hou/lvar", "scheme": "Hom", "type": "link"}, "."]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [7127, 7561], "text": ["\n    # $PR (Hscript expression) or lvar('PR') (Python):\n    pwd().curPrim().number()\n\n    # $NPR (Hscript expression) or lvar('NPR') (Python):\n    len(pwd().geometry().iterPrims())\n\n    # $NX (Hscript expression) or lvar('NX') (Python):\n    pwd().curPrim().attribValue(\"N\")[0]\n    pwd().curPrim().normal()[0]\n\n    # $CR (Hscript expression) or lvar('CR') (Python):\n    pwd().curPrim().attribValue(\"Cd\")[0]\n    "]}], "indent": 0, "text": [{"text": ["curPrim(self)"], "type": "code"}, "  \u2192 Prim"], "role": "item", "attrs": {"cppname": "HOM_SopNode::curPrim"}, "extent": [6599, 6626], "type": "methods_item", "id": "curPrim"}, {"body": [], "indent": 0, "text": [{"text": ["curPrim2(self)"], "type": "code"}, "  \u2192 Prim"], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SopNode::curPrim2"}, "extent": [7561, 7590], "type": "methods_item", "id": "curPrim2"}, {"body": [{"indent": 4, "type": "para", "extent": [7717, 7880], "text": ["Set this node\u2019s current primitive.  You can only call this method from\n    a Python-defined SOP.  See ", {"fragment": "#setCurPoint", "text": "", "value": "/hom/hou/SopNode#setCurPoint", "fallback_text": "hou.SopNode.setCurPoint", "fullpath": "/hom/hou/SopNode#setCurPoint", "scheme": "Hom", "type": "link"}, " for more\n    information."]}], "indent": 0, "text": [{"text": ["setCurPrim(self, prim_or_none)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::setCurPrim"}, "extent": [7643, 7679], "type": "methods_item", "id": "setCurPrim"}, {"body": [{"indent": 4, "type": "para", "extent": [7948, 8158], "text": ["Return this node\u2019s current vertex.  You would typically call this method\n    from an expression on a node that iterates over a set of primitive\n    vertices and re-evaluates the parameter for each vertex."]}, {"indent": 4, "type": "para", "extent": [8158, 8216], "text": ["See ", {"fragment": "#curPoint", "text": "", "value": "/hom/hou/SopNode#curPoint", "fallback_text": "hou.SopNode.curPoint", "fullpath": "/hom/hou/SopNode#curPoint", "scheme": "Hom", "type": "link"}, " for more information."]}, {"indent": 4, "type": "para", "extent": [8216, 8331], "text": ["Note that ", {"fragment": "#curPrim", "text": "", "value": "/hom/hou/SopNode#curPrim", "fallback_text": "hou.SopNode.curPrim", "fullpath": "/hom/hou/SopNode#curPrim", "scheme": "Hom", "type": "link"}, " returns the primitive containing this\n    vertex returned by this method."]}, {"indent": 4, "type": "para", "extent": [8331, 8528], "text": ["The following lists Python equivalents for some vertex-related Hscript\n    expression local variables.  Note that you can also access local variables\n    from Python using ", {"text": "", "value": "/hom/hou/lvar", "fallback_text": "hou.lvar", "fullpath": "/hom/hou/lvar", "scheme": "Hom", "type": "link"}, "."]}, {"lang": "python", "indent": 4, "type": "pre", "extent": [8528, 8739], "text": ["\n    # $VTX (Hscript expression) or lvar('VTX') (Python):\n    pwd().curVertex().number()\n\n    # $NVTX (Hscript expression) or lvar('NVTX') (Python):\n    pwd().curPrim().numVertices()\n    "]}], "indent": 0, "text": [{"text": ["curVertex(self)"], "type": "code"}, "  \u2192 Vertex"], "role": "item", "attrs": {"cppname": "HOM_SopNode::curVertex"}, "extent": [7880, 7911], "type": "methods_item", "id": "curVertex"}, {"body": [], "indent": 0, "text": [{"text": ["curVertex2(self)"], "type": "code"}, "  \u2192 Vertex"], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SopNode::curVertex2"}, "extent": [8739, 8772], "type": "methods_item", "id": "curVertex2"}, {"body": [{"indent": 4, "type": "para", "extent": [8907, 9070], "text": ["Set this node\u2019s current primitive.  You can only call this method from\n    a Python-defined SOP.  See ", {"fragment": "#setCurPoint", "text": "", "value": "/hom/hou/SopNode#setCurPoint", "fallback_text": "hou.SopNode.setCurPoint", "fullpath": "/hom/hou/SopNode#setCurPoint", "scheme": "Hom", "type": "link"}, " for more\n    information."]}, {"indent": 4, "type": "para", "extent": [9070, 9192], "text": ["Note that setting the current vertex will also set the current primitive\n    to the primitive containing the vertex."]}], "indent": 0, "text": [{"text": ["setCurVertex(self, vertex_or_none)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::setCurVertex"}, "extent": [8827, 8867], "type": "methods_item", "id": "setCurVertex"}, {"body": [], "indent": 0, "text": [{"text": ["curPointBoundingBox(self)"], "type": "code"}, "  \u2192 BoundingBox"], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SopNode::curPointBoundingBox"}, "extent": [9192, 9238], "type": "methods_item", "id": "curPointBoundingBox"}, {"body": [], "indent": 0, "text": [{"text": ["curPointBoundingBox2(self)"], "type": "code"}, "  \u2192 BoundingBox"], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SopNode::curPointBoundingBox2"}, "extent": [9302, 9349], "type": "methods_item", "id": "curPointBoundingBox2"}, {"body": [], "indent": 0, "text": [{"text": ["curPrimBoundingBox(self)"], "type": "code"}, "  \u2192 BoundingBox"], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SopNode::curPrimBoundingBox"}, "extent": [9414, 9459], "type": "methods_item", "id": "curPrimBoundingBox"}, {"body": [], "indent": 0, "text": [{"text": ["curPrimBoundingBox2(self)"], "type": "code"}, "  \u2192 BoundingBox"], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SopNode::curPrimBoundingBox2"}, "extent": [9522, 9568], "type": "methods_item", "id": "curPrimBoundingBox2"}, {"body": [{"indent": 4, "type": "para", "extent": [9702, 9820], "text": ["If this is a subnet SOP, return the SOP inside the subnet with its display\n    flag on.  Otherwise, return None."]}], "indent": 0, "text": [{"text": ["displayNode(self)"], "type": "code"}, "  \u2192 Node"], "role": "item", "attrs": {"cppname": "HOM_SopNode::displayNode"}, "extent": [9632, 9663], "type": "methods_item", "id": "displayNode"}, {"body": [{"indent": 4, "type": "para", "extent": [9898, 10015], "text": ["If this is a subnet SOP, return the SOP inside the subnet with its render\n    flag on.  Otherwise, return None."]}], "indent": 0, "text": [{"text": ["renderNode(self)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::renderNode"}, "extent": [9820, 9860], "type": "methods_item", "id": "renderNode"}, {"body": [{"indent": 4, "type": "para", "extent": [10122, 10173], "text": ["Return whether this node\u2019s bypass flag is on."]}], "indent": 0, "text": [{"text": ["isBypassed(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::isBypassed", "replaces": "/expressions/opflag /commands/opget"}, "extent": [10015, 10047], "type": "methods_item", "id": "isBypassed"}, {"body": [{"indent": 4, "type": "para", "extent": [10254, 10332], "text": ["Turn this node\u2019s bypass flag on or off, making this node have no effect."]}], "indent": 0, "text": [{"text": ["bypass(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::bypass", "replaces": "/expressions/opset"}, "extent": [10173, 10195], "type": "methods_item", "id": "bypass"}, {"body": [{"indent": 4, "type": "para", "extent": [10451, 10503], "text": ["Return whether this node\u2019s display flag is on."]}], "indent": 0, "text": [{"text": ["isDisplayFlagSet(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::isDisplayFlagSet", "replaces": "/expressions/opflag /commands/opget"}, "extent": [10332, 10370], "type": "methods_item", "id": "isDisplayFlagSet"}, {"body": [{"indent": 4, "type": "para", "extent": [10600, 10646], "text": ["Turn this node\u2019s display flag on or off."]}], "indent": 0, "text": [{"text": ["setDisplayFlag(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::setDisplayFlag", "replaces": "/expressions/opset"}, "extent": [10503, 10533], "type": "methods_item", "id": "setDisplayFlag"}, {"body": [{"indent": 4, "type": "para", "extent": [10763, 10814], "text": ["Return whether this node\u2019s render flag is on."]}], "indent": 0, "text": [{"text": ["isRenderFlagSet(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::isRenderFlagSet", "replaces": "/expressions/opflag /commands/opget"}, "extent": [10646, 10683], "type": "methods_item", "id": "isRenderFlagSet"}, {"body": [{"indent": 4, "type": "para", "extent": [10909, 10955], "text": ["Turns this node\u2019s render flag on or off."]}], "indent": 0, "text": [{"text": ["setRenderFlag(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::setRenderFlag", "replaces": "/expressions/opset"}, "extent": [10814, 10843], "type": "methods_item", "id": "setRenderFlag"}, {"body": [{"indent": 4, "type": "para", "extent": [11078, 11289], "text": ["Return whether this node\u2019s highlight flag is on.  When this flag is\n    turned on, Houdini displays portions of the geometry in yellow in\n    the viewport, to indicate the operations performed by this SOP."]}], "indent": 0, "text": [{"text": ["isHighlightFlagSet(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::isHighlightFlagSet", "replaces": "/expressions/opflag /commands/opget"}, "extent": [10955, 10995], "type": "methods_item", "id": "isHighlightFlagSet"}, {"body": [{"indent": 4, "type": "para", "extent": [11390, 11438], "text": ["Turn this node\u2019s highlight flag on or off."]}], "indent": 0, "text": [{"text": ["setHighlightFlag(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::setHighlightFlag", "replaces": "/expressions/opset"}, "extent": [11289, 11321], "type": "methods_item", "id": "setHighlightFlag"}, {"body": [{"indent": 4, "type": "para", "extent": [11559, 11721], "text": ["Returns whether this node\u2019s template flag is on.  Templated SOPs are\n    display as wireframe in the viewport, and you cannot select geometry\n    from them."]}], "indent": 0, "text": [{"text": ["isTemplateFlagSet(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::isTemplateFlagSet", "replaces": "/expressions/opflag /commands/opget"}, "extent": [11438, 11477], "type": "methods_item", "id": "isTemplateFlagSet"}, {"body": [{"indent": 4, "type": "para", "extent": [11820, 11868], "text": ["Turns this node\u2019s template flag on or off."]}], "indent": 0, "text": [{"text": ["setTemplateFlag(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::setTemplateFlag", "replaces": "/expressions/opset"}, "extent": [11721, 11752], "type": "methods_item", "id": "setTemplateFlag"}, {"body": [{"indent": 4, "type": "para", "extent": [12009, 12412], "text": ["Return whether this node\u2019s selectable template flag is on.  A selectable\n    template displays like the display SOP in the viewport, and you can\n    select it when choosing points, primitives, etc.  Note that only the\n    display SOP will be included in the containing geometry object or\n    SOP subnet, however, so selectable templates are only visible while\n    working inside their SOP network."]}], "indent": 0, "text": [{"text": ["isSelectableTemplateFlagSet(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::isSelectableTemplateFlagSet", "replaces": "/expressions/opflag /commands/opget"}, "extent": [11868, 11917], "type": "methods_item", "id": "isSelectableTemplateFlagSet"}, {"body": [{"indent": 4, "type": "para", "extent": [12531, 12589], "text": ["Turn this node\u2019s selectable template flag on or off."]}], "indent": 0, "text": [{"text": ["setSelectableTemplateFlag(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::setSelectableTemplateFlag", "replaces": "/expressions/opset"}, "extent": [12412, 12453], "type": "methods_item", "id": "setSelectableTemplateFlag"}, {"body": [{"indent": 4, "type": "para", "extent": [12700, 12866], "text": ["Return whether this node is hard-locked.  A hard-locked node stores\n    its data inside the node, and no longer responds to parameter or input\n    node changes."]}], "indent": 0, "text": [{"text": ["isHardLocked(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::isHardLocked", "replaces": "/expressions/opflag /commands/opget"}, "extent": [12589, 12623], "type": "methods_item", "id": "isHardLocked"}, {"body": [{"indent": 4, "type": "para", "extent": [12961, 13229], "text": ["Turn this node\u2019s hard-lock flag on or off.  Locking a node saves its\n    current cooked geometry into the node.  If you unlock a hard-locked\n    node, it will discard its locked geometry data and recook, computing its\n    geometry from its inputs and parameters."]}], "indent": 0, "text": [{"text": ["setHardLocked(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::setHardLocked", "replaces": "/expressions/opset"}, "extent": [12866, 12895], "type": "methods_item", "id": "setHardLocked"}, {"body": [{"indent": 4, "type": "para", "extent": [13340, 13529], "text": ["Return whether this node is soft-locked.  A soft-locked node stores\n    position delta information\n    , preventing all but a small set of\n    manual modeling changes from being made."]}], "indent": 0, "text": [{"text": ["isSoftLocked(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::isSoftLocked", "replaces": "/expressions/opflag /commands/opget"}, "extent": [13229, 13263], "type": "methods_item", "id": "isSoftLocked"}, {"body": [{"indent": 4, "type": "para", "extent": [13624, 13753], "text": ["Turns this node\u2019s soft-lock flag on or off, allowing a subset of manual\n    modeling changes to be made to the locked node."]}], "indent": 0, "text": [{"text": ["setSoftLocked(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::setSoftLocked", "replaces": "/expressions/opset"}, "extent": [13529, 13558], "type": "methods_item", "id": "setSoftLocked"}, {"body": [{"indent": 4, "type": "para", "extent": [13870, 13922], "text": ["Returns whether this node\u2019s unload flag is on."]}], "indent": 0, "text": [{"text": ["isUnloadFlagSet(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::isUnloadFlagSet", "replaces": "/expressions/opflag /commands/opget"}, "extent": [13753, 13790], "type": "methods_item", "id": "isUnloadFlagSet"}, {"body": [{"indent": 4, "type": "para", "extent": [14017, 14063], "text": ["Turns this node\u2019s unload flag on or off."]}], "indent": 0, "text": [{"text": ["setUnloadFlag(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::setUnloadFlag", "replaces": "/expressions/opset"}, "extent": [13922, 13951], "type": "methods_item", "id": "setUnloadFlag"}, {"body": [], "indent": 0, "text": [{"text": ["memorySizeInBytes(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SopNode::memorySizeInBytes"}, "extent": [14063, 14092], "type": "methods_item", "id": "memorySizeInBytes"}, {"body": [], "indent": 0, "text": [{"text": ["createEditSopFromThisTo(self, sop_node, look_for_deforms=False)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SopNode::createEditSopFromThisTo"}, "extent": [14154, 14223], "type": "methods_item", "id": "createEditSopFromThisTo"}, {"body": [{"indent": 4, "type": "para", "extent": [14356, 14407], "text": ["Returns if the node has a verb represenation."]}], "indent": 0, "text": [{"text": ["hasVerb(self)"], "type": "code"}, "  \u2192 Boolean"], "role": "item", "attrs": {"cppname": "HOM_SopNode::hasVerb"}, "extent": [14291, 14321], "type": "methods_item", "id": "hasVerb"}, {"body": [{"indent": 4, "type": "para", "extent": [14476, 14624], "text": ["Returns the verb associated with a specific node.  This allows you to\n    run the nodes operation on geometry independently of the node itself."]}], "indent": 0, "text": [{"text": ["verb(self)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/SopVerb", "fallback_text": "hou.SopVerb", "fullpath": "/hom/hou/SopVerb", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_SopNode::verb"}, "extent": [14407, 14444], "type": "methods_item", "id": "verb"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 1, "text": "Methods", "role": "section", "extent": [123, 132], "container": true, "type": "methods_section", "id": "methods"}], "summary": ["Represents a surface node."], "type": "root", "attrs": {"cppname": "HOM_SopNode", "type": "homclass", "superclass": "hou.Node", "group": "geo"}, "title": [{"text": "hou.", "type": "supertitle"}, "SopNode"]}