{"body": [{"indent": 0, "text": ["POP VOP"], "type": "title", "extent": [79, 91], "level": 0}, {"indent": 0, "type": "summary", "extent": [91, 131], "text": ["Runs CVEX on a particle system."]}, {"indent": 0, "type": "para", "extent": [131, 347], "text": ["The POP VOP operation runs CVEX over a set of particles.  The CVEX shader can be defined as a ", {"text": [".vfl"], "type": "code"}, " file, a SHOP, or by building a CVEX VOP network inside this node.  The last is the most straightforward approach."]}, {"indent": 0, "type": "para", "extent": [347, 737], "text": ["Binding to the CVEX script controls what attributes are passed to which parameters of the script.  The default AutoBind will use the name of the attributes to determine which parameter they should\noverride.  If that parameter is marked as exported in the CVEX script, the attribute will be written to and/or created.  Otherwise, the attribute is just read to get the parameter\u2019s values.  "]}, {"indent": 0, "type": "para", "extent": [737, 876], "text": ["Optionally, you can also bind read-only field parameters.  These will be sampled at the attribute\u2019s location in space and passed to CVEX."]}, {"body": [{"body": [{"body": [{"type": "para", "indent": 8, "extent": [61, 265], "text": ["Turns this node on and off. The node is only active if this\n        value is greater than 0. This is useful to control the effect of\n        this node with an ", {"text": ["expression"], "fullpath": "/expressions/index", "scheme": null, "type": "link", "value": "/expressions/"}, "."]}, {"body": [{"body": [{"type": "para", "indent": 12, "extent": [279, 410], "text": ["This is activation of the node as a whole. You can\u2019t use this parameter to deactivate the node for certain particles."]}], "role": "item", "indent": 8, "extent": [265, 279], "type": "note"}], "role": "item_group", "container": true, "type": "note_group"}], "indent": 4, "text": ["Activation"], "role": "item", "extent": [45, 61], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 8, "extent": [421, 648], "text": ["Only affect a group of points (created with, for example, a\n        ", {"text": ["Group POP"], "fullpath": "/nodes/dop/popgroup", "scheme": "Node", "type": "link", "value": "/nodes/dop/popgroup"}, " or ", {"text": ["Collision\n        Detection POP"], "fullpath": "/nodes/dop/popcollisiondetect", "scheme": "Node", "type": "link", "value": "/nodes/dop/popcollisiondetect"}, ") out of all the points in \n        the current stream."]}], "indent": 4, "text": ["Group"], "role": "item", "extent": [410, 421], "type": "parameters_item"}], "type": "parameters_item_group", "container": true}, {"body": [{"body": [{"body": [{"indent": 16, "type": "para", "extent": [968, 1181], "text": ["Where to get the CVEX script from.  Myself will refer to the VOP network built inside this node.  SHOP will use the ", {"text": ["Shop Path"], "type": "ui"}, " and ", {"text": ["Script"], "type": "ui"}, " will load the ", {"text": [".vex"], "type": "code"}, " file specified in the script."]}], "indent": 8, "text": ["Vex Source"], "role": "item", "extent": [947, 968], "type": "parameters_item"}, {"body": [{"indent": 16, "type": "para", "extent": [1200, 1241], "text": ["The CVEX SHOP to apply."]}, {"indent": 16, "type": "para", "extent": [1241, 1336], "text": ["This can also point to any node that contains a CVEX VOP Network."]}, {"body": [{"body": [{"indent": 24, "type": "para", "extent": [1358, 1425], "text": ["Referenced nodes parameters will be used."]}], "indent": 16, "role": "item", "type": "note", "extent": [1336, 1358]}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 8, "text": ["Shop Path"], "role": "item", "extent": [1181, 1200], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [1441, 1480], "text": ["The CVEX script to apply."]}], "indent": 8, "text": ["Script"], "role": "item", "extent": [1425, 1441], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [1511, 1623], "text": ["When in script mode, this reloads any ", {"text": [".vex"], "type": "code"}, " files to account for updates made outside of Houdini."]}], "indent": 8, "text": ["Re-load VEX Functions"], "role": "item", "extent": [1480, 1511], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [1641, 1720], "text": ["The command line used by VOPs to compile the inside of this node."]}], "indent": 8, "text": ["Compiler"], "role": "item", "extent": [1623, 1641], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [1743, 1796], "text": ["Trigger a recompile of the VOP network."]}], "indent": 8, "text": ["Force Compile"], "role": "item", "extent": [1720, 1743], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [1826, 2100], "text": ["VEX functions like ", {"text": ["ch()"], "type": "code"}, " usually evaluate with respect to this node. Providing a path here can override where the path search starts from.  This is useful for embedding in a digital asset where you would like the top level digital asset to be the search root."]}], "indent": 8, "text": ["Evaluation Node Path"], "role": "item", "extent": [1796, 1826], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [2127, 2472], "text": ["When a VEX parameter is exported, the bound attribute will be created if it doesn\u2019t exist.  This pattern can be used to override the export option on the VEX shader to avoid writing to or creating certain attributes.  The pattern matches the VEX parameter, not the ", {"text": ["bound"], "type": "code"}, " attribute.  The attribute will still be bound for reading."]}], "indent": 8, "text": ["Export Parameters"], "role": "item", "extent": [2100, 2127], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [2503, 2760], "text": ["There should be no threading issues with VEX.  In the unlikely\n            event that there are, this will allow you to determine which\n            node is guilty, and work around it without turning off threading\n            on a global scale."]}], "indent": 8, "text": ["Enable Multithreading"], "role": "item", "extent": [2472, 2503], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Vex Setup"], "extent": [931, 947], "container": true, "type": "h", "id": null}, {"body": [], "indent": 0, "level": 2, "text": ["Volume Bindings"], "extent": [2760, 2782], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 12, "type": "para", "extent": [2823, 2887], "text": ["The list of the geometry on the object to process."]}], "indent": 8, "text": ["Geometry"], "role": "item", "extent": [2804, 2823], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [2913, 3020], "text": ["Will use the name of the attribute to determine which attribute binds with which parameter.  "]}, {"indent": 12, "type": "para", "extent": [3020, 3229], "text": ["Integer attributes will bind to integer parameters.  Float attributes will bind to float, vector, point, matrix, or matrix4 depending on their tuple size.  String attributes will bind to strings."]}], "indent": 8, "text": ["Autobind by Name"], "role": "item", "extent": [2887, 2913], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [3268, 3334], "text": ["Manually specifies the bindings of each attribute.  "]}], "indent": 8, "text": ["Attribute Name, VEX Parameter"], "role": "item", "extent": [3229, 3268], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [3369, 3553], "text": ["Optionally binds Scalar, Vector, Matrix, or Index fields from this object to the CVEX function.  They will be sampled at the current ", {"text": ["P"], "type": "code"}, " location of each element."]}], "indent": 8, "text": ["Field Name, VEX Parameter"], "role": "item", "extent": [3334, 3369], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [3586, 3677], "text": ["Automatically bind any groups to the integer parameter prefixed with ", {"text": ["group_"], "type": "code"}, "."]}], "indent": 8, "text": ["Autobind Groups by Name"], "role": "item", "extent": [3553, 3586], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [3712, 3772], "text": ["Manually specifies the bindings of each group."]}], "indent": 8, "text": ["Group Name, VEX Parameter"], "role": "item", "extent": [3677, 3712], "type": "parameters_item"}, {"body": [{"indent": 12, "type": "para", "extent": [3809, 4097], "text": ["If points are being run over, and the ", {"text": ["P"], "type": "code"}, " attribute is written to,\n            but the ", {"text": ["N"], "type": "code"}, " attribute is not written to, any incoming normals will\n            become out of date.  When this option is set, vertex and point\n            normals will be updated when this occurs."]}], "indent": 8, "text": ["Update Normals If Displaced"], "role": "item", "extent": [3772, 3809], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Data Bindings"], "extent": [2782, 2804], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "extent": [4133, 4207], "text": ["These control the four virtual inputs accessible inside of VOPs."]}, {"indent": 8, "type": "para", "extent": [4207, 4346], "text": ["They can be accessed with the OpInput1-4 wires from the VOP, or with the ", {"text": ["@OpInput1-4"], "type": "code"}, " string parameters when using VEXpressions."]}, {"indent": 8, "type": "para", "extent": [4346, 4446], "text": ["They can also be accessed numerically as 0-3 with VEX functions that take an input number."]}, {"body": [{"body": [{"indent": 12, "type": "para", "extent": [4460, 4508], "text": ["No geometry is wired to this input."]}], "indent": 8, "type": "dt", "extent": [4446, 4460], "text": ["None"]}, {"body": [{"indent": 12, "type": "para", "extent": [4521, 4626], "text": ["The SOP geometry will be cooked prior to running the VEX and the result wired to this input."]}], "indent": 8, "type": "dt", "extent": [4508, 4521], "text": ["SOP"]}, {"body": [{"indent": 12, "type": "para", "extent": [4644, 4889], "text": ["Data in the current simulation to reference.  Specified as\n            an object/data, for example, pyro1/vel to refer to the velocity\n            field of the pyro1 object (which will show up as three volume\n            primitives)"]}], "indent": 8, "type": "dt", "extent": [4626, 4644], "text": ["DOP Data"]}, {"body": [{"indent": 12, "type": "para", "extent": [4905, 5110], "text": ["Referring to the geometry currently being processed is special as you have to ensure a copy is made so the VEX functions can refer to its original form.  This handles\n            that for you."]}], "indent": 8, "type": "dt", "extent": [4889, 4905], "text": ["Myself"]}, {"body": [{"indent": 12, "type": "para", "extent": [5140, 5218], "text": ["These refer to the SOPs wired into the parent DOP Network itself."]}], "indent": 8, "type": "dt", "extent": [5110, 5140], "text": ["Nth Context Geometry"]}, {"body": [{"indent": 12, "type": "para", "extent": [5258, 5445], "text": ["Refers the currently processed geometry.  Does not make a copy\n            so it is up to the user to ensure no reads are made from\n            any attributes that are bound."]}], "indent": 8, "type": "dt", "extent": [5218, 5258], "text": ["Myself (No Reads from Outputs)"]}], "container": true, "type": "dt_group"}], "indent": 4, "text": ["Input 1, 2, 3, 4"], "role": "item", "extent": [4110, 4133], "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [5459, 5493], "text": ["Path to a SOP to wire in."]}], "indent": 4, "text": ["SOP Path"], "role": "item", "extent": [5445, 5459], "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [5507, 5584], "text": ["Object/data path a piece of DOP data in THIS simulation to wire in."]}], "indent": 4, "text": ["DOP Data"], "role": "item", "extent": [5493, 5507], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Inputs"], "extent": [4097, 4110], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "extent": [29, 119], "text": ["Determines if the current solver timestep will be used to apply\n    this node.  "]}, {"type": "para", "indent": 4, "extent": [119, 338], "text": ["If set, the current timestep size will be multiplied\n    by the scale and used for the time increment for this operation.\n    Otherwise, the time scale will specify an absolute fictitious time\n    to integrate by."]}, {"type": "para", "indent": 4, "extent": [338, 487], "text": ["By disabling the link between the actual real time and the\n    microsolver time, you can perform operations in a separate,\n    fictitious, time."]}], "indent": 0, "text": ["Use Timestep"], "role": "item", "extent": [15, 29], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [499, 723], "text": ["The timestep used for this microsolver will be scaled by this\n    amount.  This allows one to achieve non-realistic effects, such as\n    parts of the simulation operating at different speeds than other\n    parts.  "]}, {"type": "para", "indent": 4, "extent": [723, 825], "text": ["Similarly, it is useful if a solver needs to be evaluated\n    independently of the main timestep."]}], "indent": 0, "text": ["Time Scale"], "role": "item", "extent": [487, 499], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [38, 142], "text": ["Each data option parameter has an associated menu which specifies\n    how that parameter operates."]}, {"body": [{"body": [{"type": "para", "indent": 8, "extent": [160, 215], "text": ["Use the value from the Default Operation menu."]}], "type": "dt", "indent": 4, "extent": [142, 160], "text": ["Use Default "]}, {"body": [{"type": "para", "indent": 8, "extent": [233, 479], "text": ["Set the value of this parameter only when this data is created.\n        On all subsequent timesteps, the value of this parameter is not\n        altered. This is useful for setting up initial conditions like\n        position and velocity."]}], "type": "dt", "indent": 4, "extent": [215, 233], "text": ["Set Initial "]}, {"body": [{"type": "para", "indent": 8, "extent": [496, 823], "text": ["Always set the value of this parameter. This is useful when\n        specific keyframed values are required over time. This could be\n        used to keyframe the position of an object over time, or to\n        cause the geometry from a SOP to be refetched at each timestep\n        if the geometry is deforming. "]}, {"type": "para", "indent": 8, "extent": [823, 1119], "text": ["You can also use this setting in\n        conjunction with the local variables for a parameter value to\n        modify a value over time. For example, in the X Position, an\n        expression like ", {"text": ["$tx + 0.1"], "type": "code"}, " would cause the object to\n        move 0.1 units to the right on each timestep."]}], "type": "dt", "indent": 4, "extent": [479, 496], "text": ["Set Always "]}, {"body": [{"type": "para", "indent": 8, "extent": [1135, 1333], "text": ["Do not ever set the value of this parameter. This option is most\n        useful when using this node to modify an existing piece of data\n        connected through the first input. "]}, {"type": "para", "indent": 8, "extent": [1333, 1608], "text": ["For example, an ", {"text": ["RBD State\n        DOP"], "fullpath": "/nodes/dop/rbdstate", "scheme": "Node", "type": "link", "value": "/nodes/dop/rbdstate"}, " may want to animate just the mass of an\n        object, and nothing else. The ", {"text": ["Set Never"], "type": "ui"}, " option could be used\n        on all parameters except for ", {"text": ["Mass"], "type": "ui"}, ", which would use ", {"text": ["Set\n        Always"], "type": "ui"}, "."]}], "type": "dt", "indent": 4, "extent": [1119, 1135], "text": ["Set Never "]}], "type": "dt_group", "container": true}], "indent": 0, "text": ["Parameter Operations"], "role": "item", "extent": [16, 38], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [1627, 1762], "text": ["For any parameters with their ", {"text": ["Operation"], "type": "ui"}, " menu set to ", {"text": ["Use\n    Default"], "type": "ui"}, ", this parameter controls what operation is used. "]}, {"type": "para", "indent": 4, "extent": [1762, 1908], "text": ["This\n    parameter has the same menu options and meanings as the ", {"text": ["Parameter\n    Operations"], "type": "ui"}, " menus, but without the ", {"text": ["Use Default"], "type": "ui"}, " choice."]}], "indent": 0, "text": ["Default Operation"], "role": "item", "extent": [1608, 1627], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [46, 139], "text": ["All objects connected to the first input of this node become mutual\n    affectors. "]}, {"type": "para", "indent": 4, "extent": [139, 412], "text": ["This is equivalent to using an ", {"text": ["Affector\n    DOP"], "fullpath": "/nodes/dop/affector", "scheme": "Node", "type": "link", "value": "/nodes/dop/affector"}, " to create an affector relationship between\n    ", {"text": ["*"], "type": "code"}, " and ", {"text": ["*"], "type": "code"}, " before connecting it to this node. This option makes it\n    convenient to have all objects feeding into a solver node affect\n    each other."]}], "indent": 0, "text": ["Make Objects Mutual Affectors"], "role": "item", "extent": [15, 46], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [45, 219], "text": ["When an object connector is attached to the first input of this\n    node, this parameter can be used to choose a subset of those objects\n    to be affected by this node."]}], "indent": 0, "text": ["Group"], "role": "item", "attrs": {"channels": "/group"}, "extent": [15, 22], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [26, 227], "text": ["Indicates the name that should be used to attach the data to an\n    object or other piece of data. If the Data Name contains a \"/\" (or\n    several), that indicates traversing inside subdata. "]}, {"type": "para", "indent": 4, "extent": [227, 530], "text": ["For example, if the ", {"text": ["Fan Force DOP"], "fullpath": "/nodes/dop/fan", "scheme": "Node", "type": "link", "value": "/nodes/dop/fan"}, " has the default Data Name\n    \"Forces/Fan\". This attaches the data with the name \"Fan\" to an\n    existing piece of data named \"Forces\". If no data named \"Forces\"\n    exists, a simple piece of container data is created to hold the\n    \"Fan\" subdata."]}, {"type": "para", "indent": 4, "extent": [530, 833], "text": ["Different pieces of data have different requirements on what names\n    should be used for them. Except in very rare situations, the default\n    value should be used. Some exceptions are described with particular\n    pieces of data or with solvers that make use of some particular type\n    of data."]}], "indent": 0, "text": ["Data Name"], "role": "item", "extent": [15, 26], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [851, 1058], "text": ["Turning on this parameter modifies the ", {"text": ["Data Name"], "type": "ui"}, " parameter\n    value to ensure that the data created by this node is attached with\n    a unique name so it will not overwrite any existing data. "]}, {"type": "para", "indent": 4, "extent": [1058, 1271], "text": ["With this\n    parameter turned off, attaching two pieces of data with the same\n    name will cause the second one to replace the first. There are\n    situations where each type of behavior is desirable. "]}, {"type": "para", "indent": 4, "extent": [1271, 1585], "text": ["If an object\n    needs to have several ", {"text": ["Fan Forces"], "fullpath": "/nodes/dop/fan", "scheme": "Node", "type": "link", "value": "/nodes/dop/fan"}, " blowing on it, it is\n    much easier to use the ", {"text": ["Unique Data Name"], "type": "ui"}, " feature to ensure that\n    each fan does not overwrite a previous fan rather than trying to\n    change the ", {"text": ["Data Name"], "type": "ui"}, " of each fan individually to avoid\n    conflicts. "]}, {"type": "para", "indent": 4, "extent": [1585, 1827], "text": ["On the other hand, if an object is known to have ", {"text": ["RBD\n    State"], "fullpath": "/nodes/dop/rbdstate", "scheme": "Node", "type": "link", "value": "/nodes/dop/rbdstate"}, " data already attached to it, leaving this\n    option turned off will allow some new ", {"text": ["RBD State"], "fullpath": "/nodes/dop/rbdstate", "scheme": "Node", "type": "link", "value": "/nodes/dop/rbdstate"}, "\n    data to overwrite the existing data."]}], "indent": 0, "text": ["Unique Data Name"], "role": "item", "extent": [833, 851], "type": "parameters_item"}, {"body": [{"type": "para", "indent": 4, "extent": [178, 731], "text": ["The default behavior for solvers is to attach the exact same solver to all\n    of the objects specified in the group.  This allows the objects to be\n    processed in a single pass by the solver, since the parameters are identical\n    for each object.  However, some objects operate more logically on a single\n    object at a time.  In these cases, one may want to use ", {"text": ["$OBJID"], "type": "code"}, " expressions\n    to vary the solver parameters across the objects.  Setting this toggle will\n    create a separate solver per object, allowing ", {"text": ["$OBJID"], "type": "code"}, " to vary as expected."]}], "indent": 0, "text": ["Solver Per Object"], "role": "item", "extent": [159, 178], "type": "parameters_item"}], "type": "parameters_item_group", "container": true}], "indent": 0, "level": 2, "text": ["Solver"], "extent": [5584, 5597], "container": true, "type": "h", "id": null}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [876, 888], "container": true, "type": "parameters_section", "id": "parameters"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "extent": [28, 71], "text": ["This optional input has two purposes."]}, {"type": "para", "indent": 4, "extent": [71, 230], "text": ["First, if it is wired to other POP nodes, they will be executed prior to this node executing.  The chain of nodes will be processed in a top-down manner."]}, {"type": "para", "indent": 4, "extent": [230, 465], "text": ["Second, if the input chain has a stream generator (such as ", {"text": ["POP Location"], "fullpath": "/nodes/dop/poplocation", "scheme": "Node", "type": "link", "value": "/nodes/dop/poplocation"}, ",\n    ", {"text": ["POP Source"], "fullpath": "/nodes/dop/popsource", "scheme": "Node", "type": "link", "value": "/nodes/dop/popsource"}, ", or ", {"text": ["POP Stream"], "fullpath": "/nodes/dop/popstream", "scheme": "Node", "type": "link", "value": "/nodes/dop/popstream"}, "), this node will only operate on the particles in that stream."]}], "type": "dt", "indent": 0, "extent": [15, 28], "text": ["First Input"]}], "type": "dt_group", "container": true}], "indent": 0, "level": 1, "text": "Inputs", "role": "section", "extent": [5672, 5680], "container": true, "type": "inputs_section", "id": "inputs"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "extent": [29, 95], "text": ["The output of this node should be wired into a solver chain."]}, {"type": "para", "indent": 4, "extent": [95, 159], "text": ["Merge nodes can be used to combine multiple solver chains."]}, {"type": "para", "indent": 4, "extent": [159, 316], "text": ["The final wiring should go into one of the purple inputs of a full-solver, such as ", {"text": ["POP Solver"], "fullpath": "/nodes/dop/popsolver", "scheme": "Node", "type": "link", "value": "/nodes/dop/popsolver"}, " or ", {"text": ["FLIP Solver"], "fullpath": "/nodes/dop/flipsolver", "scheme": "Node", "type": "link", "value": "/nodes/dop/flipsolver"}, "."]}], "type": "dt", "indent": 0, "extent": [15, 29], "text": ["First Output"]}], "type": "dt_group", "container": true}], "indent": 0, "level": 1, "text": "Outputs", "role": "section", "extent": [5715, 5724], "container": true, "type": "outputs_section", "id": "outputs"}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [5769, 5795], "text": [{"text": "", "fullpath": "/nodes/dop/popwrangle", "scheme": "Node", "type": "link", "value": "/nodes/dop/popwrangle"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [5760, 5769], "container": true, "type": "related_section", "id": "related"}], "title": ["POP VOP"], "summary": ["Runs CVEX on a particle system."], "attrs": {"version": null, "tags": "volumes", "namespace": null, "internal": "popvop", "context": "dop", "type": "node", "icon": "DOP/popvop"}, "included": ["/nodes/dop/standard_datagroup_parms", "/nodes/dop/standard_dataname_parms", "/nodes/dop/standard_dataop_parms", "/nodes/dop/standard_gas_timestep", "/nodes/dop/standard_pop_inputs", "/nodes/dop/standard_pop_outputs", "/nodes/dop/standard_pop_parms", "/nodes/dop/standard_solver_mutualparms", "/nodes/dop/standard_solver_parms"], "type": "root"}