{"body": [{"indent": 0, "text": ["Deformation Wrangle"], "type": "title", "extent": [0, 24], "level": 0}, {"indent": 0, "type": "summary", "extent": [137, 183], "text": ["Runs a VEX snippet to deform geometry."]}, {"body": [{"indent": 0, "type": "para", "extent": [198, 488], "text": ["This node runs the snippet on point in the input geometry.  The code should\nupdate a vector ", {"text": ["pos"], "type": "code"}, " variable to a new deformed location.  Optionally, a\nmatrix3 ", {"text": ["xform"], "type": "code"}, " variable can be setup with the derivatives of the deformation\nif known (see the Derivatives Method help for more details)"]}, {"indent": 0, "type": "para", "extent": [488, 820], "text": ["You can read attributes using the ", {"text": ["@"], "type": "code"}, " snippet syntax.  However, keep in\nmind that when computing derivatives the point number is constant over\nthe region computed, so writing a function of ", {"text": ["@P"], "type": "code"}, " will likely result\nin an inability to automatically rotate attributes.  Instead, always\nuse ", {"text": ["pos"], "type": "code"}, " for the local position being deformed."]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [820, 891], "text": ["Press ", {"keys": ["MMB"], "text": null, "type": "keys"}, " on the node to see any error output from the snippet."]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [891, 1104], "text": ["You can use the VEX function ", {"text": ["ch"], "type": "code"}, " to evaluate parameters.\n  The path is relative to this node (", {"text": ["ch(\"parm\")"], "type": "code"}, " will evaluate the parameter ", {"text": ["parm"], "type": "code"}, " on this node).\n  This evaluation will be done at the current time."]}], "container": true, "type": "bullet_group"}, {"body": [{"type": "para", "indent": 0, "extent": [29, 294], "text": ["The ", {"text": ["VEX snippet"], "type": "ui"}, " parameter lets you enter a snippet of ", {"text": ["VEX code"], "fullpath": "/vex/index", "scheme": null, "type": "link", "value": "/vex/"}, " to run on the input geometry.\nSee ", {"text": ["VEX snippets"], "fullpath": "/vex/snippets", "scheme": null, "type": "link", "value": "/vex/snippets"}, " for information on special syntax in the snippet parameter.\nSee ", {"text": ["the VEX chapter"], "fullpath": "/vex/index", "scheme": null, "type": "link", "value": "/vex/"}, " for information on the VEX language."]}], "container": true, "level": 3, "text": ["Syntax"], "extent": [16, 29], "indent": 0, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Overview"], "extent": [183, 198], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [1162, 1287], "text": ["A subset of points in the input geometry to run the program on.\n    Leave this blank to affect all points in the input."]}], "indent": 0, "text": ["Group"], "role": "item", "extent": [1154, 1162], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [1299, 1331], "text": ["What the group is made of."]}], "indent": 0, "text": ["Group Type"], "role": "item", "extent": [1287, 1299], "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [1388, 1627], "text": ["Point and Vertex attributes that match this pattern will be\n        transformed.  Their Type Info will be used to determine how\n        they should transform, as points, vectors, and normals\n        all need different operations."]}, {"indent": 8, "type": "para", "extent": [1627, 1720], "text": ["If ", {"text": ["P"], "type": "code"}, " matches this string, then primitive transforms will\n        also be rotated."]}], "indent": 0, "text": ["Attributes to Transform"], "role": "item", "extent": [1363, 1388], "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [1748, 2132], "text": ["Recomputes any normals that are affected by polygons that use both\n        transformed and untransformed points. When transforming the full\n        geometry or full connected components, the results should be the same\n        as when this option is off, i.e. the normals will just be transformed\n        and not recomputed. This does nothing if ", {"text": ["P"], "type": "code"}, " is not being transformed."]}], "indent": 0, "text": ["Recompute Affected Normals"], "role": "item", "extent": [1720, 1748], "type": "parameters_item"}, {"body": [{"indent": 8, "type": "para", "extent": [2156, 2199], "text": ["Normal lengths remain unaffected."]}], "indent": 0, "text": ["Preserve Normal Length"], "role": "item", "extent": [2132, 2156], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Code"], "extent": [1142, 1154], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [2226, 2687], "text": ["To transform attributes other than position, such as velocity or normals, how the deformation changes over space must be known, not just how the deformation treats a single point.  If you know how to compute this, you can write the derivative into the ", {"text": ["xform"], "type": "code"}, " parameter and select ", {"text": ["Explicitly Set Xform"], "type": "code"}, ".  Usually, however, deformations can have difficult to compute behavior, so it is best to let this node automatically compute the deformation behavior."]}, {"indent": 4, "type": "para", "extent": [2687, 2917], "text": ["Four Points does, as its names suggests, three extra deformations to determine how the deformation changes in x, y, and z directions.  This is faster than Central Differences, but is biased as it only looks in one direction."]}, {"indent": 4, "type": "para", "extent": [2917, 3152], "text": ["Central Differences does six extra deformations to find a balanced change in a neighborhood around the point being deformed.  This gives the best results for the automatic computation, but must invoke the deformer twice as often."]}], "indent": 0, "text": ["Method"], "role": "item", "extent": [2217, 2226], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3163, 3455], "text": ["A small step is taking in each direction to determine how the deformer is twisting space.  This must be small enough to pick up the key feature changes of your space, but not so small as to lead to numerical problems.  A good rule of thumb is half the inter-point spacing of your model."]}], "indent": 0, "text": ["Step Size"], "role": "item", "extent": [3152, 3163], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3473, 3681], "text": ["The automatically computed or manually computed matrix may have scale or shear components in it.  This will project them out, forcing it to be a rotation matrix.  ", {"text": ["polardecomp"], "type": "code"}, " is used for this purpose."]}], "indent": 0, "text": ["Rigid Projection"], "role": "item", "extent": [3455, 3473], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [3700, 3884], "text": ["The sign of the derivative matrix can flip in certain regions of the transform.  This will detect that and flip the sign back so the determinant of the matrix is always positive."]}], "indent": 0, "text": ["Prevent Inversion"], "role": "item", "extent": [3681, 3700], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Derivatives"], "extent": [2199, 2217], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "extent": [3922, 3985], "text": ["Only create attributes if their names match this pattern."]}, {"indent": 4, "type": "para", "extent": [3985, 4046], "text": ["The default is to not allow creation of any attributes."]}, {"indent": 4, "type": "para", "extent": [4046, 4126], "text": ["Bound attributes, such as ", {"text": ["vtxnum"], "type": "code"}, ", cannot be created and will be ignored."]}], "indent": 0, "text": ["Attributes to Create"], "role": "item", "extent": [3899, 3922], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4146, 4354], "text": ["Automatic binding with the ", {"text": ["@"], "type": "code"}, " syntax can be convenient, but if your\n    system becomes more complex there is the risk that a typo in an ", {"text": ["@"], "type": "code"}, " binding\n    will silently just bind a non-existent attribute."]}, {"indent": 4, "type": "para", "extent": [4354, 4451], "text": ["This option forces all ", {"text": ["@"], "type": "code"}, " bindings to be explicitly declared as\n    prototypes before use."]}], "indent": 0, "text": ["Enforce Prototypes"], "role": "item", "extent": [4126, 4146], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4473, 4733], "text": ["VEX functions like ", {"text": ["ch()"], "type": "code"}, " usually evaluate with respect to this node.\n    Enter a node path here to override where the path search starts from.\n    This is useful for embedding in a digital asset, where you want searches\n    to start from the asset root."]}], "indent": 0, "text": ["Evaluation Node Path"], "role": "item", "extent": [4451, 4473], "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "extent": [4752, 5102], "text": ["When a VEX parameter is exported, the bound attribute will be\n    created if it doesn\u2019t exist.  This pattern can be used to override\n    the export option on the VEX shader to avoid writing to or creating\n    certain attributes.  The pattern matches the VEX parameter, not\n    the bound attribute. The attribute will still be bound for reading."]}], "indent": 0, "text": ["Export Parameters"], "role": "item", "extent": [4733, 4752], "type": "parameters_item"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Bindings"], "extent": [3884, 3899], "container": true, "type": "h", "id": null}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "extent": [1130, 1142], "container": true, "type": "parameters_section", "id": "parameters"}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "extent": [5111, 5135], "text": [{"text": "", "fullpath": "/nodes/sop/attribvop", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribvop"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [5135, 5162], "text": [{"text": "", "fullpath": "/nodes/sop/attribwrangle", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribwrangle"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [5162, 5180], "text": [{"text": "", "fullpath": "/nodes/sop/bend", "scheme": "Node", "type": "link", "value": "/nodes/sop/bend"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "extent": [5180, 5207], "text": [{"text": "", "fullpath": "/nodes/sop/volumewrangle", "scheme": "Node", "type": "link", "value": "/nodes/sop/volumewrangle"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "extent": [5102, 5111], "container": true, "type": "related_section", "id": "related"}], "title": ["Deformation Wrangle"], "summary": ["Runs a VEX snippet to deform geometry."], "attrs": {"version": null, "tags": "attrs, core, tech", "namespace": null, "internal": "deformationwrangle", "context": "sop", "type": "node", "icon": "SOP/deformationwrangle"}, "included": ["/nodes/sop/wrangle_syntax"], "type": "root"}